<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kalyan的小书房</title>
  <icon>https://www.gravatar.com/avatar/26add54e467101c6779c59a0ed4ee504</icon>
  <subtitle>Kalyan is working hard</subtitle>
  <link href="https://kalyan-zitiu.github.io/atom.xml" rel="self"/>
  
  <link href="https://kalyan-zitiu.github.io/"/>
  <updated>2023-11-22T07:34:04.845Z</updated>
  <id>https://kalyan-zitiu.github.io/</id>
  
  <author>
    <name>Kalyan</name>
    <email>3148862192@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Bash for Begginners</title>
    <link href="https://kalyan-zitiu.github.io/2023/11/22/Bash%20Basic/"/>
    <id>https://kalyan-zitiu.github.io/2023/11/22/Bash%20Basic/</id>
    <published>2023-11-22T07:00:00.000Z</published>
    <updated>2023-11-22T07:34:04.845Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Bash-Basic"><a href="#Bash-Basic" class="headerlink" title="Bash Basic"></a>Bash Basic</h1><h2 id="Shell-和-Terminal有什么区别"><a href="#Shell-和-Terminal有什么区别" class="headerlink" title="Shell 和 Terminal有什么区别"></a>Shell 和 Terminal有什么区别</h2><ol><li><p><strong>Shell</strong>：</p><ul><li>Shell 是用户与操作系统交互的接口，特别是在类Unix系统中（比如Linux和macOS）。</li><li>它是一个命令行解释器，提供了一个命令行用户界面，用户可以在其中输入命令，Shell 会解释这些命令并调用操作系统来执行。</li><li>Shell 有许多不同的变种，包括 Bourne Shell (sh), Bourne Again Shell (bash), C Shell (csh), Korn Shell (ksh), Z Shell (zsh) 等。</li><li>Shell 也可以提供编程的功能，比如变量、控制结构（if-then-else, loops）、函数等。</li></ul></li><li><p><strong>Terminal</strong>：</p><ul><li>Terminal，有时被称为终端模拟器，是一个软件程序，用来模拟早期的硬件终端。</li><li>它是一个环境，用户可以在其中使用Shell。你可以在Terminal中启动一个Shell会话，输入命令，看到命令的输出。</li><li>Terminal 程序捕获用户的输入并将其发送到Shell，同时将Shell的输出显示给用户。</li><li>现代的操作系统，如Windows、macOS和Linux，通常都有自己的终端模拟器程序，比如macOS的Terminal.app，Linux的gnome-terminal、konsole等，Windows的Command Prompt和PowerShell等。</li></ul></li></ol><p>简单来说，Shell 是用来解释和执行命令的程序，而 Terminal 是用来与 Shell 交互的界面。在日常使用中，术语 “打开一个终端” 通常意味着启动一个终端程序并在其中运行一个Shell。</p><h2 id="学习Bash的原因"><a href="#学习Bash的原因" class="headerlink" title="学习Bash的原因"></a>学习Bash的原因</h2><p>当你遇见一些需要同时操作许多不同文件的情况或场景的时候，Bash远远会比其他编程语言执行的要快和简单</p><ol><li><p>Bash有很多内建命令，例如cp，mv，rm，grep，find等，这些命令可以直接在命令行中使用，非常适合进行文件操作和文本处理</p></li><li><p>Bash支持管道|和重定向&gt;&gt;,&gt;,&lt; 能够将一个命令的输出非常容易地转换成另一个命令地输入，以此来创建复杂的命令链。</p></li><li><p>Bash可以使用通配符，如*或者？和正则表达式来匹配文件名或文本模式，这在处理多个文件时，非常有用。</p></li><li><p>Bash直接运行在操作系统中，不需要额外的运行时环境或虚拟机。意味着它可以直接访问系统资源和工具。</p></li><li><p>Bash能够允许用户编写复杂的自动化脚本来执行一系列命令，无需编译。</p></li></ol><p>6.最后一点，Bash直接余操作系统的内核交互，是没有额外的抽象层。</p><h2 id="Bash-for-Beginners"><a href="#Bash-for-Beginners" class="headerlink" title="Bash for Beginners"></a>Bash for Beginners</h2><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20231122144022802.png" alt="image-20231122144022802"></p><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20231122145006070.png" alt="image-20231122145006070"></p><h3 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h3><p>学Bash最好的办法就是不要离开你的Terimnal</p><ol><li>能够帮你学习命令的一个命令 help </li></ol><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20231122145704095.png" alt="image-20231122145704095"></p><ol start="2"><li>能够帮助你学习的第二个命令man</li></ol><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20231122150215508.png" alt="image-20231122150215508"></p><ol start="3"><li><p>pwd和cd</p><p>cd的底层逻辑不是记录你去过的地方，而是用一个栈来对你的目录进行推入和弹出</p><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20231122151730947.png" alt="image-20231122151730947"></p></li><li><p>tree和ls</p></li></ol><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20231122152044955.png" alt="image-20231122152044955"></p><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20231122152057732.png"></p><ol start="5"><li>pushd和popd，dirs</li></ol><p>在Bash中，<code>pushd</code> 和 <code>popd</code> 是用来操作目录栈的内建命令，它们与 <code>dirs</code> 命令一起工作，以帮助你在不同的目录之间快速地切换。</p><h3 id="pushd-命令"><a href="#pushd-命令" class="headerlink" title="pushd 命令"></a>pushd 命令</h3><p><code>pushd</code> 命令用于将一个目录添加到目录栈的顶部，并且将你的当前工作目录切换到那个目录。这对于临时切换到另一个目录，执行一些操作，然后返回到原始目录非常有用。</p><p>使用方法如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">pushd</span> /path/to/new/directory</span><br></pre></td></tr></table></figure><p>这个命令会将 <code>/path/to/new/directory</code> 放入目录栈，并且把当前工作目录切换到这个新目录。</p><h3 id="popd-命令"><a href="#popd-命令" class="headerlink" title="popd 命令"></a>popd 命令</h3><p><code>popd</code> 命令用于从目录栈中移除顶部的目录，并将当前工作目录切换到新的栈顶目录。</p><p>使用方法如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">popd</span></span><br></pre></td></tr></table></figure><p>执行这个命令后，栈顶的目录将被移除，你的当前工作目录将变为之前通过 <code>pushd</code> 添加的下一个目录。</p><h3 id="dirs-命令"><a href="#dirs-命令" class="headerlink" title="dirs 命令"></a>dirs 命令</h3><p><code>dirs</code> 命令用于显示当前目录栈的内容，即你用 <code>pushd</code> 添加的所有目录列表。</p><p>使用方法如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dirs</span></span><br></pre></td></tr></table></figure><p>这个命令会列出目录栈中的所有目录，通常以空格分隔。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>下面是一个使用 <code>pushd</code> 和 <code>popd</code> 的简单示例：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 假设当前目录是 /home/user</span></span><br><span class="line"><span class="built_in">pushd</span> /var/www    <span class="comment"># 将 /var/www 添加到目录栈并切换到该目录</span></span><br><span class="line"><span class="comment"># 现在当前目录是 /var/www</span></span><br><span class="line"><span class="built_in">pushd</span> /etc        <span class="comment"># 将 /etc 添加到目录栈并切换到该目录</span></span><br><span class="line"><span class="comment"># 现在当前目录是 /etc</span></span><br><span class="line"><span class="built_in">dirs</span>              <span class="comment"># 显示目录栈内容</span></span><br><span class="line"><span class="comment"># 输出可能是 /etc /var/www /home/user</span></span><br><span class="line"><span class="built_in">popd</span>              <span class="comment"># 移除栈顶目录 (/etc) 并切换到下一个目录 (/var/www)</span></span><br><span class="line"><span class="comment"># 现在当前目录是 /var/www</span></span><br><span class="line"><span class="built_in">popd</span>              <span class="comment"># 移除栈顶目录 (/var/www) 并切换到下一个目录 (/home/user)</span></span><br><span class="line"><span class="comment"># 现在当前目录是 /home/user</span></span><br></pre></td></tr></table></figure><p>使用 <code>pushd</code> 和 <code>popd</code> 可以让你在多个工作目录之间快速切换，而无需手动输入 <code>cd</code> 命令和目录路径。这在编写脚本或进行复杂的文件系统操作时尤其有用。</p><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20231122152543455.png" alt="image-20231122152543455"></p><h2 id="命令大全"><a href="#命令大全" class="headerlink" title="命令大全"></a>命令大全</h2><h3 id="5-1运行级别"><a href="#5-1运行级别" class="headerlink" title="5.1运行级别"></a><strong>5.1运行级别</strong></h3><h4 id="基本"><a href="#基本" class="headerlink" title="基本"></a><strong>基本</strong></h4><table><thead><tr><th align="left">0</th><th>关机</th><th></th></tr></thead><tbody><tr><td align="left">1</td><td>单用户（找回丢失密码）</td><td></td></tr><tr><td align="left">2</td><td>多用户状态没有网络服务</td><td></td></tr><tr><td align="left">3</td><td>系统未使用保留给用户</td><td>multi-user.target</td></tr><tr><td align="left">4</td><td>图形界面</td><td></td></tr><tr><td align="left">5</td><td>系统重启</td><td>graphical.target</td></tr></tbody></table><p><strong>==Note==</strong><br><strong>常用系统级别是3和5，也可以切换运行级别和指定默认运行级别</strong>。</p><h4 id="切换运行级别"><a href="#切换运行级别" class="headerlink" title="切换运行级别"></a><strong>切换运行级别</strong></h4><table><thead><tr><th>Order</th><th>illustrate</th></tr></thead><tbody><tr><td>init 运行级别<strong>（init 3）</strong></td><td>将运行级别切换为3（多用户状态有网络服务）</td></tr></tbody></table><p><strong>==Note==</strong><br><strong>init 只能用来切换运行级别。下次开机后系统自动回到运行级别5。</strong></p><h4 id="设置默认运行级别"><a href="#设置默认运行级别" class="headerlink" title="设置默认运行级别"></a><strong>设置默认运行级别</strong></h4><table><thead><tr><th>Order</th><th>illustrate</th></tr></thead><tbody><tr><td>systemctl get-default</td><td>查看当前默认运行级别</td></tr><tr><td>systemctl set-default multi-user.target</td><td>设置默认运行级别为3</td></tr><tr><td>systemctl set -default graphical.target</td><td>设置默认运行级别为5</td></tr></tbody></table><p><strong>==Note==</strong><br>-<strong>此方式永久性的修改了默认运行级别。每次开机后系统都会运行该默认运行级别。</strong></p><h4 id="开机流程说明"><a href="#开机流程说明" class="headerlink" title="开机流程说明"></a><strong>开机流程说明</strong></h4><p><img src="https://img-blog.csdnimg.cn/326400f8c502421a9482254a802e0787.png" alt="img"></p><h3 id="帮助指令"><a href="#帮助指令" class="headerlink" title="帮助指令"></a><strong>帮助指令</strong></h3><table><thead><tr><th>Order</th><th>illustrate</th></tr></thead><tbody><tr><td>man 命令或配置文件</td><td>获得命令或配置文件的帮助信息</td></tr><tr><td>help 命令</td><td>获得shell内置命令的帮助信息</td></tr></tbody></table><h3 id="文件目录类"><a href="#文件目录类" class="headerlink" title="文件目录类"></a><strong>文件目录类</strong></h3><h4 id="pwd指令"><a href="#pwd指令" class="headerlink" title="pwd指令"></a><strong>pwd指令</strong></h4><table><thead><tr><th>Order</th><th>illustrate</th></tr></thead><tbody><tr><td>pwd</td><td>显示当前工作目录的绝对途径</td></tr></tbody></table><h4 id="ls指令"><a href="#ls指令" class="headerlink" title="ls指令"></a><strong>ls指令</strong></h4><table><thead><tr><th>Order</th><th>illustrate</th></tr></thead><tbody><tr><td>ls 目录或文件</td><td>显示当前目录下所有的文件和目录（不包括隐藏的）</td></tr><tr><td>ls -a 目录或文件</td><td>显示当前目录下所有的文件和目录（包括隐藏的）</td></tr><tr><td>ls -l 目录或文件 或 ll 目录或文件</td><td>以列表的方式显示信息</td></tr><tr><td>ls -lh 目录或文件</td><td>以列表的方式人性化地显示信息</td></tr></tbody></table><h4 id="cd指令"><a href="#cd指令" class="headerlink" title="cd指令"></a><strong>cd指令</strong></h4><table><thead><tr><th>Order</th><th>illustrate</th></tr></thead><tbody><tr><td>cd</td><td>切换到当前用户的家目录</td></tr><tr><td>cd ~</td><td>切换到当前用户的家目录</td></tr><tr><td>cd .</td><td>保持当前目录不变</td></tr><tr><td>cd ..</td><td>切换到上级目录</td></tr><tr><td>cd -</td><td>可以在最近两次工作目录之间来回切换</td></tr></tbody></table><h4 id="mkdir指令"><a href="#mkdir指令" class="headerlink" title="mkdir指令"></a><strong>mkdir指令</strong></h4><table><thead><tr><th>Order</th><th>illustrate</th></tr></thead><tbody><tr><td>mkdir 要创建的单级目录</td><td>创建单级目录</td></tr><tr><td>mkdir -p 要创建的多级目录</td><td>创建多级目录</td></tr></tbody></table><h4 id="rmdir指令"><a href="#rmdir指令" class="headerlink" title="rmdir指令"></a><strong>rmdir指令</strong></h4><table><thead><tr><th>Order</th><th>illustrate</th></tr></thead><tbody><tr><td>rmdir 要删除的空目录</td><td>删除空目录</td></tr><tr><td>rm -rf 要删除的非空目录</td><td>删除非空目录</td></tr></tbody></table><h4 id="touch指令"><a href="#touch指令" class="headerlink" title="touch指令"></a><strong>touch指令</strong></h4><table><thead><tr><th>Order</th><th>illustrate</th></tr></thead><tbody><tr><td>touch 文件名称</td><td>创建一个空文件</td></tr></tbody></table><h4 id="cp指令"><a href="#cp指令" class="headerlink" title="cp指令"></a><strong>cp指令</strong></h4><table><thead><tr><th>Order</th><th>illustrate</th><th>Remake</th></tr></thead><tbody><tr><td>cp source dest</td><td>将source拷贝到dest</td><td></td></tr><tr><td>cp -r source dest</td><td>将source递归拷贝到dest</td><td></td></tr><tr><td>\cp source dest</td><td>将source拷贝到dest(强制覆盖不提示)</td><td></td></tr></tbody></table><h4 id="rm指令"><a href="#rm指令" class="headerlink" title="rm指令"></a><strong>rm指令</strong></h4><table><thead><tr><th>Order</th><th>illustrate</th></tr></thead><tbody><tr><td>rm 要删除的文件或目录</td><td>移除文件或目录</td></tr><tr><td>rm -r 要删除的目录</td><td>递归删除目录</td></tr><tr><td>rm -f 要删除的文件或目录</td><td>强制删除目录不提示</td></tr></tbody></table><h4 id="mv指令"><a href="#mv指令" class="headerlink" title="mv指令"></a><strong>mv指令</strong></h4><table><thead><tr><th>Order</th><th>illustrate</th></tr></thead><tbody><tr><td>mv oldFileName newFileName</td><td>重命名（两者在同一目录下面）</td></tr><tr><td>mv /temp/movefile /targetFolder</td><td>移动文件</td></tr></tbody></table><h4 id="cat指令"><a href="#cat指令" class="headerlink" title="cat指令"></a><strong>cat指令</strong></h4><table><thead><tr><th>Order</th><th>illustrate</th></tr></thead><tbody><tr><td>cat 要查看的文件</td><td>查看文件的内容</td></tr><tr><td>cat -n 要查看的文件</td><td>查看文件的内容并显示行号</td></tr><tr><td>cat -n 要查看的文件  more</td><td>将cat查看的内容交给more指令来处理（为了浏览方便）</td></tr></tbody></table><h4 id="more指令"><a href="#more指令" class="headerlink" title="more指令"></a><strong>more指令</strong></h4><p><img src="https://img-blog.csdnimg.cn/fb32e188764542ebb25549929c4a24ff.png" alt="img"><br>|Order|illustrate|<br>|—–|—–|<br>|more 要查看的文件|查看文件的内容（浏览更方便）|</p><h4 id="less指令"><a href="#less指令" class="headerlink" title="less指令"></a><strong>less指令</strong></h4><table><thead><tr><th>Order</th><th>illustrate</th></tr></thead><tbody><tr><td>less 要查看的文件</td><td>查看文件的内容</td></tr></tbody></table><p><strong>==Note==</strong><br><strong>less 指令用来分屏查看文件内容，它的功能与more 指令类似，但是比 more 指令更加强大，支持各种显示终端。less指令在显示文件内容时，并不是一次将整个文件加载之后才显示，而是根据显示需要加载内容，对于显示大型文件具有较高的效率。</strong></p><p><img src="https://img-blog.csdnimg.cn/5a3f4976cdc74d8e966916588413378c.png" alt="img"></p><h4 id="echo指令"><a href="#echo指令" class="headerlink" title="echo指令"></a><strong>echo指令</strong></h4><table><thead><tr><th>Order</th><th>illustrate</th></tr></thead><tbody><tr><td>echo $PATH</td><td>输出当前PATH环境变量</td></tr><tr><td>echo $HOSTNAME</td><td>输出当前HOSTNAME环境变量（主机名）</td></tr><tr><td>echo ‘hello world’</td><td>输出hello world</td></tr></tbody></table><h4 id="head指令"><a href="#head指令" class="headerlink" title="head指令"></a><strong>head指令</strong></h4><p>==head指令用于查看文件开头的部分内容（默认情况下显示前10行）。==<br>|Order|illustrate|<br>|—–|—–|<br>|head 文件|查看文件开头的前10行内容|<br>|head -n 5 文件|查看文件开头的前5行内容|</p><h4 id="tail指令"><a href="#tail指令" class="headerlink" title="tail指令"></a><strong>tail指令</strong></h4><table><thead><tr><th>Order</th><th>illustrate</th></tr></thead><tbody><tr><td>tail 文件</td><td>查看文件尾部的后10行内容</td></tr><tr><td>tail -n 5 文件</td><td>查看文件尾部的后5行内容</td></tr><tr><td>tail -f 文件</td><td>实时追踪该文档的所有更新</td></tr></tbody></table><h4 id="gt-指令和-gt-gt-指令"><a href="#gt-指令和-gt-gt-指令" class="headerlink" title="&gt;指令和&gt;&gt;指令"></a><strong>&gt;指令和&gt;&gt;指令</strong></h4><table><thead><tr><th>Order</th><th>illustrate</th></tr></thead><tbody><tr><td>ls -l &gt; 文件</td><td>列表的内容写入（覆盖）到文件</td></tr><tr><td>ls -l &gt;&gt; 文件</td><td>列表的内容追加到文件</td></tr><tr><td>cat 文件1 &gt; 文件2</td><td>文件1的内容覆盖到文件2</td></tr><tr><td>echo ‘hello’  &gt;&gt; 文件</td><td>hello追加到文件中</td></tr></tbody></table><h4 id="In指令"><a href="#In指令" class="headerlink" title="In指令"></a><strong>In指令</strong></h4><table><thead><tr><th>Order</th><th>illustrate</th></tr></thead><tbody><tr><td>ln -s 原文件或目录 软链接名</td><td>给原文件创建一个软链接(这样软链接就指向了原文件或目录)</td></tr></tbody></table><p><strong>==Note==</strong><br><strong>当工作目录为软链接所在目录，使用pwd查看的目录仍然是软链接所在目录而不是原目录。</strong></p><h4 id="history指令"><a href="#history指令" class="headerlink" title="history指令"></a><strong>history指令</strong></h4><p>==history指令用于查看已经执行过的历史命令。==</p><table><thead><tr><th>Order</th><th>illustrate</th></tr></thead><tbody><tr><td>histrory</td><td>查看已经执行过的历史命令</td></tr><tr><td>histrory n</td><td>查看最近执行过的n条历史命令</td></tr><tr><td>!n</td><td>执行历史编号为n的历史命令</td></tr></tbody></table><h3 id="时间日期类"><a href="#时间日期类" class="headerlink" title="时间日期类"></a>时间日期类</h3><h4 id="date指令"><a href="#date指令" class="headerlink" title="date指令"></a>date指令</h4><p>date指令用于显示当前日期<br>|Order|illustrate|<br>|—–|—–|<br>|date|显示当前时间|<br>|date +%Y|显示当前年份|<br>|date +%m|显示当前月份|<br>|date +%d|显示当前是哪一天|<br>|date “+%Y-%m-%d %H:%M:%S”|显示年月日时分秒|</p><h4 id="设置时间"><a href="#设置时间" class="headerlink" title="设置时间"></a>设置时间</h4><table><thead><tr><th>Order</th><th>illustrate</th></tr></thead><tbody><tr><td>date -s 字符串时间</td><td>设置系统当前时间</td></tr></tbody></table><h3 id="cal指令"><a href="#cal指令" class="headerlink" title="cal指令"></a>cal指令</h3><p>cal指令用于显示日历<br>|Order|illustrate|<br>|—–|—–|<br>|cal|显示本月日历|<br>|cal 年份|显示本年所有月日历|</p><h3 id="搜索查找类"><a href="#搜索查找类" class="headerlink" title="搜索查找类"></a><strong>搜索查找类</strong></h3><h4 id="find指令"><a href="#find指令" class="headerlink" title="find指令"></a><strong>find指令</strong></h4><table><thead><tr><th>Order</th><th>illustrate</th></tr></thead><tbody><tr><td>find 指定目录 -name 要查找的文件或目录</td><td>按照指定目录查询文件或目录</td></tr><tr><td>find 指定目录 -user 用户名</td><td>按照指定目录查找指定用户名的所有文件或目录</td></tr><tr><td>find 指定目录 -size 文件大小</td><td>按照指定目录查找满足文件大小的所有文件或目录</td></tr></tbody></table><p><strong>==Note==</strong><br><strong>1.文件大小：大于+，小于-，等于=</strong><br><strong>2.find指令将从指定目录向下递归地遍历其各个子目录，将满足条件的文件或者目录显示在终端。</strong><br><strong>find指令也可以不指定目录进行查找。</strong></p><h4 id="locate指令"><a href="#locate指令" class="headerlink" title="locate指令"></a><strong>locate指令</strong></h4><table><thead><tr><th>Order</th><th>illustrate</th></tr></thead><tbody><tr><td>locate 要查找的文件或目录</td><td>快速查找文件或目录</td></tr><tr><td><strong>==Note==</strong></td><td></td></tr><tr><td><strong>1.locate指令无需遍历整个文件系统，locate 指令利用事先建立的系统中所有文件名称及路径的         locate数据库实现快速定位给定的文件路径。</strong></td><td></td></tr></tbody></table><p><strong>2.为了保证查询结果的准确度，管理员必须定期更新locate时刻。</strong></p><p><strong>3.由于locate指令基于数据库进行查询，所以第一次运行前，必须使用updatedb指令创建locatc数据库。</strong></p><h4 id="which指令"><a href="#which指令" class="headerlink" title="which指令"></a><strong>which指令</strong></h4><table><thead><tr><th>Order</th><th>illustrate</th></tr></thead><tbody><tr><td>which 要查找的命令</td><td>查找指令的存放路径</td></tr></tbody></table><p><strong>==Note==</strong><br>which指令用于查找指令的存放路径。</p><h4 id="管道符“-”和grep指令"><a href="#管道符“-”和grep指令" class="headerlink" title="管道符“|”和grep指令"></a><strong>管道符“|”和grep指令</strong></h4><table><thead><tr><th>Order</th><th>illustrate</th></tr></thead><tbody><tr><td>grep 查找内容 源文件</td><td>将源文件中的查找内容输出</td></tr><tr><td>grep -n 查找内容 源文件</td><td>将源文件中的查找内容输出，并显示行号</td></tr><tr><td>grep -i 查找内容 源文件</td><td>将源文件中的查找内容输出（不区分大小写）</td></tr></tbody></table><p><strong>==Note==</strong><br>1.管道符“|”表示将前一个命令的处理结果输出传递给后面的命令处理。<br>    grep指令用于过滤查找，可配合管道符“|”使用。</p><p>==<strong>Case study</strong><br><strong>请在 hello.txt文件中，查找”yes”所在行，并且显示行号。<br>法一：cat hello.txt | grep -n “yes”<br>法二：grep -n “yes” hello.txt</strong></p><h3 id="压缩和解压"><a href="#压缩和解压" class="headerlink" title="压缩和解压"></a>压缩和解压</h3><h4 id="gzip-gunzio指令"><a href="#gzip-gunzio指令" class="headerlink" title="gzip/gunzio指令"></a>gzip/gunzio指令</h4><table><thead><tr><th>Order</th><th>illustrate</th></tr></thead><tbody><tr><td>gzip 文件</td><td>压缩文件（只能将文件压缩为*.gz文件）</td></tr><tr><td>gunzip 文件.gz</td><td>解压缩文件</td></tr></tbody></table><h4 id="zip-unzip指令"><a href="#zip-unzip指令" class="headerlink" title="==zip/unzip指令=="></a>==<strong>zip/unzip指令</strong>==</h4><table><thead><tr><th>Order</th><th>illustrate</th></tr></thead><tbody><tr><td>zip XXX.zip 要压缩的文件</td><td>压缩文件</td></tr><tr><td>zip -r XXX.zip 要压缩的目录</td><td>压缩目录（递归压缩）</td></tr><tr><td>unzip XXX.zip</td><td>将压缩包解压到当前目录下</td></tr><tr><td>unzip -d 目标目录 XXX.zip</td><td>将压缩包解压到指定目录下</td></tr></tbody></table><h4 id="tar指令"><a href="#tar指令" class="headerlink" title="==tar指令=="></a>==<strong>tar指令</strong>==</h4><table><thead><tr><th>Order</th><th>illustrate</th></tr></thead><tbody><tr><td>tar-z</td><td>压缩/解压缩</td></tr><tr><td>tar-c</td><td>产生tar打包文件</td></tr><tr><td>tar-v</td><td>显示详细信息</td></tr><tr><td>tar-f</td><td>指定压缩后的文件名</td></tr><tr><td>tar-x</td><td>解包.tar文件</td></tr><tr><td>tar-C</td><td>解压缩到指定目录（解压缩的目录必须存在）</td></tr><tr><td>tar -zcvf 打包文件.tar.gz 被打包的文件</td><td>打包压缩文件</td></tr><tr><td>tar -zxvf 打包文件.tar.gz</td><td>解包解压缩文件至当前目录下</td></tr><tr><td>tar -zxvf 打包文件.tar.gz -C 目标目录</td><td>解包解压缩文件至当前指定目录下</td></tr></tbody></table><h3 id="Bash组基本介绍"><a href="#Bash组基本介绍" class="headerlink" title="Bash组基本介绍"></a><strong>Bash组基本介绍</strong></h3><h4 id="Bash组基本介绍-1"><a href="#Bash组基本介绍-1" class="headerlink" title="Bash组基本介绍**"></a>Bash组基本介绍**</h4><p>在Bash中的每个用户必须属于一个组，且可以改变每个用户所在的组。<br>在Bash中的每个文件拥有以下概念：<br>1.所有者2.所在组3.其它组</p><h4 id="文件-目录所有者"><a href="#文件-目录所有者" class="headerlink" title="文件/目录所有者"></a><strong>文件/目录所有者</strong></h4><p><em><strong>一般为文件/目录的创建者，即谁创建文件/目录，谁就是该文件/目录的所有者。</strong></em></p><h4 id="查看文件-目录的所有者"><a href="#查看文件-目录的所有者" class="headerlink" title="查看文件/目录的所有者"></a><strong>查看文件/目录的所有者</strong></h4><p>ls -alh</p><p><img src="https://img-blog.csdnimg.cn/e36e9c31bcb248cda9ecc05d69c2440b.png" alt="img"></p><h4 id="修改文件-目录的所有者"><a href="#修改文件-目录的所有者" class="headerlink" title="修改文件/目录的所有者"></a><strong>修改文件/目录的所有者</strong></h4><table><thead><tr><th>Order</th><th>illustrate</th></tr></thead><tbody><tr><td>chown 所有者 文件/目录</td><td>修改文件/目录的所有者</td></tr><tr><td>chown -R 所有者 目录</td><td>递归修改目录及目录内容的所有者</td></tr><tr><td>chown 所有者:所在组 文件/目录</td><td>修改文件/目录的所有者和所在组</td></tr></tbody></table><h4 id="文件-目录所在组"><a href="#文件-目录所在组" class="headerlink" title="文件/目录所在组"></a><strong>文件/目录所在组</strong></h4><p><strong>当某个用户创建了一个文件后，这个文件的所在组就是该用户所在的组(默认)。</strong></p><h3 id="查看文件-目录的所在组"><a href="#查看文件-目录的所在组" class="headerlink" title="查看文件/目录的所在组"></a><strong>查看文件/目录的所在组</strong></h3><p>ls -alh</p><p><img src="https://img-blog.csdnimg.cn/966d4fe8a879494297ee9578ce9a97be.png" alt="img"></p><h4 id="修改文件-目录的所在组"><a href="#修改文件-目录的所在组" class="headerlink" title="修改文件/目录的所在组"></a><strong>修改文件/目录的所在组</strong></h4><table><thead><tr><th>Order</th><th>illustrate</th></tr></thead><tbody><tr><td>chgrp 所在组 文件/目录</td><td>修改文件/目录的所在组</td></tr><tr><td>chgrp -R 所在组 目录</td><td>递归修改目录及目录内容的所在组</td></tr></tbody></table><h4 id="其它组"><a href="#其它组" class="headerlink" title="其它组"></a><strong>其它组</strong></h4><p><strong>除文件的所有者和所在组的用户外，系统的其它用户都属于文件的其它组。</strong></p><h3 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a><strong>权限管理</strong></h3><h4 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a><strong>基本介绍</strong></h4><p><img src="https://img-blog.csdnimg.cn/1055e2e25bcd4f32a559061862242ae5.png" alt="img"></p><p><strong>0-9位说明</strong></p><p>1.第0位确定文件类型（-、l、d、c、b）<br>        -表示普通文件<br>        l是链接，相当于windows的快捷方式<br>        d是目录，相当于windows的文件夹<br>        c是字符设备文件，例如鼠标，键盘<br>        b是块设备，例如硬盘<br>2.第1-3位确定该文件所有者拥有的权限。<br>3.第4-6位确定与该文件所有者同一组的用户拥有的权限。<br>4.第7-9位确定不与该文件所有者同一组的其他用户拥有的权限。</p><h4 id="rwx作用到文件"><a href="#rwx作用到文件" class="headerlink" title="rwx作用到文件"></a><strong>rwx作用到文件</strong></h4><pre><code> r表示可读（read）：可以查看文件中的内容 w表示可写（write）：可以修改文件中的内容，但是不一定可以删除该文件（因为删除一个      文件的前提是对该文件所在目录有写权限，才能删除该文件） x表示可执行（execute）：可以执行该文件</code></pre><h4 id="rwx作用到目录"><a href="#rwx作用到目录" class="headerlink" title="rwx作用到目录"></a><strong>rwx作用到目录</strong></h4><p><strong>1.r表示可读（read）：可以查看目录中的内容（ls查看）</strong></p><p><strong>2.w表示可写（write）：可以创建、删除目录中的内容，重命名目录</strong></p><p><strong>3.x表示可执行（execute）：可以进入该目录（cd进入）</strong></p><h4 id="ls-l扩展"><a href="#ls-l扩展" class="headerlink" title="ls -l扩展"></a><strong>ls -l扩展</strong></h4><p><img src="https://img-blog.csdnimg.cn/1055e2e25bcd4f32a559061862242ae5.png" alt="img"></p><p>ls -l可显示目录下文件的详细信息,从左往右依次是：<br>     文件类型<br>     权限<br>     硬链接数（对于文件来说）或子目录数（对于目录来说，包括隐藏目录）<br>     用户<br>     组<br>     文件/文件夹大小（字节）<br>     最后修改日期<br>     文件名</p><h4 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a><strong>chmod</strong></h4><p><strong>chmod指令用于修改文件或者目录的权限。</strong></p><p><strong>+、-、=变更权限</strong><br>|Order|illustrate|<br>|—–|—–|<br>|chmod u=rwx,g=rx,o=x 文件/目录|给文件/目录的所有者读写执行的权限，所在组读执行的权限其它组执行的权限    |<br>|chmod o+x 文件/目录|给文件/目录的其它组增加执行的权限|<br>|chmod a-x 文件/目录|给文件/目录的所有人除去执行的权限|</p><table><thead><tr><th>Remake</th><th>—–</th></tr></thead><tbody><tr><td>u：</td><td>所有者</td></tr><tr><td>g：</td><td>所在组</td></tr><tr><td>o：</td><td>其它组</td></tr><tr><td>a：</td><td>所有人</td></tr><tr><td>=：</td><td>赋予</td></tr><tr><td>+：</td><td>增加</td></tr><tr><td>-：</td><td>除去</td></tr></tbody></table><h4 id="数字变更权限"><a href="#数字变更权限" class="headerlink" title="数字变更权限"></a><strong>数字变更权限</strong></h4><table><thead><tr><th>Order</th><th>illustrate</th></tr></thead><tbody><tr><td>chmod 751 文件/目录</td><td>给文件/目录的所有者读写执行的权限，所在组读执行的权限，其它组执行的权限</td></tr></tbody></table><h3 id="定时任务调度"><a href="#定时任务调度" class="headerlink" title="定时任务调度"></a>定时任务调度</h3><h4 id="crond任务调度"><a href="#crond任务调度" class="headerlink" title="crond任务调度"></a>crond任务调度</h4><p>1.任务调度：系统在某个时间执行的特定命令或者程序。<br>2.任务调度分类：<br>（1）.系统工作：有些重要的工作必须周而复始的执行<br>（2）.个别用户工作：个别用户可能希望执行某些程序</p><p><img src="https://img-blog.csdnimg.cn/b8afa5a9321540b9a81ab9062238d683.png" alt="img"></p>]]></content>
    
    
    <summary type="html">Bash shell</summary>
    
    
    
    <category term="Basic" scheme="https://kalyan-zitiu.github.io/categories/Basic/"/>
    
    <category term="Study Note" scheme="https://kalyan-zitiu.github.io/categories/Basic/Study-Note/"/>
    
    
    <category term="Basic" scheme="https://kalyan-zitiu.github.io/tags/Basic/"/>
    
  </entry>
  
  <entry>
    <title>Azure云端防护：构建网络安全组</title>
    <link href="https://kalyan-zitiu.github.io/2023/11/20/Linux%20Bash/"/>
    <id>https://kalyan-zitiu.github.io/2023/11/20/Linux%20Bash/</id>
    <published>2023-11-20T12:00:00.000Z</published>
    <updated>2023-11-21T14:27:17.503Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建管理网络安全组"><a href="#创建管理网络安全组" class="headerlink" title="创建管理网络安全组"></a>创建管理网络安全组</h1><p>配置网络安全组和安全规则，以限制到特定服务器的网络流量。 你希望让应用服务器能通过 HTTP 连接到数据库服务器。 不希望数据库服务器通过 HTTP 连接到应用服务器。</p><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20231121165732052.png" alt="image-20231121165732052"></p><h2 id="变量资源分配"><a href="#变量资源分配" class="headerlink" title="变量资源分配"></a>变量资源分配</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rg=learn-c5547acb-6432-4632-9c2e-17e555ac9e72</span><br></pre></td></tr></table></figure><p>  在 Azure Cloud Shell 中，将资源组分配给变量通常是为了简化管理任务和自动化脚本中的操作。当你在 Azure Cloud Shell 或任何脚本中运行命令时，经常需要引用资源组名称。如果你有一个变量，比如 <code>$rg</code>，存储了资源组的名称，你就可以在后续的命令中重复使用这个变量，而不是每次都输入完整的资源组名称。</p><p>例如，如果你将资源组名称分配给变量 <code>$rg</code>，那么你可以在创建资源、查询资源状态、删除资源等命令中使用这个变量，如下所示：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 分配资源组名称到变量</span></span><br><span class="line">rg=<span class="string">&quot;your-resource-group-name&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用变量创建一个新的Azure虚拟机</span></span><br><span class="line">az vm create --resource-group <span class="variable">$rg</span> --name MyVm --image UbuntuLTS --generate-ssh-keys</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出资源组中的所有资源</span></span><br><span class="line">az resource list --resource-group <span class="variable">$rg</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除资源组</span></span><br><span class="line">az group delete --name <span class="variable">$rg</span> --<span class="built_in">yes</span> --no-wait</span><br></pre></td></tr></table></figure><p>这样做有几个好处：</p><ol><li><p><strong>减少错误</strong>：每次输入资源组名称时都有可能出错，尤其是在名称很长或复杂时。使用变量可以减少这种风险。</p></li><li><p><strong>提高效率</strong>：不需要每次都输入完整的资源组名称，可以快速重复使用变量。</p></li><li><p><strong>提高可读性</strong>：在脚本中使用变量可以使代码更容易理解，尤其是对于其他可能查看或维护这些脚本的人。</p></li><li><p><strong>易于修改</strong>：如果资源组名称变更，或者你想要在不同的资源组上执行相同的一系列命令，你只需要在一个地方更新变量的值，而不是修改每一条命令。</p></li><li><p><strong>自动化和模板化</strong>：在自动化脚本中使用变量可以使脚本更加通用和可配置，这对于创建可复用的脚本模板非常有用。</p></li></ol><p>要在 Azure Cloud Shell 中分配资源组到变量 <code>rg</code>，你可以使用以下命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rg=$(az group list --query <span class="string">&quot;[?name==&#x27;your-sandbox-resource-group-name&#x27;].name&quot;</span> -o tsv)</span><br></pre></td></tr></table></figure><p>这个命令使用 <code>az group list</code> 命令列出所有资源组，然后通过 <code>--query</code> 参数结合 JMESPath 查询语言来提取特定名称的资源组名，最后通过 <code>-o tsv</code> 输出为纯文本格式，然后将结果赋值给变量 <code>rg</code>。这样，你就可以在后续的 Azure CLI 命令中使用 <code>$rg</code> 来代表这个资源组名称了。</p><h2 id="创建ERP-servers虚拟网络和Applications子网"><a href="#创建ERP-servers虚拟网络和Applications子网" class="headerlink" title="创建ERP-servers虚拟网络和Applications子网"></a>创建ERP-servers虚拟网络和Applications子网</h2><p>  该命令是用来在Azure云服务中创建一个虚拟网络（Virtual Network，简称VNet）及其子网的。Azure的虚拟网络是一个隔离的网络环境，它允许你在Azure中自定义私有IP地址块、创建子网、配置路由和网络策略。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">az network vnet create \  <span class="comment"># 调用Azure CLI的命令来创建一个虚拟网络。</span></span><br><span class="line">    --resource-group <span class="variable">$rg</span> \  <span class="comment"># 指定Azure资源组的名称，该资源组是用来组织和管理Azure资源的容器。这里使用$rg变量来表示资源组名称。</span></span><br><span class="line">    --name ERP-servers \  <span class="comment"># 设置虚拟网络的名称为&quot;ERP-servers&quot;。</span></span><br><span class="line">    --address-prefixes 10.0.0.0/16 \  <span class="comment"># 定义虚拟网络的IP地址空间。这里使用了CIDR表示法，表示这个虚拟网络可以包含从10.0.0.0到10.0.255.255的IP地址。</span></span><br><span class="line">    --subnet-name Applications \  <span class="comment"># 在虚拟网络内创建一个子网，并命名为&quot;Applications&quot;。</span></span><br><span class="line">    --subnet-prefixes 10.0.0.0/24  <span class="comment"># 为&quot;Applications&quot;子网定义IP地址范围。这里的范围是10.0.0.0到10.0.0.255。</span></span><br></pre></td></tr></table></figure><p>执行这个命令后，你将在指定的资源组中创建一个名为”ERP-servers”的虚拟网络，该网络拥有一个名为”Applications”的子网。这个子网的地址范围是10.0.0.0/24，这意味着它可以包含256个IP地址（从10.0.0.0到10.0.0.255）。</p><p>在实际执行该命令之前，确保你已经设置了<code>$rg</code>变量，它应该包含一个有效的资源组名称。如果<code>$rg</code>变量未设置或为空，命令将会失败。如果你不确定变量的当前值，可以通过以下命令来检查：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$rg</span></span><br></pre></td></tr></table></figure><p>如果变量未设置或你想要直接指定资源组名称，可以直接在命令中替换<code>$rg</code>部分，如下所示：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">az network vnet create \</span><br><span class="line">    --resource-group my-resource-group-name \</span><br><span class="line">    --name ERP-servers \</span><br><span class="line">    --address-prefixes 10.0.0.0/16 \</span><br><span class="line">    --subnet-name Applications \</span><br><span class="line">    --subnet-prefixes 10.0.0.0/24</span><br></pre></td></tr></table></figure><p>请确保将<code>my-resource-group-name</code>替换为实际使用的资源组名称。</p><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20231121220713610.png" alt="image-20231121220713610"></p><h2 id="创建Databases子网"><a href="#创建Databases子网" class="headerlink" title="创建Databases子网"></a>创建Databases子网</h2><p>  为了在已经存在的虚拟网络 <code>ERP-servers</code> 中创建一个新的子网 <code>Databases</code>，你可以使用 <code>az network vnet subnet create</code> 命令。下面是这个命令的详细解释和格式：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">az network vnet subnet create \  <span class="comment"># 命令用于在Azure中创建一个新的子网</span></span><br><span class="line">    --resource-group <span class="variable">$rg</span> \  <span class="comment"># 指定子网所属的资源组，这里使用$rg变量来表示资源组名称</span></span><br><span class="line">    --vnet-name ERP-servers \  <span class="comment"># 指定虚拟网络的名称，在这个例子中是&quot;ERP-servers&quot;</span></span><br><span class="line">    --address-prefixes 10.0.1.0/24 \  <span class="comment"># 定义子网的IP地址范围，这里使用CIDR表示法，表示子网可以包含从10.0.1.0到10.0.1.255的IP地址</span></span><br><span class="line">    --name Databases  <span class="comment"># 设置子网的名称为&quot;Databases&quot;</span></span><br></pre></td></tr></table></figure><p>在执行这个命令之前，请确保 <code>$rg</code> 变量已经被赋值为你的Azure资源组的名称。如果 <code>$rg</code> 变量没有设置或者你不想使用变量，可以直接在命令中指定资源组的名称，例如：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">az network vnet subnet create \</span><br><span class="line">    --resource-group my-resource-group-name \</span><br><span class="line">    --vnet-name ERP-servers \</span><br><span class="line">    --address-prefixes 10.0.1.0/24 \</span><br><span class="line">    --name Databases</span><br></pre></td></tr></table></figure><p>请将 <code>my-resource-group-name</code> 替换为你的实际资源组名称。</p><p>执行这个命令将会在 <code>ERP-servers</code> 虚拟网络中创建一个新的子网 <code>Databases</code>，其IP地址范围是 <code>10.0.1.0/24</code>。这个子网可以用于数据库服务器或相关服务，以保持网络的逻辑分隔和组织。</p><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20231121221015180.png" alt="image-20231121221015180"></p><h2 id="创建ERP-SERVERS-NSG网络安全组"><a href="#创建ERP-SERVERS-NSG网络安全组" class="headerlink" title="创建ERP-SERVERS-NSG网络安全组"></a>创建ERP-SERVERS-NSG网络安全组</h2><p>  要在Azure中创建一个新的网络安全组（NSG），可以使用 <code>az network nsg create</code> 命令。网络安全组用于定义入站和出站网络流量的安全规则，以此来控制对Azure虚拟网络中资源的访问。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">az network nsg create \  <span class="comment"># 命令用于在Azure中创建一个新的网络安全组</span></span><br><span class="line">    --resource-group <span class="variable">$rg</span> \  <span class="comment"># 指定网络安全组所属的资源组，这里使用$rg变量来表示资源组名称</span></span><br><span class="line">    --name ERP-SERVERS-NSG  <span class="comment"># 设置网络安全组的名称为&quot;ERP-SERVERS-NSG&quot;</span></span><br></pre></td></tr></table></figure><p>在执行这个命令之前，请确保 <code>$rg</code> 变量已经被赋值为你的Azure资源组的名称。如果 <code>$rg</code> 变量没有设置或者你不想使用变量，可以直接在命令中指定资源组的名称，例如：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">az network nsg create \</span><br><span class="line">    --resource-group my-resource-group-name \</span><br><span class="line">    --name ERP-SERVERS-NSG</span><br></pre></td></tr></table></figure><p>请将 <code>my-resource-group-name</code> 替换为你的实际资源组名称。</p><p>执行这个命令后，将会在指定的资源组中创建一个名为 <code>ERP-SERVERS-NSG</code> 的网络安全组。创建了NSG之后，你可能还需要创建和关联安全规则来定义允许或拒绝的流量类型。这些规则可以通过 <code>az network nsg rule create</code> 命令来创建。</p><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20231121221102757.png" alt="image-20231121221102757"></p><h2 id="创建运行Ubuntu的VM"><a href="#创建运行Ubuntu的VM" class="headerlink" title="创建运行Ubuntu的VM"></a>创建运行Ubuntu的VM</h2><p>  创建两个 VM，名称分别为 AppServer 和 DataServer。 需将 AppServer 部署到 Applications 子网，并将 DataServer 部署到 Databases 子网。 将 VM 网络接口添加到 ERP-SERVERS-NSG 网络安全组。 然后使用这些 VM 测试网络安全组。</p><h3 id="AppServer"><a href="#AppServer" class="headerlink" title="AppServer"></a>AppServer</h3><p>要生成 AppServer VM，可以使用 <code>az vm create</code> 命令。该命令将创建一个新的虚拟机，并将其配置为使用指定的资源组、虚拟网络、子网、网络安全组等。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -N https://raw.githubusercontent.com/MicrosoftDocs/mslearn-secure-and-isolate-with-nsg-and-service-endpoints/master/cloud-init.yml &amp;&amp; \</span><br><span class="line">az vm create \</span><br><span class="line">    --resource-group <span class="variable">$rg</span> \  <span class="comment"># 指定虚拟机所属的资源组，这里使用$rg变量来表示资源组名称</span></span><br><span class="line">    --name AppServer \  <span class="comment"># 设置虚拟机的名称为&quot;AppServer&quot;</span></span><br><span class="line">    --vnet-name ERP-servers \  <span class="comment"># 指定虚拟机所属的虚拟网络名称</span></span><br><span class="line">    --subnet Applications \  <span class="comment"># 指定虚拟机所属的子网名称</span></span><br><span class="line">    --nsg ERP-SERVERS-NSG \  <span class="comment"># 指定虚拟机所使用的网络安全组的名称</span></span><br><span class="line">    --image Ubuntu2204 \  <span class="comment"># 指定虚拟机的映像（操作系统），这里使用Ubuntu 22.04</span></span><br><span class="line">    --size Standard_DS1_v2 \  <span class="comment"># 指定虚拟机的大小/性能配置</span></span><br><span class="line">    --generate-ssh-keys \  <span class="comment"># 自动生成SSH密钥对用于远程登录</span></span><br><span class="line">    --admin-username azureuser \  <span class="comment"># 指定管理员用户名</span></span><br><span class="line">    --custom-data cloud-init.yml \  <span class="comment"># 指定自定义数据（用于配置虚拟机）</span></span><br><span class="line">    --no-wait \  <span class="comment"># 不等待虚拟机创建完成，立即返回</span></span><br><span class="line">    --admin-password &lt;password&gt;  <span class="comment"># 指定管理员密码，将 &lt;password&gt; 替换为复杂的密码</span></span><br></pre></td></tr></table></figure><p>在执行这个命令之前，请确保 <code>$rg</code> 变量已经被赋值为你的Azure资源组的名称，并将 <code>&lt;password&gt;</code> 替换为你希望设置的复杂密码。</p><p>此命令还使用 <code>wget</code> 命令从指定的URL下载 <code>cloud-init.yml</code> 文件。该文件包含了自定义数据，用于在虚拟机创建过程中配置虚拟机。请确保可以从 Cloud Shell 访问该 URL。</p><p>执行这个命令后，将会创建一个名为 <code>AppServer</code> 的虚拟机，并将其配置为使用指定的资源组、虚拟网络、子网、网络安全组等。虚拟机将使用指定的映像（Ubuntu 22.04）和大小（Standard_DS1_v2）。管理员用户名为 <code>azureuser</code>，密码为你设置的复杂密码。虚拟机创建过程中将使用 <code>cloud-init.yml</code> 文件进行配置。</p><p>请注意，命令中的 <code>--no-wait</code> 参数将使命令立即返回，而不等待虚拟机创建完成。如果希望等待虚拟机创建完成后再返回，请删除 <code>--no-wait</code> 参数。</p><p>你可以根据需要修改命令中的参数来适应你的环境和需求。</p><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20231121221302267.png" alt="image-20231121221302267"></p><h3 id="DataServer"><a href="#DataServer" class="headerlink" title="DataServer"></a>DataServer</h3><p>要生成 DataServer VM，可以使用 <code>az vm create</code> 命令。该命令将创建一个新的虚拟机，并将其配置为使用指定的资源组、虚拟网络、子网、网络安全组等。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">az vm create \</span><br><span class="line">    --resource-group <span class="variable">$rg</span> \  <span class="comment"># 指定虚拟机所属的资源组，这里使用$rg变量来表示资源组名称</span></span><br><span class="line">    --name DataServer \  <span class="comment"># 设置虚拟机的名称为&quot;DataServer&quot;</span></span><br><span class="line">    --vnet-name ERP-servers \  <span class="comment"># 指定虚拟机所属的虚拟网络名称</span></span><br><span class="line">    --subnet Databases \  <span class="comment"># 指定虚拟机所属的子网名称</span></span><br><span class="line">    --nsg ERP-SERVERS-NSG \  <span class="comment"># 指定虚拟机所使用的网络安全组的名称</span></span><br><span class="line">    --size Standard_DS1_v2 \  <span class="comment"># 指定虚拟机的大小/性能配置</span></span><br><span class="line">    --image Ubuntu2204 \  <span class="comment"># 指定虚拟机的映像（操作系统），这里使用Ubuntu 22.04</span></span><br><span class="line">    --generate-ssh-keys \  <span class="comment"># 自动生成SSH密钥对用于远程登录</span></span><br><span class="line">    --admin-username azureuser \  <span class="comment"># 指定管理员用户名</span></span><br><span class="line">    --custom-data cloud-init.yml \  <span class="comment"># 指定自定义数据（用于配置虚拟机）</span></span><br><span class="line">    --no-wait \  <span class="comment"># 不等待虚拟机创建完成，立即返回</span></span><br><span class="line">    --admin-password &lt;password&gt;  <span class="comment"># 指定管理员密码，将 &lt;password&gt; 替换为复杂的密码</span></span><br></pre></td></tr></table></figure><p>在执行这个命令之前，请确保 <code>$rg</code> 变量已经被赋值为你的Azure资源组的名称，并将 <code>&lt;password&gt;</code> 替换为你希望设置的复杂密码。</p><p>执行这个命令后，将会创建一个名为 <code>DataServer</code> 的虚拟机，并将其配置为使用指定的资源组、虚拟网络、子网、网络安全组等。虚拟机将使用指定的映像（Ubuntu 22.04）和大小（Standard_DS1_v2）。管理员用户名为 <code>azureuser</code>，密码为你设置的复杂密码。虚拟机创建过程中将使用 <code>cloud-init.yml</code> 文件进行配置。</p><p>请注意，命令中的 <code>--no-wait</code> 参数将使命令立即返回，而不等待虚拟机创建完成。如果希望等待虚拟机创建完成后再返回，请删除 <code>--no-wait</code> 参数。</p><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20231121173541435.png" alt="image-20231121173541435"></p><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20231121221508537.png" alt="image-20231121221508537"></p><h2 id="检查运行状态"><a href="#检查运行状态" class="headerlink" title="检查运行状态"></a>检查运行状态</h2><p>要确认 VM 是否正在运行，可以使用 <code>az vm list</code> 命令。该命令将列出指定资源组中的虚拟机，并显示其详细信息，包括虚拟机的名称、部署状态和电源状态。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">az vm list \</span><br><span class="line">    --resource-group <span class="variable">$rg</span> \  <span class="comment"># 指定要列出虚拟机的资源组，这里使用$rg变量来表示资源组名称</span></span><br><span class="line">    --show-details \  <span class="comment"># 显示详细信息，包括部署状态和电源状态</span></span><br><span class="line">    --query <span class="string">&quot;[*].&#123;Name:name, Provisioned:provisioningState, Power:powerState&#125;&quot;</span> \  <span class="comment"># 使用JMESPath查询语法指定要显示的属性</span></span><br><span class="line">    --output table  <span class="comment"># 以表格形式输出结果</span></span><br></pre></td></tr></table></figure><p>在执行这个命令之前，请确保 <code>$rg</code> 变量已经被赋值为你的Azure资源组的名称。</p><p>执行这个命令后，将会列出指定资源组中的虚拟机，并显示其名称、部署状态和电源状态。如果虚拟机正在运行，你将看到 <code>Power</code> 列的值为 <code>VM running</code>。</p><h2 id="检查默认连接"><a href="#检查默认连接" class="headerlink" title="检查默认连接"></a>检查默认连接</h2><h3 id="直接在shell里面使用SSH，"><a href="#直接在shell里面使用SSH，" class="headerlink" title="直接在shell里面使用SSH，"></a>直接在shell里面使用SSH，</h3><p>要列出分配给虚拟机的 IP 地址，以便连接到 VM，可以使用 <code>az vm list</code> 命令。该命令将列出指定资源组中的虚拟机，并显示其名称、私有 IP 地址和公共 IP 地址。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">az vm list \</span><br><span class="line">    --resource-group <span class="variable">$rg</span> \  <span class="comment"># 指定要列出虚拟机的资源组，这里使用$rg变量来表示资源组名称</span></span><br><span class="line">    --show-details \  <span class="comment"># 显示详细信息，包括私有 IP 地址和公共 IP 地址</span></span><br><span class="line">    --query <span class="string">&quot;[*].&#123;Name:name, PrivateIP:privateIps, PublicIP:publicIps&#125;&quot;</span> \  <span class="comment"># 使用JMESPath查询语法指定要显示的属性</span></span><br><span class="line">    --output table  <span class="comment"># 以表格形式输出结果</span></span><br></pre></td></tr></table></figure><p>在执行这个命令之前，请确保 <code>$rg</code> 变量已经被赋值为你的 Azure 资源组的名称。</p><p>执行这个命令后，将会列出指定资源组中的虚拟机，并显示其名称、私有 IP 地址和公共 IP 地址。你可以使用公共 IP 地址来连接到相应的虚拟机。</p><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20231121221602944.png" alt="image-20231121221602944"></p><h3 id="公共IP地址分配给变量"><a href="#公共IP地址分配给变量" class="headerlink" title="公共IP地址分配给变量"></a>公共IP地址分配给变量</h3><p>当你运行以下命令时：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">APPSERVERIP=<span class="string">&quot;<span class="subst">$(az vm list-ip-addresses \</span></span></span><br><span class="line"><span class="subst"><span class="string">                 --resource-group $rg \</span></span></span><br><span class="line"><span class="subst"><span class="string">                 --name AppServer \</span></span></span><br><span class="line"><span class="subst"><span class="string">                 --query <span class="string">&quot;[].virtualMachine.network.publicIpAddresses[*].ipAddress&quot;</span> \</span></span></span><br><span class="line"><span class="subst"><span class="string">                 --output tsv)</span>&quot;</span></span><br><span class="line"></span><br><span class="line">DATASERVERIP=<span class="string">&quot;<span class="subst">$(az vm list-ip-addresses \</span></span></span><br><span class="line"><span class="subst"><span class="string">                 --resource-group $rg \</span></span></span><br><span class="line"><span class="subst"><span class="string">                 --name DataServer \</span></span></span><br><span class="line"><span class="subst"><span class="string">                 --query <span class="string">&quot;[].virtualMachine.network.publicIpAddresses[*].ipAddress&quot;</span> \</span></span></span><br><span class="line"><span class="subst"><span class="string">                 --output tsv)</span>&quot;</span></span><br></pre></td></tr></table></figure><p>这些命令会执行两个 <code>az vm list-ip-addresses</code> 命令，每个命令获取一个虚拟机的公共 IP 地址。</p><ul><li>对于 AppServer，命令如下：<ul><li><code>--resource-group $rg</code>：指定资源组的名称，这里使用 <code>$rg</code> 变量表示资源组名称。</li><li><code>--name AppServer</code>：指定虚拟机的名称，这里是 AppServer。</li><li><code>--query &quot;[].virtualMachine.network.publicIpAddresses[*].ipAddress&quot;</code>：使用 JMESPath 查询语法指定要提取的公共 IP 地址。</li><li><code>--output tsv</code>：以制表符分隔的值格式输出结果。</li></ul></li><li>对于 DataServer，命令类似于上述命令，只是虚拟机的名称改为 DataServer。</li></ul><p>这些命令会将每个虚拟机的公共 IP 地址分配给相应的变量：</p><ul><li><code>APPSERVERIP</code> 变量将保存 AppServer 的公共 IP 地址。</li><li><code>DATASERVERIP</code> 变量将保存 DataServer 的公共 IP 地址。</li></ul><p>通过将公共 IP 地址保存到变量中，你可以在后续的操作中更方便地使用这些 IP 地址，比如用于 SSH 连接到虚拟机。</p><p>若要检查能否连接到 AppServer VM，请在 Shell 中运行以下命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh azureuser@<span class="variable">$APPSERVERIP</span> -o ConnectTimeout=5</span><br></pre></td></tr></table></figure><p>将会收到一条 Connection timed out 消息。</p><p>若要检查能否连接到 DataServer VM，请在 Cloud Shell 中运行以下命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh azureuser@<span class="variable">$DATASERVERIP</span> -o ConnectTimeout=5</span><br></pre></td></tr></table></figure><p>将会收到同样的连接失败消息。</p><p>请记住，默认规则会拒绝所有进入虚拟网络的入站流量，除非该流量来自同一虚拟网络。 “拒绝所有入站”规则阻止了刚刚尝试的入站 SSH 连接。</p><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20231121203649284.png" alt="image-20231121203649284"></p><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20231121221741123.png" alt="image-20231121221741123"></p><h2 id="为SSH创建安全规则"><a href="#为SSH创建安全规则" class="headerlink" title="为SSH创建安全规则"></a>为SSH创建安全规则</h2><p>创建一个新的入站安全规则，允许 SSH 访问。请在 Cloud Shell 中运行以下命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">az network nsg rule create \  <span class="comment"># 创建网络安全组规则的 Azure CLI 命令</span></span><br><span class="line">    --resource-group <span class="variable">$rg</span> \  <span class="comment"># 指定资源组的名称，这里使用 $rg 变量表示资源组名称</span></span><br><span class="line">    --nsg-name ERP-SERVERS-NSG \  <span class="comment"># 指定网络安全组的名称，这里是 ERP-SERVERS-NSG</span></span><br><span class="line">    --name AllowSSHRule \  <span class="comment"># 指定新规则的名称，这里是 AllowSSHRule</span></span><br><span class="line">    --direction Inbound \  <span class="comment"># 指定规则的方向为入站</span></span><br><span class="line">    --priority 100 \  <span class="comment"># 指定规则的优先级为 100</span></span><br><span class="line">    --source-address-prefixes <span class="string">&#x27;*&#x27;</span> \  <span class="comment"># 指定源地址前缀为任意地址</span></span><br><span class="line">    --source-port-ranges <span class="string">&#x27;*&#x27;</span> \  <span class="comment"># 指定源端口范围为任意端口</span></span><br><span class="line">    --destination-address-prefixes <span class="string">&#x27;*&#x27;</span> \  <span class="comment"># 指定目标地址前缀为任意地址</span></span><br><span class="line">    --destination-port-ranges 22 \  <span class="comment"># 指定目标端口范围为 22（SSH 端口）</span></span><br><span class="line">    --access Allow \  <span class="comment"># 指定允许访问</span></span><br><span class="line">    --protocol Tcp \  <span class="comment"># 指定协议为 TCP</span></span><br><span class="line">    --description <span class="string">&quot;Allow inbound SSH&quot;</span>  <span class="comment"># 指定规则的描述为 &quot;Allow inbound SSH&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在执行这个命令之前，请确保以下事项：</p><ul><li><code>$rg</code> 变量已经被设置为你的 Azure 资源组的名称。</li><li><code>ERP-SERVERS-NSG</code> 是你要添加规则的网络安全组的名称。你可以根据实际情况修改该名称。</li></ul><p>这个命令将创建一个名为 <code>AllowSSHRule</code> 的新规则，它允许从任何来源（<code>*</code>）通过 TCP 协议（端口 22）访问目标地址（任何地址）。该规则的优先级为 100，方向为入站，并设置访问权限为允许（Allow）。描述字段提供了关于规则的说明，这里是 “Allow inbound SSH”。</p><p>执行这个命令后，将会创建一个新的安全规则，允许 SSH 连接到相应的虚拟机。请确保根据你的网络安全需求和实际情况修改命令中的参数。</p><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20231121221817769.png" alt="image-20231121221817769"></p><h3 id="检查是否连接"><a href="#检查是否连接" class="headerlink" title="检查是否连接"></a>检查是否连接</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh azureuser@<span class="variable">$APPSERVERIP</span> -o ConnectTimeout=5</span><br></pre></td></tr></table></figure><p>现在应该可以进行连接。 在 Are you sure you want to continue connecting (yes/no)? 消息后，输入 yes。</p><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20231121221947123.png" alt="image-20231121221947123"></p><h2 id="创建安全规则防止Web访问"><a href="#创建安全规则防止Web访问" class="headerlink" title="创建安全规则防止Web访问"></a>创建安全规则防止Web访问</h2><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20231121215338383.png" alt="image-20231121215338383"></p><p>创建新的入站安全规则来拒绝端口 80 上的 HTTP 访问</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">az network nsg rule create \  <span class="comment"># 创建网络安全组规则的 Azure CLI 命令</span></span><br><span class="line">    --resource-group <span class="variable">$rg</span> \  <span class="comment"># 指定资源组的名称，这里使用 $rg 变量表示资源组名称</span></span><br><span class="line">    --nsg-name ERP-SERVERS-NSG \  <span class="comment"># 指定网络安全组的名称，这里是 ERP-SERVERS-NSG</span></span><br><span class="line">    --name httpRule \  <span class="comment"># 指定新规则的名称，这里是 httpRule</span></span><br><span class="line">    --direction Inbound \  <span class="comment"># 指定规则的方向为入站</span></span><br><span class="line">    --priority 150 \  <span class="comment"># 指定规则的优先级为 150</span></span><br><span class="line">    --source-address-prefixes 10.0.1.4 \  <span class="comment"># 指定源地址前缀为 10.0.1.4</span></span><br><span class="line">    --source-port-ranges <span class="string">&#x27;*&#x27;</span> \  <span class="comment"># 指定源端口范围为任意端口</span></span><br><span class="line">    --destination-address-prefixes 10.0.0.4 \  <span class="comment"># 指定目标地址前缀为 10.0.0.4</span></span><br><span class="line">    --destination-port-ranges 80 \  <span class="comment"># 指定目标端口范围为 80</span></span><br><span class="line">    --access Deny \  <span class="comment"># 指定访问权限为拒绝</span></span><br><span class="line">    --protocol Tcp \  <span class="comment"># 指定协议为 TCP</span></span><br><span class="line">    --description <span class="string">&quot;Deny from DataServer to AppServer on port 80&quot;</span>  <span class="comment"># 指定规则的描述为 &quot;Deny from DataServer to AppServer on port 80&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20231121222017283.png" alt="image-20231121222017283"></p><h2 id="测试虚拟机之间的HTTP连接"><a href="#测试虚拟机之间的HTTP连接" class="headerlink" title="测试虚拟机之间的HTTP连接"></a>测试虚拟机之间的HTTP连接</h2><p>检查新的规则是否生效。 AppServer 应该能通过 HTTP 与 DataServer 进行通信。 DataServer 应无法通过 HTTP 与 AppServer 进行通信。</p><h3 id="APP-Data"><a href="#APP-Data" class="headerlink" title="APP - Data"></a>APP - Data</h3><p>通过 SSH 连接到 AppServer VM，并检查是否可以通过 HTTP 与 DataServer 进行通信。请在 Cloud Shell 中运行以下命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -t azureuser@<span class="variable">$APPSERVERIP</span> <span class="string">&#x27;wget http://10.0.1.4; exit; bash&#x27;</span></span><br></pre></td></tr></table></figure><p>在执行这个命令之前，请确保以下事项：</p><ul><li><code>$APPSERVERIP</code> 变量已经被设置为你的 AppServer VM 的公共 IP 地址。确保该变量已经正确设置。</li><li><code>azureuser</code> 是 AppServer VM 上的用户名。如果你在创建 VM 时使用了不同的用户名，请相应地修改命令中的用户名。</li></ul><p>这个命令将通过 SSH 连接到指定的 AppServer VM，并执行以下操作：</p><ol><li>使用 <code>wget</code> 命令尝试从 DataServer VM 的 IP 地址 <code>10.0.1.4</code> 下载一个文件（这里是默认的 HTTP 请求）。</li><li>执行完 <code>wget</code> 命令后，退出 SSH 连接。</li><li>如果连接成功并且可以通过 HTTP 访问 DataServer VM，那么你将进入本地的 Bash shell。</li></ol><h3 id="Data-APP"><a href="#Data-APP" class="headerlink" title="Data - APP"></a>Data - APP</h3><p>通过 SSH 连接到 DataServer VM，并检查是否可以通过 HTTP 与 AppServer 进行通信。请在 Cloud Shell 中运行以下命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -t azureuser@<span class="variable">$DATASERVERIP</span> <span class="string">&#x27;wget http://10.0.0.4; exit; bash&#x27;</span></span><br></pre></td></tr></table></figure><p>在执行这个命令之前，请确保以下事项：</p><ul><li><code>$DATASERVERIP</code> 变量已经被设置为你的 DataServer VM 的公共 IP 地址。确保该变量已经正确设置。</li><li><code>azureuser</code> 是 DataServer VM 上的用户名。如果你在创建 VM 时使用了不同的用户名，请相应地修改命令中的用户名。</li></ul><p>这个命令将通过 SSH 连接到指定的 DataServer VM，并执行以下操作：</p><ol><li>使用 <code>wget</code> 命令尝试从 AppServer VM 的 IP 地址 <code>10.0.0.4</code> 下载一个文件（这里是默认的 HTTP 请求）。</li><li>执行完 <code>wget</code> 命令后，退出 SSH 连接。</li><li>如果连接成功并且可以通过 HTTP 访问 AppServer VM，那么你将进入本地的 Bash shell。</li><li>因为已阻止端口 80 上的访问，所以此访问应该不会成功。 几分钟后，会收到一条 <code>Connection timed out</code> 消息。 若要在超时之前中止命令，请按 Ctrl+C。</li></ol><h2 id="部署应用安全组"><a href="#部署应用安全组" class="headerlink" title="部署应用安全组"></a>部署应用安全组</h2><p>创建应用安全组 “ERP-DB-SERVERS-ASG”：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">az network asg create \</span><br><span class="line">    --resource-group <span class="variable">$rg</span> \  <span class="comment"># 资源组的名称</span></span><br><span class="line">    --name ERP-DB-SERVERS-ASG  <span class="comment"># 应用安全组的名称</span></span><br></pre></td></tr></table></figure><p>将 DataServer 与应用安全组关联：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">az network nic ip-config update \</span><br><span class="line">    --resource-group <span class="variable">$rg</span> \  <span class="comment"># 资源组的名称</span></span><br><span class="line">    --application-security-groups ERP-DB-SERVERS-ASG  <span class="comment"># 应用安全组的名称</span></span><br><span class="line">    --name ipconfigDataServer  <span class="comment"># NIC 配置的名称</span></span><br><span class="line">    --nic-name DataServerVMNic  <span class="comment"># NIC 的名称</span></span><br><span class="line">    --vnet-name ERP-servers  <span class="comment"># 虚拟网络的名称</span></span><br><span class="line">    --subnet Databases  <span class="comment"># 子网的名称</span></span><br></pre></td></tr></table></figure><p>更新网络安全组中的 HTTP 规则：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">az network nsg rule update \</span><br><span class="line">    --resource-group <span class="variable">$rg</span> \  <span class="comment"># 资源组的名称</span></span><br><span class="line">    --nsg-name ERP-SERVERS-NSG  <span class="comment"># 网络安全组的名称</span></span><br><span class="line">    --name httpRule  <span class="comment"># 规则的名称</span></span><br><span class="line">    --direction Inbound  <span class="comment"># 流量方向为入站</span></span><br><span class="line">    --priority 150  <span class="comment"># 规则的优先级</span></span><br><span class="line">    --source-address-prefixes <span class="string">&quot;&quot;</span>  <span class="comment"># 源地址前缀为空，表示任意源地址</span></span><br><span class="line">    --source-port-ranges <span class="string">&#x27;*&#x27;</span>  <span class="comment"># 源端口范围为任意端口</span></span><br><span class="line">    --source-asgs ERP-DB-SERVERS-ASG  <span class="comment"># 源应用安全组为 &quot;ERP-DB-SERVERS-ASG&quot;</span></span><br><span class="line">    --destination-address-prefixes 10.0.0.4  <span class="comment"># 目标地址前缀为 DataServer 的 IP 地址</span></span><br><span class="line">    --destination-port-ranges 80  <span class="comment"># 目标端口范围为 80</span></span><br><span class="line">    --access Deny  <span class="comment"># 访问权限为拒绝</span></span><br><span class="line">    --protocol Tcp  <span class="comment"># 使用 TCP 协议</span></span><br><span class="line">    --description <span class="string">&quot;Deny from DataServer to AppServer on port 80 using application security group&quot;</span>  <span class="comment"># 规则的描述</span></span><br></pre></td></tr></table></figure><p>第一个命令将创建一个名为 “ERP-DB-SERVERS-ASG” 的应用安全组。<br>第二个命令将关联 DataServer VM 的网络接口配置（NIC）与应用安全组。<br>第三个命令将更新 ERP-SERVERS-NSG 网络安全组中的 HTTP 规则，将源地址设置为空，源端口设置为任意，源应用安全组设置为 “ERP-DB-SERVERS-ASG”，目标地址设置为 DataServer 的 IP 地址（10.0.0.4），目标端口设置为 80，并将访问权限设置为拒绝。</p><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20231121222134518.png" alt="image-20231121222134518"></p><p>应用安全组确认了网络安全组规则能正常运行，并且与使用源 IP 地址时相同。 如果我们添加了其他数据服务器，可以通过将新的服务器添加到 ERP-DB-SERVERS-ASG 来轻松地确保这些服务器具备适当的网络安全。</p>]]></content>
    
    
    <summary type="html">网络堡垒构筑：Azure Cloud Shell中的安全组策略</summary>
    
    
    
    <category term="Cloud" scheme="https://kalyan-zitiu.github.io/categories/Cloud/"/>
    
    <category term="Study Note" scheme="https://kalyan-zitiu.github.io/categories/Cloud/Study-Note/"/>
    
    
    <category term="Cloud" scheme="https://kalyan-zitiu.github.io/tags/Cloud/"/>
    
  </entry>
  
  <entry>
    <title>docker</title>
    <link href="https://kalyan-zitiu.github.io/2023/10/08/docker/"/>
    <id>https://kalyan-zitiu.github.io/2023/10/08/docker/</id>
    <published>2023-10-08T06:00:00.000Z</published>
    <updated>2023-10-08T07:11:31.118Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h2><p>Docker是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器或 Windows 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。</p><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h2><h3 id="2-1-Windows-安装"><a href="#2-1-Windows-安装" class="headerlink" title="2.1 Windows 安装"></a>2.1 Windows 安装</h3><ol><li>访问 Docker 官网下载 Docker Desktop 安装包，然后双击运行安装程序。</li><li>安装完成后，Docker Desktop 会自动运行。验证是否安装成功，可以打开命令行，输入 <code>docker version</code>，如果显示 Docker 版本信息，说明安装成功。</li></ol><h3 id="2-2-Linux-安装"><a href="#2-2-Linux-安装" class="headerlink" title="2.2 Linux 安装"></a>2.2 Linux 安装</h3><ol><li>更新 apt 包索引：<code>sudo apt-get update</code></li><li>安装 Docker：<code>sudo apt-get install docker-ce docker-ce-cli containerd.io</code></li><li>验证是否安装成功：<code>sudo docker run hello-world</code></li></ol><h2 id="3-Docker-架构"><a href="#3-Docker-架构" class="headerlink" title="3. Docker 架构"></a>3. Docker 架构</h2><p>Docker 使用客户端-服务器 (C/S) 架构模式，Docker 客户端与 Docker 服务器进行通信。Docker 客户端和服务端可以运行在同一个系统上，也可以将 Docker 客户端连接到远程 Docker 服务器。Docker 客户端和服务器之间通过 socket 或 RESTful API 进行通信。</p><h3 id="3-1-Docker-镜像"><a href="#3-1-Docker-镜像" class="headerlink" title="3.1 Docker 镜像"></a>3.1 Docker 镜像</h3><p>Docker 镜像是 Docker 容器运行时的只读模板，每一个镜像由一系列的层构成。可以把它想象成面向对象编程中的类。</p><h3 id="3-2-Docker-容器"><a href="#3-2-Docker-容器" class="headerlink" title="3.2 Docker 容器"></a>3.2 Docker 容器</h3><p>容器是镜像的运行实例。可以创建、启动、停止、移动或删除容器。可以把它想象成面向对象编程中的对象。</p><h3 id="3-3-Docker-仓库"><a href="#3-3-Docker-仓库" class="headerlink" title="3.3 Docker 仓库"></a>3.3 Docker 仓库</h3><p>Docker 仓库是集中存放 Docker 镜像文件的场所。有时候会把 Docker 仓库和 Docker Registry 混淆，实际上它们是不同的。Docker Registry 服务用来存放 Docker 镜像，而 Docker 仓库则是用来存放镜像的地方。</p><h2 id="4-Docker-命令"><a href="#4-Docker-命令" class="headerlink" title="4. Docker 命令"></a>4. Docker 命令</h2><p>Docker 提供了丰富的命令行接口 (CLI) 命令，用于操作和管理 Docker。以下是一些常用的 Docker CLI 命令：</p><ul><li><code>docker run</code>：运行一个 Docker 容器</li><li><code>docker start</code>：启动一个或多个已经被停止的 Docker 容器</li><li><code>docker stop</code>：停止一个运行中的 Docker 容器</li><li><code>docker build</code>：使用 Dockerfile 创建 Docker 镜像</li><li><code>docker pull</code>：从 Docker Registry 下载 Docker 镜像</li><li><code>docker push</code>：将 Docker 镜像上传到 Docker Registry</li><li><code>docker rm</code>：删除一个或多个 Docker 容器</li><li><code>docker rmi</code>：删除一个或多个 Docker 镜像</li></ul><h2 id="5-Dockerfile"><a href="#5-Dockerfile" class="headerlink" title="5. Dockerfile"></a>5. Dockerfile</h2><p>Dockerfile 是一个文本文件，包含了一系列的命令，用户可以调用 docker build 命令来创建一个 Docker 镜像。Dockerfile 是自动化 Docker 镜像创建的关键。</p><h3 id="5-1-Dockerfile-指令"><a href="#5-1-Dockerfile-指令" class="headerlink" title="5.1 Dockerfile 指令"></a>5.1 Dockerfile 指令</h3><ul><li><code>FROM</code>：指定基础镜像</li><li><code>RUN</code>：执行命令并创建新的镜像层</li><li><code>CMD</code>：提供容器默认的执行命令</li><li><code>EXPOSE</code>：暴露端口供外部链接使用</li><li><code>WORKDIR</code>：设置工作目录</li><li><code>ENV</code>：设置环境变量</li><li><code>ADD</code>：复制文件/文件夹到容器中</li><li><code>COPY</code>：复制文件到容器中</li><li><code>ENTRYPOINT</code>：配置容器启动后执行的命令</li><li><code>VOLUME</code>：创建挂载点</li></ul><h3 id="5-2-Dockerfile-示例"><a href="#5-2-Dockerfile-示例" class="headerlink" title="5.2 Dockerfile 示例"></a>5.2 Dockerfile 示例</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用官方的 python 3.7 镜像作为基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.7</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置工作目录为 /app</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将当前目录的内容复制到容器中的 /app 目录</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装所有需要的包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install --no-cache-dir -r requirements.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露端口 5000，供外部访问</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">5000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> NAME World</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当容器启动时，运行 app.py</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;python&quot;</span>, <span class="string">&quot;app.py&quot;</span>]</span></span><br></pre></td></tr></table></figure><h2 id="6-Docker-Compose"><a href="#6-Docker-Compose" class="headerlink" title="6. Docker Compose"></a>6. Docker Compose</h2><p>Docker Compose 是 Docker 的一个开源项目，用于定义和管理多个 Docker 容器之间的依赖关系。使用 Docker Compose，用户可以通过一个单独的 docker-compose.yml 模板文件来定义一组相关的应用容器为一个项目。</p><h3 id="6-1-Docker-Compose-示例"><a href="#6-1-Docker-Compose-示例" class="headerlink" title="6.1 Docker Compose 示例"></a>6.1 Docker Compose 示例</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">&quot;5000:5000&quot;</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&quot;redis:alpine&quot;</span></span><br></pre></td></tr></table></figure><p>该 docker-compose.yml 文件定义了两个服务：web 和 redis。web 服务构建在当前目录下的 Dockerfile 文件中定义的 Docker 镜像，并映射容器的 5000 端口到主机的 5000 端口。redis 服务使用 Docker Hub 上的公开的 redis 镜像。</p><h2 id="7-Docker-Swarm"><a href="#7-Docker-Swarm" class="headerlink" title="7. Docker Swarm"></a>7. Docker Swarm</h2><p>Docker Swarm 是 Docker 的原生集群管理和编排工具，它将多个 Docker 主机整合为一个单一的虚拟 Docker 主机。Docker Swarm 提供了集群管理和编排功能，包括创建和管理服务、滚动更新、服务发现和负载均衡等。</p><h2 id="8-Docker-网络"><a href="#8-Docker-网络" class="headerlink" title="8. Docker 网络"></a>8. Docker 网络</h2><p>Docker 网络是 Docker 容器进行通信的基础设施。Docker 提供了多种网络类型，包括 bridge（桥接）、host（主机）、overlay（覆盖）和 macvlan（MAC VLAN）等。</p><h3 id="8-1-Bridge-网络"><a href="#8-1-Bridge-网络" class="headerlink" title="8.1 Bridge 网络"></a>8.1 Bridge 网络</h3><p>Bridge 网络是 Docker 默认的网络模式，当 Docker 进程启动时，会在主机上创建一个名为 docker0 的虚拟网桥，新创建的容器会连接到这个虚拟网桥。</p><h3 id="8-2-Host-网络"><a href="#8-2-Host-网络" class="headerlink" title="8.2 Host 网络"></a>8.2 Host 网络</h3><p>Host 网络模式下，容器共享 Docker 主机的网络命名空间，容器可以直接使用主机的网络。</p><h3 id="8-3-Overlay-网络"><a href="#8-3-Overlay-网络" class="headerlink" title="8.3 Overlay 网络"></a>8.3 Overlay 网络</h3><p>Overlay 网络用于在多个 Docker 宿主机之间创建一个网络，这在实现 Docker Swarm 集群的通信和服务发现时非常有用。</p><h3 id="8-4-Macvlan-网络"><a href="#8-4-Macvlan-网络" class="headerlink" title="8.4 Macvlan 网络"></a>8.4 Macvlan 网络</h3><p>Macvlan 网络允许你给容器分配一个物理网络接口的 MAC 地址，使容器看起来就像是物理网络接口的直接连接，同时也拥有物理网络接口的全部功能。</p><h2 id="9-Docker-存储"><a href="#9-Docker-存储" class="headerlink" title="9. Docker 存储"></a>9. Docker 存储</h2><p>Docker 提供了多种数据持久化和存储的选项，包括数据卷（Volumes）、绑定挂载（Bind mounts）、tmpfs 挂载（tmpfs mounts）。</p><h3 id="9-1-数据卷"><a href="#9-1-数据卷" class="headerlink" title="9.1 数据卷"></a>9.1 数据卷</h3><p>数据卷是 Docker 提供的一种数据持久化方案，数据卷存储在 Docker 主机的 filesystem 中，独立于容器生命周期。</p><h3 id="9-2-绑定挂载"><a href="#9-2-绑定挂载" class="headerlink" title="9.2 绑定挂载"></a>9.2 绑定挂载</h3><p>绑定挂载可以将 Docker 主机的文件或目录挂载到容器中。与数据卷不同，绑定挂载可以对主机系统的任何位置进行访问，而且它支持相对路径。</p><h3 id="9-3-tmpfs-挂载"><a href="#9-3-tmpfs-挂载" class="headerlink" title="9.3 tmpfs 挂载"></a>9.3 tmpfs 挂载</h3><p>tmpfs 挂载将一个 tmpfs 文件系统挂载到容器中的一个目录，当容器停止时，tmpfs 挂载的数据将被删除。</p><h2 id="10-Docker-安全"><a href="#10-Docker-安全" class="headerlink" title="10. Docker 安全"></a>10. Docker 安全</h2><p>Docker 提供了多种安全机制来保护 Docker 主机和 Docker 容器的安全。</p><h3 id="10-1-控制组（Cgroups）"><a href="#10-1-控制组（Cgroups）" class="headerlink" title="10.1 控制组（Cgroups）"></a>10.1 控制组（Cgroups）</h3><p>Docker 使用 Linux 内核的控制组（Cgroups）功能来限制容器的资源使用，包括 CPU、内存、磁盘 I/O 等。</p><h3 id="10-2-命名空间（Namespaces）"><a href="#10-2-命名空间（Namespaces）" class="headerlink" title="10.2 命名空间（Namespaces）"></a>10.2 命名空间（Namespaces）</h3><p>Docker 使用 Linux 内核的命名空间（Namespaces）功能来实现容器的隔离，包括进程隔离（PID）、网络隔离（Network）、用户隔离（User）、文件系统隔离（Mount）等。</p><h3 id="10-3-容器网络隔离"><a href="#10-3-容器网络隔离" class="headerlink" title="10.3 容器网络隔离"></a>10.3 容器网络隔离</h3><p>Docker 默认的网络模式是 bridge，每个 Docker 主机会创建一个名为 docker0 的虚拟网桥，新创建的容器会连接到这个虚拟网桥，从而实现容器网络的隔离。</p><h3 id="10-4-访问控制"><a href="#10-4-访问控制" class="headerlink" title="10.4 访问控制"></a>10.4 访问控制</h3><p>Docker 提供了访问控制功能，可以对 Docker API 的访问进行限制。Docker 使用基于角色的访问控制（RBAC）策略，可以定义不同的用户角色，并分配不同的访问权限。</p><h2 id="11-Docker-与-Kubernetes"><a href="#11-Docker-与-Kubernetes" class="headerlink" title="11. Docker 与 Kubernetes"></a>11. Docker 与 Kubernetes</h2><p>Kubernetes 是一个开源的容器编排平台，提供了容器运行时、容器协调、容器服务发现和负载均衡、网络和存储管理等功能。Docker 和 Kubernetes 都是云原生应用的重要组成部分，它们可以协同工作，提供完整的容器解决方案。</p><h3 id="11-1-Docker-在-Kubernetes-中的角色"><a href="#11-1-Docker-在-Kubernetes-中的角色" class="headerlink" title="11.1 Docker 在 Kubernetes 中的角色"></a>11.1 Docker 在 Kubernetes 中的角色</h3><p>在 Kubernetes 中，Docker 主要扮演的是容器运行时的角色。Kubernetes 使用 Docker 来创建、运行和删除容器。</p><h3 id="11-2-Kubernetes-的优势"><a href="#11-2-Kubernetes-的优势" class="headerlink" title="11.2 Kubernetes 的优势"></a>11.2 Kubernetes 的优势</h3><p>Kubernetes 提供了 Docker 所不具备的容器编排、服务发现和负载均衡、自动扩缩容、自动故障恢复等功能。</p>]]></content>
    
    
    <summary type="html">一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器</summary>
    
    
    
    <category term="Cloud Konwleage" scheme="https://kalyan-zitiu.github.io/categories/Cloud-Konwleage/"/>
    
    <category term="Study Note" scheme="https://kalyan-zitiu.github.io/categories/Cloud-Konwleage/Study-Note/"/>
    
    
    <category term="Basic" scheme="https://kalyan-zitiu.github.io/tags/Basic/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes</title>
    <link href="https://kalyan-zitiu.github.io/2023/10/07/Kubernetes/"/>
    <id>https://kalyan-zitiu.github.io/2023/10/07/Kubernetes/</id>
    <published>2023-10-07T13:00:00.000Z</published>
    <updated>2023-10-08T01:53:36.387Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Kubernetes"><a href="#Kubernetes" class="headerlink" title="Kubernetes"></a>Kubernetes</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="什么是K8s"><a href="#什么是K8s" class="headerlink" title="什么是K8s"></a>什么是K8s</h3><iframe width="956" height="538" src="https://www.youtube.com/embed/ubz3cFgxeJA" title="Kubernetes" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul><li>k8s就是为了大规模管理容器应用的自动化工具而已</li><li>如果你的业务不是以容器方式管理或者数量非常小是没有必要玩k8s</li></ul><h2 id="架构以及核心组件"><a href="#架构以及核心组件" class="headerlink" title="架构以及核心组件"></a>架构以及核心组件</h2><ol><li><p>Master节点：Master节点是集群的控制面，包含以下几个核心组件：</p><ul><li><p>kube-apiserver：它是Kubernetes API的前端，是所有操作和通信的入口点。</p></li><li><p>etcd：这是一个高可用性键值存储系统，用于保存所有集群数据。</p></li><li><p>kube-scheduler：根据资源可用性、策略、约束等因素，调度新创建的Pod到合适的工作节点上。</p></li><li><p>kube-controller-manager：运行了一系列的控制器，如节点控制器、副本控制器、端点控制器等。</p></li><li><p>cloud-controller-manager: 这是一个链接你的集群与云提供商API的桥梁，使得集群能够在云环境中运行。</p></li></ul></li><li><p>Worker节点：Worker节点运行着实际的应用，并由master节点进行管理。它们包括以下组件：</p><ul><li><p>kubelet：负责维护Pods并且与Kubernetes master节点进行交互。</p></li><li><p>kube-proxy：在每个节点上实现了网络规则，以处理集群内部的通信。</p></li><li><p>vContainer Runtime：用于运行容器，如Docker、containerd等。</p></li></ul></li><li><p>Pods：这是Kubernetes的最小部署单元，每个Pod内包含一个或多个紧密相关的容器。</p></li><li><p>Services：定义了访问和通信Pods的方式。Service可以将网络流量路由到正确的Pod。</p></li><li><p>Volumes：提供存储功能，使得数据能够在Pod之间持久化。</p></li><li><p>Namespaces：为集群中的资源和对象提供隔离。</p></li><li><p>Ingress：管理外部访问集群内服务的规则，可实现负载均衡、SSL终止和域名基础的虚拟主机。</p></li><li><p>ConfigMaps and Secrets：允许你将配置信息和敏感数据分离出来，以便安全地传递和使用。</p></li></ol><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p>  在Kubernetes中，用户通过API Server提交一个描述应用程序的YAML或JSON配置文件。Scheduler会根据集群资源使用情况，将应用部署到某个Node上。如果Node发生故障，Controller会自动将应用迁移到其他Node上。</p><h2 id="部署方式"><a href="#部署方式" class="headerlink" title="部署方式"></a>部署方式</h2><h3 id="传统的服务进程管理方式"><a href="#传统的服务进程管理方式" class="headerlink" title="传统的服务进程管理方式"></a>传统的服务进程管理方式</h3><h4 id="手工繁琐-需要大量的自动化工具"><a href="#手工繁琐-需要大量的自动化工具" class="headerlink" title="手工繁琐:需要大量的自动化工具"></a>手工繁琐:需要大量的自动化工具</h4><ol><li><p>Ansible： Ansible 是一种配置管理和自动化工具，可用于编写声明性的配置文件来定义服务器的状态。您可以使用 Ansible 来自动化服务器的设置、软件安装、配置文件管理等操作。</p></li><li><p>Chef： Chef 是一个自动化平台，允许您编写基础设施即代码。您可以使用 Chef 来定义服务器的状态，并在需要时自动配置服务器和部署服务。</p></li><li><p>Puppet： Puppet 是另一个配置管理工具，允许您定义服务器配置的期望状态，并确保服务器始终保持一致。</p></li><li><p>SaltStack： SaltStack 是一个事件驱动的自动化工具，可以用于自动配置和管理服务器，以及执行各种任务。</p></li><li><p>Jenkins： Jenkins 是一个持续集成和持续交付工具，可以用于自动化构建、部署和测试应用程序。您可以将 Jenkins 配置为监视代码仓库，并在代码提交后自动触发部署流程。</p></li><li><p>Docker Compose： 如果您希望使用 Docker 容器来部署传统的服务进程，可以使用 Docker Compose 来定义和管理多个容器的部署。</p></li><li><p>Terraform： 虽然 Terraform 主要用于基础设施即代码，但您可以使用它来自动化创建和管理服务器、网络、存储等资源。</p></li><li><p>Kubernetes Operator： 尽管 Kubernetes 本身是一个容器编排平台，但您可以使用 Kubernetes Operator 来创建自定义控制器，以自动化管理和部署特定类型的应用程序。</p></li></ol><h4 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h4><ol><li><p>准备环境： 在目标虚拟机或物理机上设置所需的操作系统和依赖项。这可能涉及安装操作系统、更新软件包、安装运行时环境（如Java、Node.js等）等。</p></li><li><p>安装服务进程： 将服务进程的执行文件和相关文件传输到目标机器，并将其安装到适当的位置。这可能涉及将二进制文件复制到目标目录，并设置执行权限。</p></li><li><p>配置服务： 编辑服务的配置文件，配置它所需的参数，例如端口号、数据库连接、认证凭据等。这些配置可能会存储在配置文件中，也可能存储在环境变量中。</p></li><li><p>启动服务： 使用特定的命令或脚本启动服务进程。这可以是一个简单的命令，例如 ./my-service，也可能是一系列复杂的操作。</p></li><li><p>监控和日志： 配置监控和日志记录，以便能够监视服务的运行状态和性能，以及收集服务的日志信息。</p></li><li><p>管理和维护： 随着时间的推移，您可能需要执行服务的升级、修复漏洞、处理配置更改等操作。这可能需要定期的维护和管理。</p></li></ol><h3 id="容器应用管理方式"><a href="#容器应用管理方式" class="headerlink" title="容器应用管理方式"></a>容器应用管理方式</h3><ul><li>Pod：Pod是Kubernetes中最小的可部署单元，它可以包含一个或多个容器。Pod提供了一个运行容器的环境，并且这些容器共享网络和存储资源。Pod可以被创建、启动、停止、删除等操作。</li></ul><ul><li>Deployment：Deployment是用来管理Pod的对象。它定义了应用程序的期望状态，Kubernetes会根据定义的副本数来创建和管理Pod。Deployment还支持滚动升级和回滚操作，可以方便地更新应用程序。</li></ul><ul><li>Service：Service是用来暴露应用程序的网络服务的对象。它为一组Pod提供了一个稳定的网络地址，并且可以通过这个地址来访问这些Pod。Service可以提供负载均衡、服务发现和服务代理等功能。</li></ul><ul><li>Ingress：Ingress是用来管理应用程序的入口流量的对象。它可以将外部流量路由到不同的Service，实现基于域名或路径的流量分发。Ingress还支持SSL/TLS终止和基本的身份验证等功能。</li></ul><ul><li>ConfigMap和Secret：ConfigMap用来存储应用程序的配置信息，可以通过环境变量或挂载文件的方式将配置信息传递给容器。Secret用来存储敏感的配置信息，如密码、API密钥等。ConfigMap和Secret可以在应用程序中被引用和使用。</li></ul><ul><li>StatefulSet：StatefulSet用来管理有状态应用程序的对象。它可以确保每个Pod有唯一的标识和稳定的网络身份，这对于需要持久化存储和有序部署的应用程序非常重要。</li></ul><h2 id="服务发现与负载均衡"><a href="#服务发现与负载均衡" class="headerlink" title="服务发现与负载均衡"></a>服务发现与负载均衡</h2><p>服务发现和负载均衡是通过 Service 和 Ingress 对象来实现的。</p><ol><li>Service：<br> Service 是 Kubernetes 的核心概念之一，它为一组运行相同任务的 Pod 提供了一个统一的访问接口。当 Service 创建后，Kubernetes 会自动为其分配一个 IP 地址（称为 ClusterIP），并且在整个集群内部都可以使用这个 IP 地址进行访问。</li></ol><p>  当请求到达 Service 后，Kubernetes 会根据预设的策略将请求转发给后端的 Pod。这种策略通常是轮询（Round Robin）或者是基于 Session 的粘性 Session Affinity，也可以配置更复杂的网络策略。这就完成了负载均衡的功能。</p><p>  Service 还有一个重要的特性，那就是它可以做到服务发现。每个 Service 在创建时，除了会被分配一个 ClusterIP 外，还会在 Kubernetes 集群的内部 DNS 中创建一个记录。这样其他的 Pod 就可以通过 Service 的名字来找到它，而不需要知道具体的 IP 地址。</p><ol start="2"><li>Ingress：<br> 虽然 Service 可以提供内部的服务发现和负载均衡，但是如果我们希望从集群外部访问某个服务，就需要用到 Ingress。Ingress 是 Kubernetes 的一个对象，它定义了如何通过 HTTP 或 HTTPS 协议从集群外部访问内部的 Service。</li></ol><p>  当一个请求到达 Ingress 后，Ingress Controller 会根据预定义的规则将请求路由（Route）到相应的 Service。这样我们就可以用一个统一的入口来访问集群内部的多个服务，而不需要为每个服务都暴露一个端口出来。</p><p>  另外，Ingress 还可以提供其他的功能，比如 SSL/TLS 终止、基于路径或者域名的路由，甚至是负载均衡和重试等。</p><h2 id="存储管理"><a href="#存储管理" class="headerlink" title="存储管理"></a>存储管理</h2><p>Kubernetes支持多种存储解决方案，包括本地存储、网络存储（如NFS、iSCSI、GlusterFS等）以及云存储（如AWS EBS、GCE PD等）。同时，Kubernetes还提供了Persistent Volume (PV) 和 Persistent Volume Claim (PVC) 的抽象概念，使得用户可以在不了解具体存储技术的情况下，也能使用持久化存储。</p><h3 id="本地存储："><a href="#本地存储：" class="headerlink" title="本地存储："></a>本地存储：</h3><p>  这是最简单的存储方式，即在Pod所在的节点上直接分配磁盘空间。但它的生命周期与Pod相同，当Pod被删除时，数据也会丢失。而且，如果Pod迁移到其他节点，数据将无法访问。因此，本地存储主要用于临时性的、不需要长期保存的数据。</p><h3 id="网络存储："><a href="#网络存储：" class="headerlink" title="网络存储："></a>网络存储：</h3><p>  为了解决本地存储的限制，我们可以使用网络存储。网络存储就是通过网络协议，将远程服务器上的存储资源连接到本地，使其看起来像是本地的磁盘。常见的网络存储协议包括NFS（Network File System）、iSCSI (Internet Small Computer Systems Interface) 和 GlusterFS等。这些网络存储解决方案提供了跨节点的、可共享的、持久性的存储。</p><h3 id="云存储："><a href="#云存储：" class="headerlink" title="云存储："></a>云存储：</h3><p>  对于在公有云平台上运行的Kubernetes集群，通常会使用云存储服务，如AWS的EBS (Elastic Block Store) 或者GCE的PD (Persistent Disk)。这些云存储服务通常提供了高可用、高性能和自动备份等高级功能。</p><h4 id="EBS"><a href="#EBS" class="headerlink" title="EBS"></a>EBS</h4><ul><li>是 Amazon Web Services 的一项服务，提供持久化、高性能、块级存储，可以与 AWS 的 EC2 实例一起使用。你可以创建一个 EBS 卷并将其附加到 EC2 实例上。然后，你可以像使用物理硬盘驱动器一样使用这个卷，包括文件系统、数据库或者应用程序等。EBS 提供了几种类型的卷，以满足不同的需求，例如：通用 SSD（gp2）、预配置 IOPS SSD（io1/io2）、吞吐优化 HDD（st1）、冷 HDD（sc1）和磁性（标准）。</li></ul><h4 id="PD"><a href="#PD" class="headerlink" title="PD"></a>PD</h4><p>Google Cloud Platform 的一项服务，为 Google Compute Engine 和 Google Kubernetes Engine 提供持久化、高性能的块存储。你可以创建一个 PD 卷并将其附加到 GCE 或 GKE 上的虚拟机实例。PD 提供了两种类型的卷：标准硬盘（HDD）和 SSD。SSD 可以分为常规 SSD 和高性能 Provisioned IOPS SSD。</p><h3 id="Persistent-Volume-PV-："><a href="#Persistent-Volume-PV-：" class="headerlink" title="Persistent Volume (PV)："></a>Persistent Volume (PV)：</h3><p>  Kubernetes引入了PV和PVC的概念，以解决存储的生命周期管理问题。PV是集群中的一块独立的存储空间，它与Pod的生命周期独立，即使Pod被删除，PV中的数据也不会丢失。管理员可以预先创建多个PV，并指定其大小、访问模式（只读、读写）等属性。</p><h3 id="Persistent-Volume-Claim-PVC-："><a href="#Persistent-Volume-Claim-PVC-：" class="headerlink" title="Persistent Volume Claim (PVC)："></a>Persistent Volume Claim (PVC)：</h3><p>  用户如果需要使用PV，必须通过创建一个PVC来申请。在PVC中，用户可以指定所需的存储空间大小、访问模式等信息。然后Kubernetes会自动匹配合适的PV给用户。当不再需要这个存储空间时，用户可以删除PVC，对应的PV会被释放，但数据不会丢失，除非管理员显式地删除PV。</p><h2 id="日志和监控"><a href="#日志和监控" class="headerlink" title="日志和监控"></a>日志和监控</h2><ol><li>日志：Kubernetes本身不提供一个原生的日志聚合解决方案，但是它允许使用各种通用的日志聚合工具。例如：</li></ol><p>Fluentd：一款开源数据收集器，可以整合各种类型的数据源，并将数据发送到多种类型的目标系统。</p><p>Logstash：这是Elastic Stack（ELK Stack）中的一部分，用于接收、处理和转发事件和日志消息。</p><p>Stackdriver Logging：Google Cloud Platform上的日志管理服务，也可以用于Kubernetes。</p><ol start="2"><li>监控：Kubernetes有内建的资源利用率和性能指标，比如CPU和内存使用情况。你可以使用以下工具来可视化这些数据：</li></ol><p>Prometheus：开源的监控和警告工具，与Kubernetes紧密集成，可以收集各种指标并提供强大的查询语言。</p><p>Grafana：开源的度量分析和可视化套件，经常与Prometheus一起使用，以图形方式展示Prometheus收集的数据。</p><p>Google Cloud Monitoring：Google Cloud Platform的服务，提供了完全托管的端到端IT运营管理平台，包括监控、日志管理和应用程序性能管理。</p><h2 id="Kubernetes与其他技术集成"><a href="#Kubernetes与其他技术集成" class="headerlink" title="Kubernetes与其他技术集成"></a>Kubernetes与其他技术集成</h2><ol><li>云服务提供商：Kubernetes 可以运行在各种环境中，包括公有云、私有云和混合云。AWS、Google Cloud 和 Azure 都提供了 Kubernetes 服务，如 Amazon EKS、Google GKE 和 Azure AKS。</li></ol><ol start="2"><li>CI/CD 工具：持续集成和持续部署（CI/CD）是现代 DevOps 实践的核心组成部分。Jenkins、GitLab CI、CircleCI 等工具都可以与 Kubernetes 集成，以自动化构建、测试和部署流程。</li></ol><ol start="3"><li>服务网格：服务网格用于控制服务间的通信。Istio 和 Linkerd 是两个常见的服务网格，它们可以与 Kubernetes 集成，提供高级路由、负载均衡、故障注入等功能。</li></ol><ol start="4"><li>配置管理：Helm 是 Kubernetes 的一个包管理器，类似于 Linux 中的 apt 或 yum。你可以使用 Helm 来打包、发布和管理 Kubernetes 应用。</li></ol><ol start="5"><li>安全性和策略执法：Open Policy Agent (OPA) 是一个轻量级的、通用的策略引擎，可以与 Kubernetes 集成，用于策略执法。</li></ol><ol start="6"><li>存储系统：Kubernetes 可以与各种存储系统集成，包括云存储服务（如 AWS EBS 和 Google Cloud Storage）、分布式文件系统（如 Ceph 和 GlusterFS）和数据库系统（如 MySQL 和 PostgreSQL）。</li></ol>]]></content>
    
    
    <summary type="html">一个开源的容器编排系统，用于自动化应用程序容器的部署、扩展和管理</summary>
    
    
    
    <category term="Cloud Konwleage" scheme="https://kalyan-zitiu.github.io/categories/Cloud-Konwleage/"/>
    
    <category term="Study Note" scheme="https://kalyan-zitiu.github.io/categories/Cloud-Konwleage/Study-Note/"/>
    
    
    <category term="Basic" scheme="https://kalyan-zitiu.github.io/tags/Basic/"/>
    
  </entry>
  
  <entry>
    <title>OS</title>
    <link href="https://kalyan-zitiu.github.io/2023/10/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <id>https://kalyan-zitiu.github.io/2023/10/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</id>
    <published>2023-10-05T06:00:00.000Z</published>
    <updated>2023-10-07T06:20:06.830Z</updated>
    
    <content type="html"><![CDATA[<h1 id="计算机操作系统"><a href="#计算机操作系统" class="headerlink" title="计算机操作系统"></a>计算机操作系统</h1><h2 id="第一部分：操作系统概述"><a href="#第一部分：操作系统概述" class="headerlink" title="第一部分：操作系统概述"></a>第一部分：操作系统概述</h2><h3 id="1-1-什么是操作系统"><a href="#1-1-什么是操作系统" class="headerlink" title="1.1 什么是操作系统"></a>1.1 什么是操作系统</h3><p>  是管理计算机硬件与软件资源的程序，是计算机系统中最基本的系统软件。操作系统需要处理管理与配置内存，决定系统资源供需的优先级，控制输入设备与输出设备，操作网络和管理文件系统等基本事务。</p><p><strong>注意：</strong>执行一个程序前需要将该程序放到内存中，才能被CPU处理。</p><h4 id="层次架构"><a href="#层次架构" class="headerlink" title="层次架构"></a>层次架构</h4><ul><li>硬件之上</li><li>应用程序之下</li></ul><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20231001154949996.png" alt="image-20231001154949996"></p><ol><li>Linux,windows,Android界面属于外壳（shell）而不是内核（kernel），内核在外壳之下</li></ol><h4 id="kernel内部组件"><a href="#kernel内部组件" class="headerlink" title="kernel内部组件"></a>kernel内部组件</h4><ul><li>CPU调度器</li><li>物理内存管理</li><li>虚拟内存管理</li><li>文件系统管理</li><li>中断处理与设备驱动</li></ul><h3 id="1-2操作系统的类型和结构"><a href="#1-2操作系统的类型和结构" class="headerlink" title="1.2操作系统的类型和结构"></a>1.2操作系统的类型和结构</h3><h4 id="命令接口"><a href="#命令接口" class="headerlink" title="命令接口"></a>命令接口</h4><ul><li><p>联机命令接口（Online Command Interface）：这种接口需要用户在命令执行过程中实时交互。例如，当一个程序运行时，它可能需要用户输入数据或选择选项。这种接口通常用于交互式应用程序，如文本编辑器或电子邮件客户端。在这种接口中，用户和计算机之间的交互是实时的，即用户的每个操作都会立即得到计算机的反馈。</p></li><li><p>脱机命令接口（Offline Command Interface）：这种接口允许用户在没有实时交互的情况下执行命令。用户可以预先设置一系列的命令，然后让计算机在适当的时间执行。这种接口通常用于批处理任务，如数据分析或报告生成。在这种接口中，用户和计算机之间的交互不是实时的，用户可以在任何时间设置命令，然后离开，等待计算机完成任务。</p></li></ul><h4 id="操作系统的类型"><a href="#操作系统的类型" class="headerlink" title="操作系统的类型"></a>操作系统的类型</h4><ol><li>批处理操作系统：这种类型的操作系统不与用户交互。所有需要执行的命令都被组织在批处理中，然后作为一个作业提交给系统。</li><li>多任务/多进程操作系统：也叫分时操作系统,这种类型的操作系统允许多个任务或进程同时运行。如Unix操作系统</li><li>多用户操作系统：这种类型的操作系统允许多个用户同时使用一个系统。</li><li>实时操作系统：这种类型的操作系统被设计用于实时应用程序，这些应用程序需要对事件的响应非常迅速。</li><li>分布式操作系统：这种类型的操作系统将多台机器的资源整合在一起，对用户来说就像一台机器一样。</li><li>嵌入式操作系统：这种类型的操作系统主要用于嵌入式系统，如家用电器、汽车等。</li></ol><h4 id="操作系统的基本结构"><a href="#操作系统的基本结构" class="headerlink" title="操作系统的基本结构"></a>操作系统的基本结构</h4><ol><li>单体结构：所有操作系统功能都被组织在一起并运行在同一地址空间。</li><li>分层结构：操作系统被划分为不同的层次，每一层都建立在其下一层的基础上。</li><li>微内核结构：只有最基本的系统功能（如进程调度、内存管理等）运行在内核空间，其他服务则运行在用户空间。</li><li>客户-服务器模型：这种结构将操作系统服务视为服务器，应用程序视为客户。客户通过向服务器发送请求来使用服务。</li><li>虚拟机：这是一种特殊的操作系统结构，它通过虚拟化技术模拟出一台或多台“虚拟”计算机，每台虚拟计算机都可以运行一个完整的操作系统。</li></ol><h3 id="1-3操作系统的四大特征"><a href="#1-3操作系统的四大特征" class="headerlink" title="1.3操作系统的四大特征"></a>1.3操作系统的四大特征</h3><h4 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h4><ol><li><p>两个或多个事件在同一事件间隔内发生，这件事是在宏观上同时发生的，但微观上交替发生。</p></li><li><p>与并发不同的并行是指两个或多个事件在同一时刻同时发生。</p></li></ol><h5 id="操作系统的并发性"><a href="#操作系统的并发性" class="headerlink" title="操作系统的并发性"></a>操作系统的并发性</h5><p>操作系统就是伴随着“多道程序技术”而出现的。因此操作系统和程序并发是一起诞生的。</p><p><strong>注意：</strong></p><ol><li>单核CPU同一时刻只能执行一个程序，各个程序只能并发执行。</li><li>多核CPU同一时刻可以同时执行多个程序，多个程序可以并行执行。</li></ol><h4 id="共享"><a href="#共享" class="headerlink" title="共享"></a>共享</h4><p>共享即资源共享，是指系统中的资源可供内存中多个并发执行的进程共同使用。</p><h5 id="互斥共享方式"><a href="#互斥共享方式" class="headerlink" title="互斥共享方式"></a>互斥共享方式</h5><p>在任意时刻，只允许一个进程访问资源，当一个进程正在访问某个资源时，其他需要访问资源的进程必须要等待。</p><h5 id="“同时”共享方式"><a href="#“同时”共享方式" class="headerlink" title="“同时”共享方式"></a>“同时”共享方式</h5><p>允许同一时刻，多个进程同时访问同一资源。能够被多个进程同时使用。</p><h5 id="并发和共享的关系。"><a href="#并发和共享的关系。" class="headerlink" title="并发和共享的关系。"></a>并发和共享的关系。</h5><p>  并发和共享的关系是相辅相成的，二者在操作系统中是密不可分的。并发运行的多个程序共享同一套系统资源，比如CPU时间、内存空间、文件系统和输入输出设备等。因此，共享是并发存在的基础。反过来，如果没有并发，也就没有资源共享的必要性。</p><h4 id="虚拟"><a href="#虚拟" class="headerlink" title="虚拟"></a>虚拟</h4><ol><li>是用多道程序设计技术。</li><li>操作系统将物理资源抽象为虚拟资源，如虚拟内存，虚拟处理器和虚拟设备等。虚拟性使得多个程序可以独立运行，它们实际上是共享同一组物理资源得虚拟实例。虚拟性提供了更好的资源管理和隔离性能。提高了系统的可靠性和安全性。</li></ol><h4 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h4><ol><li>任务的执行不需要等待前一个任务的完成才能执行下一个任务的能力。在异步操作中，任务可以并行执行或按照优先级进行调度，不依赖其他任务的完成状态。</li><li>程序的执行不是一贯到底，而是走停交接，推进的速度是不可预知的。</li><li>只要运行环境相同，OS需要保证程序运行的结果也要相同。</li></ol><h2 id="操作系统的启动"><a href="#操作系统的启动" class="headerlink" title="操作系统的启动"></a>操作系统的启动</h2><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><ul><li>DISK：存放OS，一开始是放在硬盘上，并没有在cpu上</li><li>BIOS：基本的IO处理系统，检测外设</li><li>Bootloader：加载OS，把硬盘中的OS放在CPU上</li><li><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20231001180454793.png" alt="image-20231001180454793"></li></ul><h4 id="基本过程"><a href="#基本过程" class="headerlink" title="基本过程"></a>基本过程</h4><ol><li>加电自检（Power-On Self-Test，POST）：计算机开机后，会进行一系列的硬件自检，包括检查内存、显示适配器、硬盘驱动器等。如果自检过程中发现硬件故障，计算机可能会发出警报或显示错误信息。</li></ol><ol start="2"><li>BIOS/UEFI 初始化：自检完成后，计算机会加载并执行基本输入/输出系统（Basic Input/Output System，BIOS）或统一固件接口（Unified Extensible Firmware Interface，UEFI）。BIOS/UEFI负责初始化硬件设备，包括检测和配置内存、硬盘驱动器、键盘、鼠标等。</li></ol><ol start="3"><li>引导加载程序（Boot Loader）：BIOS/UEFI会在启动设备（通常是硬盘驱动器）上查找引导加载程序。引导加载程序是一个小型的程序，负责加载操作系统的核心组件。</li></ol><ol start="4"><li>操作系统内核加载：引导加载程序会加载操作系统内核到计算机的内存中。内核是操作系统的核心部分，负责管理计算机的资源和提供各种系统服务。</li></ol><ol start="5"><li>初始化和配置：操作系统内核加载后，会进行初始化和配置过程。这包括初始化设备驱动程序、建立系统数据结构、加载配置文件等。</li></ol><ol start="6"><li>用户登录：一旦操作系统初始化完成，计算机会显示登录界面，用户可以输入用户名和密码进行登录。</li></ol><ol start="7"><li>桌面环境加载：用户登录后，操作系统会加载桌面环境，例如Windows的资源管理器或Linux的图形用户界面（Graphical User Interface，GUI）。桌面环境提供了用户与计算机交互的图形界面。</li></ol><h3 id="中断，异常和系统调用"><a href="#中断，异常和系统调用" class="headerlink" title="中断，异常和系统调用"></a>中断，异常和系统调用</h3><h4 id="中断（来源于外设-异步处理）"><a href="#中断（来源于外设-异步处理）" class="headerlink" title="中断（来源于外设/异步处理）"></a>中断（来源于外设/异步处理）</h4><ul><li> 来自不同的硬件设备的计时器和网络的中断。</li><li> 操作系统回中断当前正在执行的程序，保存当前状态，并跳转道中断处理程序处理该事件。</li><li> 允许操作系统对外部事件做出及时响应</li><li> 持续,对用户程序是透明的.<h5 id="及时响应"><a href="#及时响应" class="headerlink" title="及时响应"></a>及时响应</h5></li><li>合理的时间内对外部事件做出快速的反应和处理.</li><li>意味着操作系统能够迅速中断当前程序,并跳转道相应的中断处理程序来处理事件.</li></ul><h4 id="系统调用（来源于应用程序-异步或同步处理）"><a href="#系统调用（来源于应用程序-异步或同步处理）" class="headerlink" title="系统调用（来源于应用程序/异步或同步处理）"></a>系统调用（来源于应用程序/异步或同步处理）</h4><ul><li>应用程序主动向操作系统发出服务请求</li><li>等待和持续</li></ul><h4 id="异常（来源于不良的应用程序-同步处理）"><a href="#异常（来源于不良的应用程序-同步处理）" class="headerlink" title="异常（来源于不良的应用程序/同步处理）"></a>异常（来源于不良的应用程序/同步处理）</h4><ul><li>执行程序中出现错误或异常的情况,例如除零错误,无效指令或内存访问错误.</li><li>杀死或重新执行意想不到的应用程序指令</li></ul><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><h3 id="2-1-进程的概念"><a href="#2-1-进程的概念" class="headerlink" title="2.1 进程的概念"></a>2.1 进程的概念</h3><ul><li>进程是操作系统就进行资源分配和调度的基本单位,是由程序,数据以及进程控制块三部分组成.</li><li>每个进程都有自己独立的空间地址,无法访问其他进程的内存,它们之间的信息交换需要通过操作系统提供的机制进行<h3 id="2-2-进程的生命周期"><a href="#2-2-进程的生命周期" class="headerlink" title="2.2 进程的生命周期"></a>2.2 进程的生命周期</h3>进程的生命周期由以下五个状态组成：</li><li>新建：进程刚被创建，但还未被调度到运行的状态。</li><li>就绪：进程已经准备好运行，正在等待系统分配资源。</li><li>运行：进程正在CPU上执行。</li><li>等待（阻塞）：进程因为某些事件（比如I/O操作）而暂停执行。</li><li>结束：进程已经完成执行。</li></ul><h4 id="进程状态"><a href="#进程状态" class="headerlink" title="进程状态"></a>进程状态</h4><p>除了上面的五大基本状态外还会存在一些特殊的状态:</p><ol><li><p><strong>僵尸（Zombie）状态</strong>：当一个进程完成执行（终止）后，它需要将退出状态返回给父进程。如果父进程还没有请求这个状态信息，那么终止的进程就会进入僵尸状态。僵尸进程不再执行任何操作，但仍然在进程表中占据一个位置，直到父进程获取了其状态信息。例如，如果你在Linux终端中运行一个程序并且这个程序已经结束，但是你没有关闭终端，那么这个程序就是一个僵尸进程。</p></li><li><p><strong>孤儿（Orphan）状态</strong>：如果一个进程的父进程在它之前结束，那么这个进程就会变成孤儿进程。孤儿进程将被init进程（在Unix和Linux系统中，init是一个始终运行的进程，它是所有其他进程的祖先）接管，init会周期性地收集这些孤儿进程的状态信息，防止它们变成僵尸进程。例如，如果你在Linux终端中运行一个后台程序（使用&amp;运行），然后关闭终端，那么这个程序就会成为孤儿进程。</p></li><li><p><strong>阻塞（Blocked）状态</strong>：进程因为等待某个事件（如I/O操作）完成而无法继续运行，即使CPU是空闲的，这个进程也不会被调度到CPU上运行，直到所等待的事件完成。例如，如果一个进程正在读取一个非常大的文件，而这个文件的读取需要一些时间，那么在这个时间内，进程就会处于阻塞状态。</p></li><li><p><strong>后台（Background）状态</strong>：后台进程是在后台运行的进程，它们在命令行界面中被启动并放在后台运行，不会影响用户在前台的操作。例如，如果你在Linux终端中使用&amp;运行一个程序，那么这个程序就会在后台运行。</p></li><li><p><strong>睡眠（Sleeping）状态</strong>：进程正在等待某个条件变为真，例如等待时间、等待某个信号、等待资源可用等。在睡眠状态的进程不会占用CPU资源。例如，如果一个进程正在等待用户的输入，那么在用户输入之前，这个进程就会处于睡眠状态。</p></li><li><p><strong>停止（Stopped）状态</strong>：进程由于收到信号而被停止，例如用户可以发送SIGSTOP信号来停止一个进程。停止的进程可以通过SIGCONT信号来恢复执行。例如，如果你在Linux终端中运行一个程序，并且使用Ctrl+Z暂停它，那么这个程序就会进入停止状态。</p></li></ol><h3 id="2-3-进程调度"><a href="#2-3-进程调度" class="headerlink" title="2.3 进程调度"></a>2.3 进程调度</h3><p>进程调度是操作系统的重要功能之一，它决定了哪个进程可以获得CPU的使用权，以及可以使用多长时间。这通常由操作系统的调度策略决定，比如先来先服务（FCFS）、短作业优先（SJF）、优先级调度、时间片轮转（RR）等。</p><h4 id="先来先服务（FCFS）"><a href="#先来先服务（FCFS）" class="headerlink" title="先来先服务（FCFS）"></a>先来先服务（FCFS）</h4><p>进程按照它们到达的顺序进行调度。例如，打印作业通常使用FCFS调度，因为我们希望打印任务按照提交的顺序完成。</p><h4 id="短作业优先（SJF）"><a href="#短作业优先（SJF）" class="headerlink" title="短作业优先（SJF）"></a>短作业优先（SJF）</h4><p>选择最短的作业（进程）首先执行。例如，在批处理系统中，我们可能希望最短的作业先完成，以便快速释放系统资源。</p><h4 id="优先级调度"><a href="#优先级调度" class="headerlink" title="优先级调度"></a>优先级调度</h4><p>每个进程都有一个优先级，优先级高的进程先执行。例如，在实时系统中，我们可能需要某些关键任务（如飞机的飞行控制）具有高于其他任务的优先级。</p><h4 id="时间片轮转（RR）"><a href="#时间片轮转（RR）" class="headerlink" title="时间片轮转（RR）"></a>时间片轮转（RR）</h4><p>进程被赋予一个固定的时间片（或称为时间量）。当一个进程的时间片用完时，操作系统就会剥夺该进程的CPU，将其转移到就绪队列的末尾，然后将CPU分配给下一个进程。这种调度算法常用于交互式系统，例如，多用户系统中，为了让每个用户都有公平的CPU使用时间，通常使用时间片轮转调度算法。</p><h3 id="2-4-多进程和多线程"><a href="#2-4-多进程和多线程" class="headerlink" title="2.4 多进程和多线程"></a>2.4 多进程和多线程</h3><p>多进程和多线程是操作系统中两种重要的并发执行技术。它们都可以提高系统的性能和响应时间，但是它们的实现方式和使用场景有所不同。</p><ol><li>多进程：</li></ol><p>进程是操作系统进行资源分配和调度的基本单位，是一个具有一定独立功能的程序关于某个数据集合的一次运行活动。多进程意味着有多个进程同时运行。每个进程都有自己的独立地址空间，进程之间的通信需要使用进程间通信（IPC）机制，如管道、消息队列、共享内存等。</p><p>优点：每个进程有自己的独立地址空间，一个进程崩溃不会影响其他进程，安全性和稳定性较高。</p><p>缺点：进程的创建和销毁以及进程切换的开销较大，进程间通信复杂。</p><ol start="2"><li>多线程：</li></ol><p>线程是进程中的执行单元，是CPU调度和分派的基本单位。一个进程可以包含多个线程，它们共享进程的地址空间和资源，线程之间的通信比进程间通信更简单。</p><p>优点：线程的创建和销毁以及线程切换的开销小于进程，线程间通信简单。</p><p>缺点：因为线程共享进程的地址空间和资源，一个线程崩溃可能会影响整个进程，安全性和稳定性较低。</p><p>在实际应用中，多进程通常用于CPU密集型任务，如科学计算、图像处理等，而多线程通常用于IO密集型任务，如网络服务、图形界面等。</p><h4 id="进程间通信（IPC）机制"><a href="#进程间通信（IPC）机制" class="headerlink" title="进程间通信（IPC）机制"></a>进程间通信（IPC）机制</h4><ol><li><p>管道（Pipe）：管道是最早的IPC机制之一，它允许一个进程向另一个进程传递数据。管道通常遵循“先进先出”（FIFO）原则，数据从管道的一端进入，从另一端出来。</p></li><li><p>消息队列（Message Queue）：消息队列允许一个或多个进程向队列中添加消息，其他进程可以从队列中读取或删除消息。消息队列是一种比管道更灵活的IPC机制，因为它允许多个进程同时读写消息。</p></li></ol><ol start="3"><li>信号（Signal）：信号是一种用于通知进程某个事件已经发生的IPC机制。当一个进程收到一个信号时，它可以选择忽略这个信号、捕获并处理这个信号，或者按照默认的方式处理这个信号。</li></ol><ol start="4"><li>共享内存（Shared Memory）：共享内存允许多个进程访问同一块内存区域。这是一种非常高效的IPC机制，因为进程可以直接读写这块内存，而无需通过操作系统进行数据传输。但是，使用共享内存需要解决数据访问的同步问题，以防止多个进程同时修改同一块内存。</li></ol><ol start="5"><li>套接字（Socket）：套接字是一种网络通信的IPC机制，它允许运行在不同机器上的进程进行通信。套接字可以支持TCP/IP、UDP等多种网络协议。</li></ol><ol start="6"><li>信号量（Semaphore）：信号量主要用于解决多进程同步问题，它是一个整数值，可以用于控制对共享资源的访问。</li></ol><h3 id="2-5-线程的概念和实现"><a href="#2-5-线程的概念和实现" class="headerlink" title="2.5 线程的概念和实现"></a>2.5 线程的概念和实现</h3><p>线程是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。每个线程都有自己的一组CPU寄存器（如程序计数器，堆栈指针，累加器等），以及自己的堆栈空间，用于保存运行中的临时数据。但线程并不拥有系统资源，它与其它线程共享所属进程的资源。线程的实现主要有两种方式：用户级线程和内核级线程。</p><h4 id="用户级线程和内核级线程"><a href="#用户级线程和内核级线程" class="headerlink" title="用户级线程和内核级线程"></a>用户级线程和内核级线程</h4><p>用户级线程和内核级线程是两种不同的线程实现方式，它们的主要区别在于管理线程的实体不同，以及对操作系统可见性的不同。</p><ol><li><p>用户级线程（User-Level Threads）：</p><p>用户级线程是完全在用户级别运行的线程，也就是说线程的创建、调度和管理都是由用户程序自行完成的，操作系统对其一无所知。这种方式的优点是线程切换开销小，不需要进行系统调用，同时可以定制化线程调度算法。但是，缺点是如果一个线程开始进行阻塞操作，那么整个进程（包括其中的所有线程）都会被阻塞，因为操作系统只能看到进程级别的阻塞。另外，由于操作系统对用户级线程不可见，因此不能利用多处理器并行处理。</p></li><li><p>内核级线程（Kernel-Level Threads）：</p><p>内核级线程是由操作系统内核进行管理的线程。线程的创建、调度和管理都是由操作系统内核完成。这种方式的优点是，由于线程对操作系统可见，因此一个线程进行阻塞操作时，不会影响到同一进程中的其他线程，同时可以利用多处理器进行并行处理。但是，缺点是线程切换需要进行系统调用，开销比用户级线程大。</p></li></ol><h2 id="并发与同步"><a href="#并发与同步" class="headerlink" title="并发与同步"></a>并发与同步</h2><h3 id="3-1-并发性的概念"><a href="#3-1-并发性的概念" class="headerlink" title="3.1 并发性的概念"></a>3.1 并发性的概念</h3><p>并发性是指两个或多个事件在同一时间间隔内发生。在计算机科学中，这通常指的是能够让多个任务在一段时间内同时运行的能力。并发并不意味着这些事件必须在同一时刻发生，实际上，在多核处理器中，这可能会发生，但在单核处理器中，这些事件是交替发生的。</p><h3 id="3-2-临界区和互斥"><a href="#3-2-临界区和互斥" class="headerlink" title="3.2 临界区和互斥"></a>3.2 临界区和互斥</h3><p>临界区是一个代码区域，其中包含访问共享资源的代码，这些资源在任何时候只能被一个线程使用。为了避免资源的冲突访问，必须确保在同一时间只有一个线程能够执行临界区的代码，这就需要使用互斥机制。</p><p>互斥是一种保护共享资源不被多个线程同时访问的方法。实现互斥的一种常见方法是使用锁，一个线程在访问资源时会锁定它，阻止其他线程访问，当它完成后会解锁，允许其他线程访问。</p><h3 id="3-3-死锁的概念和处理"><a href="#3-3-死锁的概念和处理" class="headerlink" title="3.3 死锁的概念和处理"></a>3.3 死锁的概念和处理</h3><p>死锁是指两个或多个进程在执行过程中，因争夺资源而造成的一种僵局（即阻塞状态），若无外力作用，它们都将无法推进下去。</p><h4 id="死锁的处理方式"><a href="#死锁的处理方式" class="headerlink" title="死锁的处理方式"></a>死锁的处理方式</h4><ol><li><p>预防死锁：这是最直接的方式，通过确保系统在分配资源时不满足死锁的4个必要条件（互斥、占有并等待、不可抢占、循环等待）中的一个或多个，从而预防死锁的发生。例如，只允许进程在没有占有任何资源的情况下请求资源，或者只允许进程一次性请求所有需要的资源。</p></li><li><p>避免死锁：在资源分配时采用某种算法进行动态检测，例如银行家算法，通过预测分配资源后系统的状态，如果可能导致死锁，则不分配。</p></li><li><p>检测死锁：定期检查系统资源分配状态，如果发现死锁，则进行处理。这种方法需要系统维护一个资源分配图，并定期进行检查。</p></li><li><p>解除死锁：当检测到死锁后，采取一些措施来解除死锁，例如撤销进程、剥夺资源、进程回滚等。</p></li></ol><p>实践中，处理死锁的方法需要根据系统的具体需求和资源管理策略来选择。有些系统可能会选择预防或避免死锁，而有些系统可能会选择允许死锁的发生，但会设定一定的机制来检测和解除死锁。</p><h3 id="3-4-同步机制"><a href="#3-4-同步机制" class="headerlink" title="3.4 同步机制"></a>3.4 同步机制</h3><p>同步是指在多个进程（或线程）中，为了保证这些进程（或线程）之间能有序地访问某些共享资源或完成某些特定任务，需要它们之间进行某种协调或通信。</p><h4 id="信号量（Semaphore）"><a href="#信号量（Semaphore）" class="headerlink" title="信号量（Semaphore）"></a>信号量（Semaphore）</h4><p>信号量是一个整数值，可以用来解决临界区问题，实现进程或线程之间的同步与互斥。信号量有两种操作：P（等待）和V（信号）。P操作会检查信号量的值，如果值大于零则将其减一；如果值为零则挂起执行。V操作则会将信号量的值加一，如果有挂起的进程或线程，则唤醒它们。</p><h4 id="条件变量（Condition-Variables）"><a href="#条件变量（Condition-Variables）" class="headerlink" title="条件变量（Condition Variables）"></a>条件变量（Condition Variables）</h4><p>条件变量常与互斥锁（Mutex）一起使用，用于线程间的同步。一个线程会因为某个条件不满足而在条件变量上等待，当条件满足时，另一个线程会通知在条件变量上等待的线程。</p><h4 id="管程（Monitor）"><a href="#管程（Monitor）" class="headerlink" title="管程（Monitor）"></a>管程（Monitor）</h4><p>管程是一种同步机制，它将共享变量的操作和条件检查集中在一个数据结构中，通过对这个数据结构的互斥访问实现同步。管程内部通常包含共享变量、操作共享变量的一组过程、以及用于同步的条件变量。</p><h4 id="消息传递（Message-Passing）"><a href="#消息传递（Message-Passing）" class="headerlink" title="消息传递（Message Passing）"></a>消息传递（Message Passing）</h4><p>消息传递是一种进程间通信方式，进程通过发送和接收消息进行通信。消息传递可以是同步的（发送者发送消息后必须等待接收者接收消息），也可以是异步的（发送者发送消息后可以继续执行，不必等待接收者接收消息）。</p><h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><h3 id="4-1-内存的概念"><a href="#4-1-内存的概念" class="headerlink" title="4.1 内存的概念"></a>4.1 内存的概念</h3><p>内存是计算机的一种重要硬件设备，它用于存储和获取数据。内存是计算机中的临时存储区域，它可以在短时间内存储大量的信息，并且可以被处理器快速访问。内存是由一系列的存储单元组成，每个存储单元都有一个唯一的地址，用于标识数据的位置。</p><h3 id="4-2-内存分配策略"><a href="#4-2-内存分配策略" class="headerlink" title="4.2 内存分配策略"></a>4.2 内存分配策略</h3><p>内存分配策略是操作系统用于管理内存的方法，主要有以下几种：</p><ul><li>首次适应（First Fit）：这种方法是在内存中查找第一个足够大的空闲区域分配给进程。</li><li>最佳适应（Best Fit）：这种方法是在内存中查找最小但足够大的空闲区域分配给进程。</li><li>最坏适应（Worst Fit）：这种方法是在内存中查找最大的空闲区域分配给进程。</li></ul><h3 id="4-3-分页和分段"><a href="#4-3-分页和分段" class="headerlink" title="4.3 分页和分段"></a>4.3 分页和分段</h3><p>分页和分段是两种内存管理技术。</p><ul><li><p>分页：是将物理内存分成固定大小的页，每页的大小通常设置为4KB。当程序需要内存时，操作系统会分配一个或多个页。分页可以减少内存碎片，提高内存利用率。</p></li><li><p>分段：是将程序分成一些逻辑上独立的段，每个段可以独立地加载到内存中。分段可以使程序更易于理解和修改，也可以提高内存利用率。</p></li></ul><h3 id="4-4-虚拟内存和页面替换算法"><a href="#4-4-虚拟内存和页面替换算法" class="headerlink" title="4.4 虚拟内存和页面替换算法"></a>4.4 虚拟内存和页面替换算法</h3><p>虚拟内存是一种内存管理技术，它使得程序可以使用比物理内存更多的内存。虚拟内存通过将内存和硬盘结合起来，使得程序可以使用硬盘上的空间作为内存使用。</p><p>页面替换算法是虚拟内存系统中的一种技术，用于决定当内存已满时，哪个页面应该被替换出内存。常见的页面替换算法有FIFO（先进先出）、LRU（最近最少使用）等。</p><h4 id="FIFO（先进先出）："><a href="#FIFO（先进先出）：" class="headerlink" title="FIFO（先进先出）："></a>FIFO（先进先出）：</h4><p>  这是一种简单直观的策略，遵循的原则是先进入的数据先出去。例如，如果你有一个缓存空间，当它满了以后，你需要为新的数据项腾出空间，那么你会选择最早进入缓存的数据项进行替换。这种策略的优点是实现简单，但可能会导致频繁访问的数据被替换出去。</p><h4 id="LRU（最近最少使用）："><a href="#LRU（最近最少使用）：" class="headerlink" title="LRU（最近最少使用）："></a>LRU（最近最少使用）：</h4><p>  这种策略的原则是最近最少使用的数据最先被替换。这意味着如果一个数据项最近被访问过，那么在将来它被再次访问的可能性就更大。因此，当缓存满了以后，LRU策略会选择最长时间未被访问的数据项进行替换。这种策略相比FIFO能更好地处理局部性原理，即最近访问过的数据在未来可能再次被访问。</p><h2 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h2><h3 id="5-1-文件系统的概念"><a href="#5-1-文件系统的概念" class="headerlink" title="5.1 文件系统的概念"></a>5.1 文件系统的概念</h3><p>文件系统是操作系统用于存储、组织、管理和访问计算机中的数据的一种方法。它定义了文件的命名规则，如何存储这些文件，以及如何从存储介质中检索这些文件。文件系统可以是磁盘文件系统，网络文件系统，或者分布式文件系统等。</p><h3 id="5-2-文件的存储和管理"><a href="#5-2-文件的存储和管理" class="headerlink" title="5.2 文件的存储和管理"></a>5.2 文件的存储和管理</h3><p>文件的存储和管理涉及到文件的创建、删除、读取、写入等操作。文件系统通常将文件存储在硬盘或其他形式的存储设备上。文件系统将存储设备分成一些小的存储单位，如扇区或块，然后将文件的数据存储在这些单位中。文件系统还需要管理文件的元数据，如文件名、文件大小、文件创建时间等。</p><h4 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h4><ul><li>元数据（Metadata）是用来描述其他数据的数据。它提供了关于其他数据的有用信息，但并不包含数据本身。元数据可以帮助我们理解数据的来源、结构、含义、时间和空间等相关信息。</li></ul><p>例如，一张照片的元数据可能包括拍摄日期、相机类型、ISO设置、焦距等信息；一首歌曲的元数据可能包括歌曲名称、艺术家、专辑、发行日期等信息；一个文件的元数据可能包括文件名、创建日期、修改日期、文件大小等信息。</p><ul><li>在数据库中，元数据可以描述数据表的名称、列的名称和类型、约束等信息；在网页中，元数据（如HTML的meta标签）可以描述网页的标题、描述、关键词等信息，这对搜索引擎优化（SEO）非常重要。</li></ul><h5 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h5><ul><li>广泛使用的密码散列函数</li><li>MD5常常用于检查数据的完整性。例如，在文件传输或存储的过程中，为了确保文件没有在传输或存储过程中被修改，我们可以计算文件的MD5值并将其存储为文件的元数据。当我们再次需要使用文件时，可以重新计算文件的MD5值并与存储的元数据中的MD5值进行比较，如果两者一致，那么就可以认为文件没有被修改。</li></ul><h3 id="5-3-文件的保护和安全"><a href="#5-3-文件的保护和安全" class="headerlink" title="5.3 文件的保护和安全"></a>5.3 文件的保护和安全</h3><p>文件的保护和安全是文件系统的重要组成部分。文件系统通常提供一些机制来保护文件，防止未经授权的访问或修改。这些机制包括文件权限、文件所有权、访问控制列表等。此外，文件系统可能还提供数据加密功能，以增加数据的安全性。</p><h4 id="文件权限："><a href="#文件权限：" class="headerlink" title="文件权限："></a>文件权限：</h4><p>文件权限决定了哪些用户或用户组可以访问或修改文件。在Unix和Linux系统中，文件权限通常分为读（r）、写（w）和执行（x）三类，每类权限可以赋予文件的所有者、所在组的成员以及其他用户。</p><h4 id="文件所有权："><a href="#文件所有权：" class="headerlink" title="文件所有权："></a>文件所有权：</h4><p>文件所有权决定了文件的所有者和所属的用户组。文件所有者通常可以更改文件的权限，包括决定哪些用户可以读取、写入或执行文件。</p><h4 id="访问控制列表："><a href="#访问控制列表：" class="headerlink" title="访问控制列表："></a>访问控制列表：</h4><p>ACL是一种更细粒度的权限控制机制。它允许管理员为每个用户或用户组分别设置文件的访问权限，而不仅仅是基于文件所有者和用户组。ACL可以为特定用户提供更具体的权限，比如只读、只写或读写权限。</p><h3 id="5-4-目录结构"><a href="#5-4-目录结构" class="headerlink" title="5.4 目录结构"></a>5.4 目录结构</h3><p>目录结构是文件系统用来组织文件的方式。在大多数文件系统中，文件被组织成一种层次结构，称为目录树。每个文件都有一个路径，表示其在目录树中的位置。目录可以包含文件和其他目录。目录结构使用户和应用程序可以方便地找到和管理文件。</p><h2 id="设备管理"><a href="#设备管理" class="headerlink" title="设备管理"></a>设备管理</h2><h3 id="6-1-设备管理的概念"><a href="#6-1-设备管理的概念" class="headerlink" title="6.1 设备管理的概念"></a>6.1 设备管理的概念</h3><p>设备管理是操作系统的一部分，主要负责管理和控制所有的输入/输出设备。设备管理的主要任务包括设备驱动程序的管理，设备调度，缓冲管理等。设备管理的主要目标是提高设备的利用率和系统的吞吐量，同时也要保证系统的公平性和响应时间。</p><h3 id="6-2-设备驱动程序"><a href="#6-2-设备驱动程序" class="headerlink" title="6.2 设备驱动程序"></a>6.2 设备驱动程序</h3><p>设备驱动程序是操作系统的一部分，用于管理和控制特定硬件设备。它是硬件设备和操作系统之间的接口，用于转换操作系统的指令为硬件设备可以理解的指令。设备驱动程序通常是由硬件制造商提供的，可以根据硬件设备的特性和操作系统的要求进行定制。</p><h3 id="6-3-设备调度"><a href="#6-3-设备调度" class="headerlink" title="6.3 设备调度"></a>6.3 设备调度</h3><p>设备调度是设备管理的一部分，主要负责决定哪个进程可以使用设备，以及何时可以使用设备。设备调度的目标是提高设备的利用率和系统的吞吐量，同时也要保证系统的公平性和响应时间。设备调度策略通常包括先来先服务（FCFS），最短寻道时间优先（SSTF），扫描（SCAN）等。</p><h4 id="先来先服务（FCFS，First-Come-First-Served）："><a href="#先来先服务（FCFS，First-Come-First-Served）：" class="headerlink" title="先来先服务（FCFS，First-Come, First-Served）："></a>先来先服务（FCFS，First-Come, First-Served）：</h4><p>  这是最简单的磁盘调度算法。操作系统按照请求到达的顺序来处理它们。这种方法的主要缺点是可能会导致“饥饿”现象，即某些请求可能需要等待很长时间才能得到处理。</p><h4 id="最短寻道时间优先（SSTF，Shortest-Seek-Time-First）："><a href="#最短寻道时间优先（SSTF，Shortest-Seek-Time-First）：" class="headerlink" title="最短寻道时间优先（SSTF，Shortest Seek Time First）："></a>最短寻道时间优先（SSTF，Shortest Seek Time First）：</h4><p>  在这种算法中，磁头会移动到距离当前位置最近的磁道。这种方法可以减少磁头移动的总时间，从而提高磁盘的性能。但是，它也可能导致饥饿现象。</p><h4 id="扫描（SCAN）："><a href="#扫描（SCAN）：" class="headerlink" title="扫描（SCAN）："></a>扫描（SCAN）：</h4><p>  在这种算法中，磁头从一端开始，逐渐向另一端移动，处理所有在其路径上的请求。当磁头到达磁盘的一端时，它会改变方向并继续扫描。这种方法被比喻为电梯运行，因此也被称为电梯算法。SCAN算法相比FCFS和SSTF更公平，因为它确保了所有的请求都会得到处理。</p><h3 id="6-4-缓冲管理"><a href="#6-4-缓冲管理" class="headerlink" title="6.4 缓冲管理"></a>6.4 缓冲管理</h3><p>  缓冲管理是设备管理的一部分，主要负责管理和控制缓冲区的使用。缓冲区是一种临时存储区，用于存储从设备读取的数据或者要写入设备的数据。缓冲管理的目标是提高设备的利用率和系统的吞吐量，同时也要保证系统的公平性和响应时间。缓冲管理策略通常包括单缓冲，双缓冲，循环缓冲等。</p><h2 id="安全与保护"><a href="#安全与保护" class="headerlink" title="安全与保护"></a>安全与保护</h2><h3 id="7-1-操作系统的安全问题"><a href="#7-1-操作系统的安全问题" class="headerlink" title="7.1 操作系统的安全问题"></a>7.1 操作系统的安全问题</h3><p>操作系统是计算机系统的核心，也是最容易受到攻击的部分。例如，黑客可能通过漏洞攻击操作系统，获取系统权限，进而对系统进行不法操作。例如，勒索软件”WannaCry”就是利用Windows系统的一个漏洞，对全球范围内的计算机进行攻击，导致大量数据丢失。</p><h3 id="7-2-访问控制和用户身份验证"><a href="#7-2-访问控制和用户身份验证" class="headerlink" title="7.2 访问控制和用户身份验证"></a>7.2 访问控制和用户身份验证</h3><p>访问控制和用户身份验证是保护信息系统安全的重要手段。例如，银行系统会通过密码和二次验证（如手机短信验证码）的方式，来验证用户的身份。此外，一些高安全级别的系统，如军事系统，可能还会使用生物特征（如指纹、虹膜）进行身份验证。</p><h3 id="7-3-病毒和防火墙"><a href="#7-3-病毒和防火墙" class="headerlink" title="7.3 病毒和防火墙"></a>7.3 病毒和防火墙</h3><p>病毒是一种能够自我复制并传播的恶意软件。例如，”ILOVEYOU”病毒在2000年通过电子邮件传播，导致全球范围内的大量计算机系统崩溃。防火墙则是一种可以阻止恶意软件进入系统的设备或软件。例如，家用路由器通常都内置了防火墙，可以阻止外部网络对家庭内部网络的非法访问。</p><h3 id="7-4-加密和网络安全"><a href="#7-4-加密和网络安全" class="headerlink" title="7.4 加密和网络安全"></a>7.4 加密和网络安全</h3><p>加密技术是保护数据安全的重要手段。例如，当我们在网上购物时，信用卡信息会通过HTTPS协议进行加密，防止数据在传输过程中被窃取。网络安全则是保护网络系统不受攻击的一系列措施。例如，一些公司会定期进行网络安全演练，以提高员工对网络安全的意识，防止社会工程学攻击。</p><h2 id="现代操作系统"><a href="#现代操作系统" class="headerlink" title="现代操作系统"></a>现代操作系统</h2><h3 id="8-1-分布式操作系统"><a href="#8-1-分布式操作系统" class="headerlink" title="8.1 分布式操作系统"></a>8.1 分布式操作系统</h3><p>分布式操作系统是一种控制和协调多台计算机共同工作的操作系统。在一个分布式系统中，用户可以访问远程资源就像访问本地资源一样。分布式操作系统提供了数据的一致性、容错性和并发性。</p><p>例如，Google的分布式文件系统GFS，它将文件分割成多个块存储在不同的节点上，从而提高了数据的可靠性和访问速度。Apache Hadoop也是一个著名的分布式操作系统，专门用于处理大数据。</p><h3 id="8-2-实时操作系统"><a href="#8-2-实时操作系统" class="headerlink" title="8.2 实时操作系统"></a>8.2 实时操作系统</h3><p>实时操作系统（RTOS）是为了控制实时应用程序而设计的操作系统，它能在特定的时间内稳定且预测性地响应外部事件。RTOS通常用于嵌入式系统如飞行控制系统、工厂自动化控制系统等。</p><p>例如，VxWorks是一个广泛使用的实时操作系统，被广泛应用在航空、航天、军事、网络通信等领域。另一个例子是FreeRTOS，一种开源的微型实时操作系统，适用于各种小型嵌入式设备。</p><h3 id="8-3-嵌入式操作系统"><a href="#8-3-嵌入式操作系统" class="headerlink" title="8.3 嵌入式操作系统"></a>8.3 嵌入式操作系统</h3><p>嵌入式操作系统是专为嵌入式系统设计的，通常需要具有实时性、稳定性、小型化和低功耗等特点。嵌入式操作系统通常用于智能家电、工业控制设备、车载电子设备等。</p><p>例如，QNX是一种商业的嵌入式操作系统，被广泛应用在汽车、医疗、工业自动化等领域。另一个例子是Linux，其轻量级版本如OpenWrt、Raspbian等也被广泛应用于各种嵌入式设备。</p><h3 id="8-4-云操作系统"><a href="#8-4-云操作系统" class="headerlink" title="8.4 云操作系统"></a>8.4 云操作系统</h3><p>云操作系统是基于云计算技术开发的新型操作系统。它将计算、存储、网络等资源统一管理和调度，为用户提供了伸缩性、弹性和按需付费等特点。</p><p>例如，Google的Chrome OS就是一种云操作系统，它把大部分计算和数据存储任务都放到了云端，用户只需要一台简单的设备就可以完成各种复杂的任务。另一个例子是OpenStack，这是一种开源的云操作系统，可以让任何人建立自己的私有或公有云。</p>]]></content>
    
    
    <summary type="html">计算机操作系统文章讨论了操作系统的核心概念、功能和作用，以及如何管理和协调计算机硬件和软件资源，提高系统性能和用户体验的重要性。</summary>
    
    
    
    <category term="Basic" scheme="https://kalyan-zitiu.github.io/categories/Basic/"/>
    
    <category term="Study Note" scheme="https://kalyan-zitiu.github.io/categories/Basic/Study-Note/"/>
    
    
    <category term="OS" scheme="https://kalyan-zitiu.github.io/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>Python</title>
    <link href="https://kalyan-zitiu.github.io/2023/09/18/Python/"/>
    <id>https://kalyan-zitiu.github.io/2023/09/18/Python/</id>
    <published>2023-09-18T12:00:00.000Z</published>
    <updated>2023-10-15T08:33:22.421Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>一种多范式编程语言。<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2></li></ul><ol><li><p>Python变量和数据类型：Python有多种基本数据类型，包括整数（int），浮点数（float），字符串（str），列表（list）和字典（dict）等，变量在Python中不需要声明，直接赋值即可。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">10</span>;</span><br><span class="line">y = <span class="number">3.14</span>;</span><br><span class="line">z = <span class="string">&quot;Hello,world!&quot;</span></span><br><span class="line">my_list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">my_dict = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;john&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">25</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>Python条件语句: Python使用if、elif（else if的缩写）和else关键字来进行条件判断。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">10</span></span><br><span class="line"><span class="keyword">if</span> x &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;x is positive&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> x &lt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;x is negative&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;x is zero&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>Python循环: Python使用for和while关键字来进行循环。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用for循环遍历列表</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用while循环</span></span><br><span class="line">x = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> x &lt; <span class="number">5</span>:</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line">    x += <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>Python函数: Python使用def关键字来定义函数。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">greet</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello, &quot;</span> + name + <span class="string">&quot;!&quot;</span>)</span><br><span class="line">greet(<span class="string">&quot;Alice&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="列表（List）"><a href="#列表（List）" class="headerlink" title="列表（List）"></a>列表（List）</h3><ul><li>Python的列表是一种数据结构，可以包含任何类型的数据，如整数，字符串，元组等，列表是可变的，意味着你可以在创建列表后可更改，添加或删除列表中的元素。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">//在这个列表中，我们有一个整数（<span class="number">1</span>），一个字符串（<span class="string">&#x27;Hello&#x27;</span>），一个浮点数（<span class="number">3.14</span>）和一个布尔值（<span class="literal">True</span>）。</span><br><span class="line">my_list = [<span class="number">1</span>,<span class="string">&#x27;hello&#x27;</span>,<span class="number">3.14</span>,<span class="literal">True</span>]</span><br></pre></td></tr></table></figure><h4 id="特性以及操作"><a href="#特性以及操作" class="headerlink" title="特性以及操作"></a>特性以及操作</h4><ol><li><p>索引：你可以通过索引访问列表中的元素。索引是从0开始的。例如，my_list[0] 将返回第一个元素，即1。</p></li><li><p>切片：你也可以访问列表的一部分，这称为切片。例如，my_list[1:3] 将返回从索引1开始到索引（不包括）的所有元素，即[‘Hello’, 3.14]。</p></li><li><p>列表是可变的，你可以更改列表中的元素。例如，my_list[1] = ‘World’ 将把第二个元素（’Hello’）更改为’World’。</p></li><li><p>添加元素：你可以使用 append() 方法在列表的末尾添加新元素，或者使用 insert() 方法在指定位置插入新元素。</p></li><li><p>删除元素：你可以使用 remove() 方法删除指定的元素，或者使用 pop() 方法删除指定索引处的元素。</p></li><li><p>长度：你可以使用 len() 函数获取列表的长度，即它包含的元素数量。</p></li></ol><h4 id="常用的方法"><a href="#常用的方法" class="headerlink" title="常用的方法"></a>常用的方法</h4><ol><li>append(item):列表末尾添加一个新的元素</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">my_list.append(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(my_list) <span class="comment"># 输出[1,2,3,4]</span></span><br></pre></td></tr></table></figure><p>2.. extend(iterable):在列表末尾添加另一个列表</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">my_list.extend([<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line"><span class="built_in">print</span>(my_list) <span class="comment"># 输出[1,2,3,4,5,6]</span></span><br></pre></td></tr></table></figure><ol start="3"><li>insert(index,item):指定索引位置插入一个元素</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">my_list.insert(<span class="number">1</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(my_list) <span class="comment"># 输出[1,&#x27;a&#x27;，2，3]</span></span><br></pre></td></tr></table></figure><ol start="4"><li>remove(item):删除列表中第一个出现的指定元素</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>]</span><br><span class="line">my_list.remove(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(my_list) <span class="comment"># 输出[1,3,2]</span></span><br></pre></td></tr></table></figure><ol start="5"><li>pop(index):删除并返回指定索引位置的元素，若没有则删除并返回最后一个元素</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">item = my_list.pop(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(item) <span class="comment">#输出：2</span></span><br><span class="line"><span class="built_in">print</span>(my_list) <span class="comment">#输出[1,3]</span></span><br></pre></td></tr></table></figure><ol start="6"><li>index(item):用于查找列表中第一个出现的指定元素的索引</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>]</span><br><span class="line">index  = my_list.index(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(index) <span class="comment"># 输出1</span></span><br></pre></td></tr></table></figure><ol start="7"><li>count(item):这个方法用于计算列表中指定元素出现的次数</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>]</span><br><span class="line">count = my_list.count(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(count) <span class="comment"># 输出2</span></span><br></pre></td></tr></table></figure><ol start="8"><li><p>sort():这个方法用于对列表进行排序</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_list = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>]</span><br><span class="line">my_list.sort()</span><br><span class="line"><span class="built_in">print</span>(my_list)  <span class="comment"># 输出: [1, 1, 2, 3, 4, 5, 9]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>reverse():用于反转列表</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">my_list.reverse()</span><br><span class="line"><span class="built_in">print</span>(my_list)</span><br></pre></td></tr></table></figure><h3 id="元组（Tuple）"><a href="#元组（Tuple）" class="headerlink" title="元组（Tuple）"></a>元组（Tuple）</h3><ul><li>元组是一种不可变的序列类型，在Python中，元组是用圆括号（）创建的。元组中的元素可以是不同类型的，如整数，浮点数，字符串，甚至可以包含其他的复杂类型，如列表，字典或其他元组。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_tuple = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><ol><li>不可变性： 一旦元组被创建，你就不能增加、修改或删除元组中的元素。这意味着元组是哈希的，可以用作字典的键。</li><li>有序性： 元组中的元素有固定的顺序，可以通过索引访问。</li><li>允许重复的元素： 元组可以包含重复的元素。</li><li>可以包含不同类型的元素： 元组的元素可以是任何类型。</li></ol><h4 id="常用的方法-1"><a href="#常用的方法-1" class="headerlink" title="常用的方法"></a>常用的方法</h4><ol><li>tuple.count(x):返回元组中元素x出现的次数</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(t.count(<span class="number">2</span>))<span class="comment"># 输出3</span></span><br></pre></td></tr></table></figure><ol start="2"><li>tuple.index(x):返回元组中元素x第一次出现的索引，如果元组中不存在元素x，会抛出一个异常</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(t.index(<span class="number">2</span>))<span class="comment"># 输出1，因为2是元组t中索引为1的元素</span></span><br></pre></td></tr></table></figure><ol start="3"><li>len(tuple):返回元组的长度</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(t)) <span class="comment"># 输出6，因为元组t中有6个元素</span></span><br></pre></td></tr></table></figure><ol start="4"><li><p>max(tuple) 和 min(tuple)：返回元组中的最大值和最小值</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(<span class="built_in">tuple</span>)) <span class="comment"># 输出4，因为4是元组t中的最大值 </span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(<span class="built_in">tuple</span>)) <span class="comment"># 输出1，因为1是元组t中的最小值</span></span><br></pre></td></tr></table></figure></li><li><p>tuple(seq):将序列seq转换为元组</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">t = <span class="built_in">tuple</span>(list1)</span><br><span class="line"><span class="built_in">print</span>(t) <span class="comment"># 输出（1，2，3，4，5）</span></span><br></pre></td></tr></table></figure><h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><ol><li>创建元组</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tup1 = (<span class="string">&#x27;physics&#x27;</span>, <span class="string">&#x27;chemistry&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>)</span><br><span class="line">tup2 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li><p>访问元组</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tup1 = (<span class="string">&#x27;physics&#x27;</span>, <span class="string">&#x27;chemistry&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>)</span><br><span class="line"><span class="built_in">print</span>(tup1[<span class="number">0</span>])  <span class="comment"># 输出 &#x27;physics&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>切片操作</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tup1 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(tup1[<span class="number">1</span>:<span class="number">4</span>])  <span class="comment"># 输出 (2, 3, 4)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>合并元组</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tup1 = (<span class="number">12</span>, <span class="number">34.56</span>)</span><br><span class="line">tup2 = (<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;xyz&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个新的元组</span></span><br><span class="line">tup3 = tup1 + tup2</span><br><span class="line"><span class="built_in">print</span>(tup3)  <span class="comment"># 输出 (12, 34.56, &#x27;abc&#x27;, &#x27;xyz&#x27;)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>元组解包</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tup1 = (<span class="string">&#x27;physics&#x27;</span>, <span class="string">&#x27;chemistry&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解包（unpack）</span></span><br><span class="line">subject1, subject2, year1, year2 = tup1</span><br><span class="line"><span class="built_in">print</span>(subject1)  <span class="comment"># 输出 &#x27;physics&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(year1)  <span class="comment"># 输出 1997</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>计算元素个数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tup1 = (<span class="string">&#x27;physics&#x27;</span>, <span class="string">&#x27;chemistry&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(tup1))  <span class="comment"># 输出 4</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>检查元素是否存在</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tup1 = (<span class="string">&#x27;physics&#x27;</span>, <span class="string">&#x27;chemistry&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">1997</span> <span class="keyword">in</span> tup1)  <span class="comment"># 输出 True</span></span><br></pre></td></tr></table></figure></li><li><p>元素索引</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tup1 = (<span class="string">&#x27;physics&#x27;</span>, <span class="string">&#x27;chemistry&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>)</span><br><span class="line"><span class="built_in">print</span>(tup1.index(<span class="number">2000</span>))  <span class="comment"># 输出 3</span></span><br></pre></td></tr></table></figure><ol start="9"><li>元素计数<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tup1 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(tup1.count(<span class="number">2</span>))  <span class="comment"># 输出 4</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="集合（Set）"><a href="#集合（Set）" class="headerlink" title="集合（Set）"></a>集合（Set）</h3><h4 id="特性-1"><a href="#特性-1" class="headerlink" title="特性"></a>特性</h4><ol><li><p>无序性：集合中的元素没有特定的顺序，因此不能通过索引或切片来访问元素。</p></li><li><p>唯一性：集合中的每个元素都是唯一的，即集合中不能有重复的元素。</p></li><li><p>可变性：可以添加或删除集合中的元素，但集合本身是不可哈希的，因此不能作为其他集合的元素或字典的键。</p></li></ol><h4 id="基本操作-1"><a href="#基本操作-1" class="headerlink" title="基本操作"></a>基本操作</h4><ol><li>创建集合</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s)  <span class="comment"># 输出：&#123;1, 2, 3, 4&#125;</span></span><br><span class="line"></span><br><span class="line">s = <span class="built_in">set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(s)  <span class="comment"># 输出：&#123;1, 2, 3, 4&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>添加元素</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">s.add(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(s)  <span class="comment"># 输出：&#123;1, 2, 3, 4&#125;</span></span><br><span class="line"></span><br><span class="line">s.update([<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>])</span><br><span class="line"><span class="built_in">print</span>(s)  <span class="comment"># 输出：&#123;1, 2, 3, 4, 5, 6, 7&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>删除元素</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">s.remove(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(s)  <span class="comment"># 输出：&#123;2, 3, 4, 5&#125;</span></span><br><span class="line"></span><br><span class="line">s.discard(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(s)  <span class="comment"># 输出：&#123;3, 4, 5&#125;</span></span><br><span class="line"></span><br><span class="line">s.pop()</span><br><span class="line"><span class="built_in">print</span>(s)  <span class="comment"># 输出：&#123;4, 5&#125;，注意这里的输出可能会有所不同，因为pop()是随机删除一个元素</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li>判断元素是否存在</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="number">1</span> <span class="keyword">in</span> s:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;1 is in the set&quot;</span>)  <span class="comment"># 输出：&quot;1 is in the set&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="5"><li>集合的运算<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s1.union(s2))  <span class="comment"># 输出：&#123;1, 2, 3, 4, 5, 6&#125;</span></span><br><span class="line"><span class="built_in">print</span>(s1.intersection(s2))  <span class="comment"># 输出：&#123;3, 4&#125;</span></span><br><span class="line"><span class="built_in">print</span>(s1.difference(s2))  <span class="comment"># 输出：&#123;1, 2&#125;</span></span><br><span class="line"><span class="built_in">print</span>(s1.symmetric_difference(s2))  <span class="comment"># 输出：&#123;1, 2, 5, 6&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><ol><li><p>discard()：删除集合中的指定元素，如果元素不存在，不会抛出错误。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">s.discard(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(s)  <span class="comment"># 输出：&#123;1, 2, 3&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>pop()：随机删除集合中的一个元素。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">s.pop()</span><br><span class="line"><span class="built_in">print</span>(s)  <span class="comment"># 输出可能是：&#123;1, 2&#125; 或 &#123;2, 3&#125; 或 &#123;1, 3&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>clear()：清空集合。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">s.clear()</span><br><span class="line"><span class="built_in">print</span>(s)  <span class="comment"># 输出：set()</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>union()：返回两个集合的并集</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s1.union(s2))  <span class="comment"># 输出：&#123;1, 2, 3, 4, 5&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>intersection()：返回两个集合的交集</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s1.intersection(s2))  <span class="comment"># 输出：&#123;3&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="6"><li><p>difference()：返回集合的差集</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s1.difference(s2))  <span class="comment"># 输出：&#123;1, 2&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>symmetric_difference()：返回两个集合的对称差集</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s1.symmetric_difference(s2))  <span class="comment"># 输出：&#123;1, 2, 4, 5&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="8"><li><p>issubset()：判断集合是不是被其他集合包含</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s1.issubset(s2))  <span class="comment"># 输出：True</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>issuperset()：判断集合是否包含其他集合</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s2.issuperset(s1))  <span class="comment"># 输出：True</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><ul><li><p>并集：两个集合的并集是包含两个集合所有元素的集合。</p></li><li><p>交集：两个集合的交集是同时包含在两个集合中的元素组成的集合。</p></li><li><p>差集：集合A与集合B的差集是包含在集合A但不包含在集合B中的元素组成的集合。</p></li><li><p>对称差集：两个集合的对称差集是只包含在一个集合中但不同时包含在两个集合中的元素组成的集合。</p></li></ul><h3 id="字典（Dictionary）"><a href="#字典（Dictionary）" class="headerlink" title="字典（Dictionary）"></a>字典（Dictionary）</h3><h4 id="特性-2"><a href="#特性-2" class="headerlink" title="特性"></a>特性</h4><ul><li>无序性：字典中的元素没有特定的顺序，它们并不按照插入的顺序存储</li><li>键的唯一性：字典中的键必须是唯一的，如果在创建字典时同一个键被赋值两次，后一个值会被记住。</li><li>可变性：字典是可变的，我们可以添加，删除或修改字典中的键值对。</li></ul><h4 id="基本操作-2"><a href="#基本操作-2" class="headerlink" title="基本操作"></a>基本操作</h4><ol><li>创建字典</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用大括号创建字典</span></span><br><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(dict1)  <span class="comment"># 输出：&#123;&#x27;name&#x27;: &#x27;Alice&#x27;, &#x27;age&#x27;: 20&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用dict()函数创建字典</span></span><br><span class="line">dict2 = <span class="built_in">dict</span>(name=<span class="string">&#x27;Bob&#x27;</span>, age=<span class="number">25</span>)</span><br><span class="line"><span class="built_in">print</span>(dict2)  <span class="comment"># 输出：&#123;&#x27;name&#x27;: &#x27;Bob&#x27;, &#x27;age&#x27;: 25&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>访问字典中的值</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(dict1[<span class="string">&#x27;name&#x27;</span>])  <span class="comment"># 输出：Alice</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>修改字典</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>&#125;</span><br><span class="line">dict1[<span class="string">&#x27;age&#x27;</span>] = <span class="number">21</span>  <span class="comment"># 修改已有的键值对</span></span><br><span class="line">dict1[<span class="string">&#x27;gender&#x27;</span>] = <span class="string">&#x27;Female&#x27;</span>  <span class="comment"># 添加新的键值对</span></span><br><span class="line"><span class="built_in">print</span>(dict1)  <span class="comment"># 输出：&#123;&#x27;name&#x27;: &#x27;Alice&#x27;, &#x27;age&#x27;: 21, &#x27;gender&#x27;: &#x27;Female&#x27;&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li>删除字典元素</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;Female&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">del</span> dict1[<span class="string">&#x27;gender&#x27;</span>]  <span class="comment"># 删除键为&#x27;gender&#x27;的键值对</span></span><br><span class="line"><span class="built_in">print</span>(dict1)  <span class="comment"># 输出：&#123;&#x27;name&#x27;: &#x27;Alice&#x27;, &#x27;age&#x27;: 20&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="常用的方法-2"><a href="#常用的方法-2" class="headerlink" title="常用的方法"></a>常用的方法</h4><ol><li><p>dict.keys():返回一个包含字典所有键的视图对象</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">20</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(d.keys()) <span class="comment">#dict_keys([&#x27;name&#x27;,&#x27;age&#x27;])</span></span><br></pre></td></tr></table></figure></li><li><p>dict.values():此方法返回一个包含字典所有值的视图对象</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(d.values())  <span class="comment"># 输出：dict_values([&#x27;Tom&#x27;, 20])</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>dict.items(): 此方法返回一个包含字典所有（键, 值）元组的视图对象。</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(d.items())  <span class="comment"># 输出：dict_items([(&#x27;name&#x27;, &#x27;Tom&#x27;), (&#x27;age&#x27;, 20)])</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li><p>dict.get(key, default): 此方法返回字典中键为key的值；如果没有这样的键，则返回default。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(d.get(<span class="string">&#x27;name&#x27;</span>))  <span class="comment"># 输出：&#x27;Tom&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(d.get(<span class="string">&#x27;gender&#x27;</span>, <span class="string">&#x27;N/A&#x27;</span>))  <span class="comment"># 输出：&#x27;N/A&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>dict.setdefault(key, default): 如果字典中包含有给定键，则返回该键对应的值，否则将该键和default值插入字典中，并返回default。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(d.setdefault(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;N/A&#x27;</span>))  <span class="comment"># 输出：&#x27;Tom&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(d.setdefault(<span class="string">&#x27;gender&#x27;</span>, <span class="string">&#x27;N/A&#x27;</span>))  <span class="comment"># 输出：&#x27;N/A&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(d)  <span class="comment"># 输出：&#123;&#x27;name&#x27;: &#x27;Tom&#x27;, &#x27;age&#x27;: 20, &#x27;gender&#x27;: &#x27;N/A&#x27;&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>dict.update(other): 将other字典的键/值对更新到当前字典中。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>&#125;</span><br><span class="line">d.update(&#123;<span class="string">&#x27;age&#x27;</span>: <span class="number">21</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;male&#x27;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(d)  <span class="comment"># 输出：&#123;&#x27;name&#x27;: &#x27;Tom&#x27;, &#x27;age&#x27;: 21, &#x27;gender&#x27;: &#x27;male&#x27;&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>dict.pop(key, default): 删除并返回字典中键为key的值，如果没有这样的键，则返回default。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(d.pop(<span class="string">&#x27;age&#x27;</span>))  <span class="comment"># 输出：20</span></span><br><span class="line"><span class="built_in">print</span>(d.pop(<span class="string">&#x27;gender&#x27;</span>, <span class="string">&#x27;N/A&#x27;</span>))  <span class="comment"># 输出：&#x27;N/A&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(d)  <span class="comment"># 输出：&#123;&#x27;name&#x27;: &#x27;Tom&#x27;&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>dict.clear(): 删除字典内所有元素。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>&#125;</span><br><span class="line">d.clear()</span><br><span class="line"><span class="built_in">print</span>(d)  <span class="comment"># 输出：&#123;&#125;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="Python的函数"><a href="#Python的函数" class="headerlink" title="Python的函数"></a>Python的函数</h2><ol><li>定义函数:<br>你可以定义一个由自己想要功能的函数，以下是简单的规则：</li></ol><ul><li>函数代码块以 def 关键词开头，后接函数标识符名称和圆括号 ()。</li><li>任何传入参数和自变量必须放在圆括号中间。圆括号之间可以用于定义参数。</li><li>函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。</li><li>函数内容以冒号起始，并且缩进。</li><li>return [表达式] 结束函数，选择性地返回一个值给调用方。不带表达式的return相当于返回 None。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line"><span class="string">&quot;&quot;&quot;This function prints Hello,World!&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello，World！&quot;</span>)</span><br><span class="line"></span><br><span class="line">hello_world();</span><br></pre></td></tr></table></figure><ol start="2"><li><p>函数参数：<br>在Python中，函数的参数可以有默认值，也支持使用可变参数。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">greet</span>(<span class="params">name, msg=<span class="string">&quot;Good day!&quot;</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    This function greets to the person passed in as parameter</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello&quot;</span>, name + <span class="string">&#x27;, &#x27;</span> + msg)</span><br><span class="line"></span><br><span class="line">greet(<span class="string">&quot;Kate&quot;</span>)</span><br><span class="line">greet(<span class="string">&quot;Bruce&quot;</span>, <span class="string">&quot;How do you do?&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>匿名函数<br>Python使用lambda来创建匿名函数。意即不再使用def语句这样标准的形式定义一个函数。<br>lambda只是一个表达式，函数体笔def简单多</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sum = lambda arg1:arg1 + arg2</span><br><span class="line">print(&quot;Value of tatal:&quot;,sum(10,20))</span><br></pre></td></tr></table></figure></li><li><p>全局和局部变量：<br>在函数内部，你可以引用全局变量。如果你需要在函数内部改变全局变量，那么global关键字就派上用场了，如果不修改全局变量，可以使用局部变量。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">10</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">example</span>():</span><br><span class="line">    <span class="keyword">global</span> x</span><br><span class="line">    y = <span class="number">5</span></span><br><span class="line">    x += y</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;local x:&quot;</span>, x)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;local y:&quot;</span>, y)</span><br><span class="line"></span><br><span class="line">example()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;global x:&quot;</span>, x)</span><br></pre></td></tr></table></figure></li><li><p>错误和异常处理<br>try/except语句</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">diveide</span>(<span class="params">x,y</span>):</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">result = x/y</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;除数不能为零！&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> result</span><br></pre></td></tr></table></figure></li><li><p>函数的递归<br>最好需要一个明确的退出条件，否则无限递归导致程序崩溃</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">factorial</span>(<span class="params">n</span>):</span><br><span class="line"><span class="keyword">if</span> n == <span class="number">0</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> n * factorial(n-<span class="number">1</span>)</span><br></pre></td></tr></table></figure></li><li><p>高阶函数<br>Python支持高阶函数，可以接受其他函数作为参数或返回一个函数的函数。这是函数式编程的一个重要特性，可以用来创建代码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def apply_func(func,x,y)</span><br><span class="line">return func(x,y)</span><br></pre></td></tr></table></figure></li></ol><h2 id="操作文件"><a href="#操作文件" class="headerlink" title="操作文件"></a>操作文件</h2><ol><li><p><strong>打开文件</strong>：我们使用内置的<code>open()</code>函数来打开一个文件。这个函数接收两个参数：文件名和模式。模式可以是<code>&#39;r&#39;</code>（读取，默认值），<code>&#39;w&#39;</code>（写入，如果文件存在则清空内容），<code>&#39;a&#39;</code>（追加，不清空文件内容，从文件末尾开始写入），或<code>&#39;b&#39;</code>（二进制模式）。</p> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;myfile.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p><strong>读取文件</strong>：我们可以使用<code>read()</code>函数来读取文件的全部内容，或者使用<code>readline()</code>来一次读取一行。还可以使用<code>readlines()</code>来一次读取所有行并返回一个列表。</p> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">content = f.read()</span><br><span class="line">line = f.readline()</span><br><span class="line">lines = f.readlines()</span><br></pre></td></tr></table></figure></li><li><p><strong>写入文件</strong>：我们可以使用<code>write()</code>函数来写入文件。</p> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;myfile.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">f.write(<span class="string">&#x27;Hello, World!&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p><strong>关闭文件</strong>：当我们完成文件操作后，应该使用<code>close()</code>函数来关闭文件。</p> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f.close()</span><br></pre></td></tr></table></figure></li><li><p><strong>with语句</strong>：在处理文件对象时，使用with关键字是一个好习惯。它的优点是文件会在语句结束后自动关闭，即使发生异常也是如此。</p> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;myfile.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">print</span>(f.read())</span><br></pre></td></tr></table></figure></li><li><p><strong>操作文件和目录</strong>：Python的os模块提供了许多操作文件和目录的函数，如<code>os.remove()</code>删除文件，<code>os.rename()</code>重命名文件，<code>os.mkdir()</code>创建新目录，<code>os.rmdir()</code>删除目录等。</p> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.remove(<span class="string">&#x27;myfile.txt&#x27;</span>)</span><br><span class="line">os.rename(<span class="string">&#x27;oldname.txt&#x27;</span>, <span class="string">&#x27;newname.txt&#x27;</span>)</span><br><span class="line">os.mkdir(<span class="string">&#x27;newdir&#x27;</span>)</span><br><span class="line">os.rmdir(<span class="string">&#x27;olddir&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ol><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>在Python中，异常处理涉及以下几个关键词：<code>try</code>, <code>except</code>, <code>finally</code>, <code>raise</code>。</p><p>下面是一个简单的例子：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 尝试执行的代码</span></span><br><span class="line">    x = <span class="number">1</span> / <span class="number">0</span></span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    <span class="comment"># 如果在try部分引发了ZeroDivisionError，那么就执行这部分</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;You can&#x27;t divide by zero!&quot;</span>)</span><br></pre></td></tr></table></figure><p>在这个例子中，我们尝试除以零，这会引发一个 ZeroDivisionError。由于我们在 except 语句中处理了这个错误，所以程序会打印出 “You can’t divide by zero!”，而不是完全崩溃。</p><p>finally 语句是一个可选的语句，无论 <code>try</code> 块中的代码是否引发异常，它都会执行。这在需要确保文件正确关闭或网络连接正确终止等情况下非常有用。</p><p>raise 语句允许程序员自己引发异常。例如，如果你正在编写一个函数，你可以使用 <code>raise</code> 语句来引发一个 <code>TypeError</code>，如果函数的参数不是你期望的类型。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add_numbers</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> (<span class="built_in">isinstance</span>(a, <span class="built_in">int</span>) <span class="keyword">and</span> <span class="built_in">isinstance</span>(b, <span class="built_in">int</span>)):</span><br><span class="line">        <span class="keyword">raise</span> TypeError(<span class="string">&quot;Inputs must be integers&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br></pre></td></tr></table></figure><p>在这个例子中，如果 <code>add_numbers</code> 的参数不是整数，那么函数就会引发一个 TypeError。</p><h2 id="模块与包"><a href="#模块与包" class="headerlink" title="模块与包"></a>模块与包</h2><p>模块是Python代码的一种组织形式，它将相关的代码组织在一个文件中，以便于代码的复用和维护。你可以使用import语句来导入模块。例如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(math.sqrt(<span class="number">16</span>))  <span class="comment"># 输出：4.0</span></span><br></pre></td></tr></table></figure><p>在这个例子中，我们导入了math模块，然后使用了它的sqrt函数来计算16的平方根。</p><p>Python的包是一种更高级的模块组织方式。它可以包含多个模块。一个包就是一个包含特殊文件 <strong>init</strong>.py 的目录，这个文件告诉Python这个目录应被视为一个Python包。</p><p>例如，如果你有以下目录结构：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_package/</span><br><span class="line">__init__.py</span><br><span class="line">module1.py</span><br><span class="line">module2.py</span><br></pre></td></tr></table></figure><p>你可以这样导入和使用包中的模块：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> my_package <span class="keyword">import</span> module1</span><br><span class="line">module1.some_function()</span><br></pre></td></tr></table></figure><p>在这个例子中，我们导入了my_package包中的module1模块，并调用了它的some_function函数。</p><h3 id="常用包和模块简介"><a href="#常用包和模块简介" class="headerlink" title="常用包和模块简介"></a>常用包和模块简介</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> numpy: 这是Python中用于数值计算的主要库。它提供了强大的多维数组对象和工具来处理这些数组。</span><br><span class="line"><span class="number">2.</span> pandas: 这是用于数据处理和分析的库。它提供了两个主要的数据结构：Series和DataFrame。</span><br><span class="line"><span class="number">3.</span> matplotlib: 这是用于绘制图形的库。你可以使用它来创建各种各样的图表，比如线图、散点图、柱状图等。</span><br><span class="line"><span class="number">4.</span> scikit-learn: 这是用于机器学习的库。它包含了大量的机器学习算法，比如分类、回归、聚类等。</span><br><span class="line"><span class="number">5.</span> requests: 这是用于发送HTTP请求的库。你可以使用它来获取网页内容，或者与Web服务交互。</span><br><span class="line"><span class="number">6.</span> flask: 这是一个轻量级的Web服务器和框架。你可以使用它来创建Web应用。</span><br><span class="line"><span class="number">7.</span> django: 这是一个高级的Web框架，它遵循MVC（Model-View-Controller）设计模式。你可以使用它来创建复杂的Web应用。</span><br><span class="line"><span class="number">8.</span> tensorflow和pytorch: 这两个库都是用于深度学习的。它们提供了创建和训练神经网络的工具。</span><br><span class="line"><span class="number">9.</span> beautifulsoup4: 这是一个用于解析HTML和XML文档的库，常常用于网页抓取。</span><br><span class="line"><span class="number">10.</span> sqlalchemy: 这是一个数据库抽象层和ORM（Object Relational Mapper）框架。你可以使用它来与各种数据库进行交互。</span><br></pre></td></tr></table></figure><h2 id="面向对象编程（OOP）"><a href="#面向对象编程（OOP）" class="headerlink" title="面向对象编程（OOP）"></a>面向对象编程（OOP）</h2><ol><li>类与对象：在Python中，几乎所有的东西都是对象，具有其属性和方法。类是对象的蓝图或圆形。我们可以使用类来创建对象，这些对象将具有类定义的属性和行为。</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line">  x = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">p1 = MyClass() <span class="comment"># 创建对象</span></span><br><span class="line"><span class="built_in">print</span>(p1.x) <span class="comment"># 输出：5</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>继承：继承允许我们定义一个继承所有办法和属性的类。父类是被继承的类，子类是继承父类的类。</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, fname</span>):</span><br><span class="line">    self.firstname = fname</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">Person</span>):</span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">x = Student(<span class="string">&quot;Mike&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(x.firstname) <span class="comment"># 输出：Mike</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>多态：多态是指同一操作作用于不同的对象，可以产生不同的结果。这意味着每个对象可以根据其类型以自己的方式响应常见的方法。</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>:</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">sound</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Meow&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>:</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">sound</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Woof&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_sound</span>(<span class="params">animal</span>):</span><br><span class="line">  <span class="built_in">print</span>(animal.sound())</span><br><span class="line"></span><br><span class="line">cat_obj = Cat()</span><br><span class="line">dog_obj = Dog()</span><br><span class="line"></span><br><span class="line">make_sound(cat_obj) <span class="comment"># 输出：Meow</span></span><br><span class="line">make_sound(dog_obj) <span class="comment"># 输出：Woof</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li>封装：封装是面向对象编程的一个主要原则，隐藏了对象的内部状态和实现细节，只提供了一组接口。</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Computer</span>:</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">    self.__maxprice = <span class="number">900</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">sell</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Selling Price: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(self.__maxprice))</span><br><span class="line"></span><br><span class="line">c = Computer()</span><br><span class="line">c.sell() <span class="comment"># 输出：Selling Price: 900</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="常用标准库"><a href="#常用标准库" class="headerlink" title="常用标准库"></a>常用标准库</h2><h3 id="OS"><a href="#OS" class="headerlink" title="OS"></a>OS</h3><p>提供了许多与操作系统交互的函数，如创建目录（Mkdir）,更改当前工作目录（chdir），获取当前工作目录（getcwd）等。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.mkdir(<span class="string">&#x27;new_dir&#x27;</span>)</span><br><span class="line">os.chdir(<span class="string">&#x27;new_dir&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(os.getcwd())</span><br></pre></td></tr></table></figure><table><thead><tr><th>函数名</th><th>描述</th></tr></thead><tbody><tr><td>os.name</td><td>获取当前的操作系统名称</td></tr><tr><td>os.getcwd()</td><td>获取当前的工作目录</td></tr><tr><td>os.chdir(path)</td><td>改变当前的工作目录到指定的路径</td></tr><tr><td>os.listdir(path)</td><td>列出指定路径下的所有文件和目录</td></tr><tr><td>os.mkdir(path)</td><td>在指定的路径下创建一个新的目录</td></tr><tr><td>os.rmdir(path)</td><td>删除指定的目录</td></tr><tr><td>os.rename(src, dst)</td><td>重命名文件或目录，从src到dst</td></tr><tr><td>os.remove(path)</td><td>删除指定的文件</td></tr><tr><td>os.path.join(path1, path2, …)</td><td>将多个路径组合后返回</td></tr><tr><td>os.path.split(path)</td><td>返回路径的目录名和文件名</td></tr><tr><td>os.path.exists(path)</td><td>检测指定路径是否存在</td></tr><tr><td>os.path.isdir(path)</td><td>检测指定路径是目录</td></tr><tr><td>os.path.isfile(path)</td><td>检测指定路径是文件</td></tr></tbody></table><h3 id="json"><a href="#json" class="headerlink" title="json"></a>json</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data = &#123;&#x27;name&#x27;: &#x27;John&#x27;, &#x27;age&#x27;: 30, &#x27;city&#x27;: &#x27;New York&#x27;&#125;</span><br><span class="line">json_data = json.dumps(data)  # 将Python对象转换为JSON格式</span><br><span class="line">print(json_data)  </span><br><span class="line">new_data = json.loads(json_data)  # 将JSON格式的数据转换为Python对象</span><br><span class="line">print(new_data)</span><br></pre></td></tr></table></figure><h3 id="re"><a href="#re" class="headerlink" title="re"></a>re</h3><p>提供了对正则表达式的支持，正则表达式是一个特殊的序列，能够帮助你匹配或者找到其他字符串，使用特定的语法规则。</p><p><strong>Python re模块函数</strong></p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td><code>re.match()</code></td><td>从字符串的开始位置匹配正则表达式，如果开始位置匹配不成功，match()返回None</td></tr><tr><td><code>re.search()</code></td><td>扫描整个字符串并返回第一个成功的匹配</td></tr><tr><td><code>re.findall()</code></td><td>返回一个列表，包含所有匹配的子串</td></tr><tr><td><code>re.sub()</code></td><td>用于替换字符串中的匹配项</td></tr><tr><td><code>re.compile()</code></td><td>用于编译正则表达式，生成一个正则表达式对象</td></tr></tbody></table><p><strong>正则表达式元字符</strong></p><table><thead><tr><th>元字符</th><th>描述</th></tr></thead><tbody><tr><td><code>.</code></td><td>匹配除了换行符以外的任何字符</td></tr><tr><td><code>^</code></td><td>匹配字符串的开始</td></tr><tr><td><code>$</code></td><td>匹配字符串的结束</td></tr><tr><td><code>*</code></td><td>匹配0次或多次前面的正则表达式</td></tr><tr><td><code>+</code></td><td>匹配1次或多次前面的正则表达式</td></tr><tr><td><code>?</code></td><td>匹配0次或1次前面的正则表达式</td></tr><tr><td><code>\d</code></td><td>匹配任何数字，等价于<code>[0-9]</code></td></tr><tr><td><code>\D</code></td><td>匹配任何非数字字符，等价于<code>[^0-9]</code></td></tr><tr><td><code>\s</code></td><td>匹配任何空白字符，等价于<code>[\t\n\r\f\v]</code></td></tr><tr><td><code>\S</code></td><td>匹配任何非空白字符，等价于<code>[^\t\n\r\f\v]</code></td></tr><tr><td><code>\w</code></td><td>匹配任何字母数字字符，等价于<code>[a-zA-Z0-9_]</code></td></tr><tr><td><code>\W</code></td><td>匹配任何非字母数字字符，等价于<code>[^a-zA-Z0-9_]</code></td></tr></tbody></table><h4 id="简单的re模块例子"><a href="#简单的re模块例子" class="headerlink" title="简单的re模块例子"></a>简单的re模块例子</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用match方法</span></span><br><span class="line"><span class="keyword">match</span> = re.<span class="keyword">match</span>(<span class="string">r&#x27;[1-9]\d&#123;5&#125;&#x27;</span>, <span class="string">&#x27;100081 BIT 100082&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="keyword">match</span>.group(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用search方法</span></span><br><span class="line">search = re.search(<span class="string">r&#x27;[1-9]\d&#123;5&#125;&#x27;</span>, <span class="string">&#x27;BIT 100082&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> search:</span><br><span class="line">    <span class="built_in">print</span>(search.group(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用findall方法</span></span><br><span class="line">findall = re.findall(<span class="string">r&#x27;[1-9]\d&#123;5&#125;&#x27;</span>, <span class="string">&#x27;100081 BIT 100082&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(findall)</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用sub方法</span></span><br><span class="line">sub = re.sub(<span class="string">r&#x27;[1-9]\d&#123;5&#125;&#x27;</span>, <span class="string">&#x27;:zipcode&#x27;</span>, <span class="string">&#x27;100081 BIT 100082&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(sub)</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用compile方法</span></span><br><span class="line">pattern = re.<span class="built_in">compile</span>(<span class="string">r&#x27;[1-9]\d&#123;5&#125;&#x27;</span>)</span><br><span class="line">result = pattern.search(<span class="string">&#x27;BIT 100082&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> result:</span><br><span class="line">    <span class="built_in">print</span>(result.group(<span class="number">0</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="collections"><a href="#collections" class="headerlink" title="collections"></a>collections</h3><p>实现了特殊的容器数据类型，提供了Python内置的<code>dict</code>，<code>list</code>，<code>set</code>，<code>tuple</code>之外的更多数据类型。</p><ol><li>**<code>namedtuple()</code>**：<code>namedtuple</code>是一个函数，它用来创建一个自定义的元组对象，并且规定了元组元素的个数，可以用属性而不是索引来引用元组的某个元素。</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个名为&#x27;Animal&#x27;的namedtuple，它包含&#x27;name&#x27;和&#x27;age&#x27;两个字段。</span></span><br><span class="line">Animal = namedtuple(<span class="string">&#x27;Animal&#x27;</span>, [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;type&#x27;</span>])</span><br><span class="line"></span><br><span class="line">cat = Animal(name=<span class="string">&#x27;Kitty&#x27;</span>, <span class="built_in">type</span>=<span class="string">&#x27;Cat&#x27;</span>)</span><br><span class="line">dog = Animal(name=<span class="string">&#x27;Max&#x27;</span>, <span class="built_in">type</span>=<span class="string">&#x27;Dog&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#可以用属性访问namedtuple的元素</span></span><br><span class="line"><span class="built_in">print</span>(cat.name)  <span class="comment"># 输出: Kitty</span></span><br><span class="line"><span class="built_in">print</span>(dog.<span class="built_in">type</span>)  <span class="comment"># 输出: Dog</span></span><br></pre></td></tr></table></figure><ol start="2"><li>**<code>deque</code>**：<code>deque</code>是一个双端队列，它可以从两端添加或删除元素。在需要添加和删除元素时，deque提供了更优于list的性能。</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line">dq = deque()</span><br><span class="line"></span><br><span class="line"><span class="comment">#在队列右侧添加元素</span></span><br><span class="line">dq.append(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">dq.append(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(dq)  <span class="comment"># 输出: deque([&#x27;a&#x27;, &#x27;b&#x27;])</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在队列左侧添加元素</span></span><br><span class="line">dq.appendleft(<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(dq)  <span class="comment"># 输出: deque([&#x27;c&#x27;, &#x27;a&#x27;, &#x27;b&#x27;])</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除队列右侧元素</span></span><br><span class="line">dq.pop()</span><br><span class="line"><span class="built_in">print</span>(dq)  <span class="comment"># 输出: deque([&#x27;c&#x27;, &#x27;a&#x27;])</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除队列左侧元素</span></span><br><span class="line">dq.popleft()</span><br><span class="line"><span class="built_in">print</span>(dq)  <span class="comment"># 输出: deque([&#x27;a&#x27;])</span></span><br></pre></td></tr></table></figure><ol start="3"><li>**<code>Counter</code>**：<code>Counter</code>是一个简单的计数器，例如，它可以用来统计字符的个数：</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line">c = Counter(<span class="string">&#x27;banana&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(c)  <span class="comment"># 输出: Counter(&#123;&#x27;a&#x27;: 3, &#x27;b&#x27;: 1, &#x27;n&#x27;: 2&#125;)</span></span><br></pre></td></tr></table></figure><p>你还可以对Counter对象执行各种数学运算操作：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c1 = Counter(a=<span class="number">3</span>, b=<span class="number">2</span>)</span><br><span class="line">c2 = Counter(a=<span class="number">1</span>, b=<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(c1 + c2)  <span class="comment"># 输出: Counter(&#123;&#x27;a&#x27;: 4, &#x27;b&#x27;: 4&#125;)</span></span><br></pre></td></tr></table></figure><ol start="4"><li>**<code>OrderedDict</code>**：<code>OrderedDict</code>是一个字典子类，它记住了字典元素添加的顺序：</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line"></span><br><span class="line">od = OrderedDict()</span><br><span class="line">od[<span class="string">&#x27;z&#x27;</span>] = <span class="number">1</span></span><br><span class="line">od[<span class="string">&#x27;y&#x27;</span>] = <span class="number">2</span></span><br><span class="line">od[<span class="string">&#x27;x&#x27;</span>] = <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(od.keys()))  <span class="comment"># 输出: [&#x27;z&#x27;, &#x27;y&#x27;, &#x27;x&#x27;]</span></span><br></pre></td></tr></table></figure><ol start="5"><li>**<code>defaultdict</code>**：<code>defaultdict</code>是一个字典子类，它提供了一个工厂函数为字典查询提供默认值：</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line">dd = defaultdict(<span class="built_in">int</span>)</span><br><span class="line"><span class="built_in">print</span>(dd[<span class="string">&#x27;key&#x27;</span>])  <span class="comment"># 输出: 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#当键不存在的时候，返回默认值0，而不是抛出KeyError异常</span></span><br><span class="line">dd[<span class="string">&#x27;key&#x27;</span>] += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(dd[<span class="string">&#x27;key&#x27;</span>])  <span class="comment"># 输出: 1</span></span><br></pre></td></tr></table></figure><h2 id="Python应用"><a href="#Python应用" class="headerlink" title="Python应用"></a>Python应用</h2><h3 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h3><h4 id="pandas"><a href="#pandas" class="headerlink" title="pandas"></a>pandas</h4><p>一个开源的Python类库，用于数据分析，数据处理，数据可视化</p><h5 id="Pandas读取数据"><a href="#Pandas读取数据" class="headerlink" title="Pandas读取数据"></a>Pandas读取数据</h5><p>Pandas 提供了多种读取数据的方法，可以读取各种类型的文件，包括 CSV、Excel、SQL 数据库等。下面是一些常用的读取数据的方法：</p><ol><li>从 CSV 文件读取数据：</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;file.csv&#x27;</span>)</span><br></pre></td></tr></table></figure><ol start="2"><li>从 Excel 文件读取数据：</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_excel(<span class="string">&#x27;file.xlsx&#x27;</span>)</span><br></pre></td></tr></table></figure><ol start="3"><li>从 SQL 数据库读取数据：</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"></span><br><span class="line">engine = create_engine(<span class="string">&#x27;sqlite:///:memory:&#x27;</span>)</span><br><span class="line">df = pd.read_sql(<span class="string">&#x27;SELECT * FROM my_table&#x27;</span>, engine)</span><br></pre></td></tr></table></figure><p>注意，这些方法都会返回一个 DataFrame 对象，这是 Pandas 中用于数据操纵的主要数据结构。</p><p>你可以使用 <code>df.head()</code> 来查看 DataFrame 的前几行，以确保数据已经正确加载。</p><p>此外，这些函数都有许多可选参数，可以帮助你更精细地控制数据的加载过程。例如，<code>pd.read_csv</code> 允许你指定分隔符类型、处理缺失值、跳过特定的行等。你可以查阅 Pandas 的文档以获取更多信息。</p><h5 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h5><h6 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h6><p>Series是Pandas中的一维标签化数组，可以容纳任何数据类型，包括整数，字符串，浮点数，Python对象等。它是由一组数据（各种NumPy数据类型）以及一组与之相关的数据标签组成，可以把它看作是一个带有标签的一维数组</p><h6 id="Serise多种创建方法"><a href="#Serise多种创建方法" class="headerlink" title="Serise多种创建方法"></a>Serise多种创建方法</h6><p>Pandas的Series是一个一维的数据结构，有点类似于Python的列表或数组，但是它有一些额外的功能，例如可以为每个元素指定一个标签（或者说索引）。</p><p>以下是创建Series的一些方法：</p><ol><li>用Python列表创建Series：</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">s = pd.Series([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, np.nan, <span class="number">6</span>, <span class="number">8</span>])</span><br></pre></td></tr></table></figure><ol start="2"><li>用NumPy数组创建Series：</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">s = pd.Series(np.random.randn(<span class="number">5</span>))</span><br></pre></td></tr></table></figure><ol start="3"><li>用Python字典创建Series，字典的键会被用作Series的索引：</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">d = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line">s = pd.Series(d)</span><br></pre></td></tr></table></figure><ol start="4"><li>用标量创建Series，该标量值会被广播到指定的索引：</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">s = pd.Series(<span class="number">5.</span>, index=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>])</span><br></pre></td></tr></table></figure><p>以上就是创建Pandas Series的四种常用方法，每种方法都有其适用的场景，你可以根据实际需要选择使用。</p><h6 id="Series索引"><a href="#Series索引" class="headerlink" title="Series索引"></a>Series索引</h6><p>在Pandas中，Series对象的索引类似于Python的字典，它可以用来访问和操作数据。</p><p>创建Series时，可以通过<code>index</code>参数来指定索引。如果不指定，Pandas将自动创建一个从0开始的整数索引。</p><p>例如，创建一个带有指定索引的Series：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">s = pd.Series([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, np.nan, <span class="number">6</span>, <span class="number">8</span>], index=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure><p>此代码将输出：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a    1.0</span><br><span class="line">b    3.0</span><br><span class="line">c    5.0</span><br><span class="line">d    NaN</span><br><span class="line">e    6.0</span><br><span class="line">f    8.0</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><p>你可以像字典一样使用索引来访问和修改Series中的元素：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(s[<span class="string">&#x27;a&#x27;</span>])  <span class="comment"># 输出：1.0</span></span><br><span class="line"></span><br><span class="line">s[<span class="string">&#x27;a&#x27;</span>] = <span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="string">&#x27;a&#x27;</span>])  <span class="comment"># 输出：100.0</span></span><br></pre></td></tr></table></figure><p>还可以使用<code>.loc</code>和<code>.iloc</code>方法来进行索引。<code>.loc</code>用于基于标签的索引，而<code>.iloc</code>用于基于位置的索引：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(s.loc[<span class="string">&#x27;a&#x27;</span>])  <span class="comment"># 输出：100.0</span></span><br><span class="line"><span class="built_in">print</span>(s.iloc[<span class="number">0</span>])  <span class="comment"># 输出：100.0</span></span><br></pre></td></tr></table></figure><h6 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h6><p>DataFrame是Pandas中的二维标签化数据结构。你可以把它看作是一个电子表格或SQL表，或者是Series对象的字典。它通常是最常用的pandas对象。与Series一样，DataFrame可以容纳多种类型的输入。</p><h6 id="多种方法创建DataFrame"><a href="#多种方法创建DataFrame" class="headerlink" title="多种方法创建DataFrame"></a>多种方法创建DataFrame</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment">#从字典创建 DataFrame</span></span><br><span class="line">data = &#123;<span class="string">&#x27;Name&#x27;</span>: [<span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Charlie&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;Age&#x27;</span>: [<span class="number">25</span>, <span class="number">30</span>, <span class="number">35</span>]&#125;</span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line"></span><br><span class="line"><span class="comment">#从列表创建 DataFrame</span></span><br><span class="line">data = [[<span class="string">&#x27;Alice&#x27;</span>, <span class="number">25</span>], [<span class="string">&#x27;Bob&#x27;</span>, <span class="number">30</span>], [<span class="string">&#x27;Charlie&#x27;</span>, <span class="number">35</span>]]</span><br><span class="line">df = pd.DataFrame(data, columns=[<span class="string">&#x27;Name&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#从 NumPy 数组创建 DataFrame</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">data = np.array([[<span class="string">&#x27;Alice&#x27;</span>, <span class="number">25</span>], [<span class="string">&#x27;Bob&#x27;</span>, <span class="number">30</span>], [<span class="string">&#x27;Charlie&#x27;</span>, <span class="number">35</span>]])</span><br><span class="line">df = pd.DataFrame(data, columns=[<span class="string">&#x27;Name&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#从文件中读取数据创建 DataFrame</span></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;data.csv&#x27;</span>)</span><br></pre></td></tr></table></figure><h6 id="DataFrame特性"><a href="#DataFrame特性" class="headerlink" title="DataFrame特性"></a>DataFrame特性</h6><ol><li><p>表格结构：DataFrame是一个表格，有行有列，每一列可以包含不同的数据类型，如整数，浮点数，字符串等。</p></li><li><p>标签索引：DataFrame通过行和列的标签进行索引，你可以使用列名或行标签来访问数据。</p></li></ol><p>3.灵活性：你可以执行各种数据操作，如筛选,切片，合并，聚合和重塑，以满足数据分析和处理和需求。</p><h6 id="DataFrame基本操作"><a href="#DataFrame基本操作" class="headerlink" title="DataFrame基本操作"></a>DataFrame基本操作</h6><ol><li><p>访问列数据：使用列名或标签访问列数据。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">&#x27;Name&#x27;</span>]  <span class="comment"># 访问 &#x27;Name&#x27; 列</span></span><br></pre></td></tr></table></figure></li><li><p>增加和删除列：你可以轻松地添加和删除列。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">&#x27;City&#x27;</span>] = [<span class="string">&#x27;New York&#x27;</span>, <span class="string">&#x27;San Francisco&#x27;</span>, <span class="string">&#x27;Los Angeles&#x27;</span>]  <span class="comment"># 添加新列</span></span><br><span class="line">df.drop(<span class="string">&#x27;Age&#x27;</span>, axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)  <span class="comment"># 删除 &#x27;Age&#x27; 列</span></span><br></pre></td></tr></table></figure></li><li><p>数据筛选：使用条件筛选数据。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[df[<span class="string">&#x27;Age&#x27;</span>] &gt; <span class="number">30</span>]  <span class="comment"># 筛选年龄大于 30 的行</span></span><br></pre></td></tr></table></figure></li><li><p>聚合操作：进行统计和聚合计算。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[df[<span class="string">&#x27;Age&#x27;</span>] &gt; <span class="number">30</span>]  <span class="comment"># 筛选年龄大于 30 的行</span></span><br></pre></td></tr></table></figure></li><li><p>数据排序：按列的值排序 DataFrame。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[df[<span class="string">&#x27;Age&#x27;</span>] &gt; <span class="number">30</span>]  <span class="comment"># 筛选年龄大于 30 的行</span></span><br></pre></td></tr></table></figure></li></ol><h5 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h5><p>模拟一组数据</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = &#123;</span><br><span class="line">        <span class="string">&#x27;Name&#x27;</span>: [<span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Charlie&#x27;</span>, <span class="string">&#x27;David&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;Age&#x27;</span>: [<span class="number">25</span>, <span class="number">30</span>, <span class="number">35</span>, <span class="number">40</span>],</span><br><span class="line">        <span class="string">&#x27;City&#x27;</span>: [<span class="string">&#x27;New York&#x27;</span>, <span class="string">&#x27;Paris&#x27;</span>, <span class="string">&#x27;London&#x27;</span>, <span class="string">&#x27;Tokyo&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;Salary&#x27;</span>: [<span class="number">5000</span>, <span class="number">6000</span>, <span class="number">7000</span>, <span class="number">8000</span>]&#125;</span><br><span class="line">df = pd.DataFrame(data)</span><br></pre></td></tr></table></figure><h6 id="布尔索引"><a href="#布尔索引" class="headerlink" title="布尔索引"></a>布尔索引</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#选择年龄大于30的行</span></span><br><span class="line">result = df[df[<span class="string">&#x27;Age&#x27;</span>] &gt; <span class="number">30</span>]</span><br></pre></td></tr></table></figure><h6 id="loc-和-iloc"><a href="#loc-和-iloc" class="headerlink" title=".loc 和 .iloc"></a>.loc 和 .iloc</h6><ol><li>label指定行列<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = df.loc[<span class="number">0</span>, <span class="string">&#x27;City&#x27;</span>]</span><br></pre></td></tr></table></figure></li><li>使用值列表哦批量查询<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result  = df.loc[[<span class="string">&#x27;Alice&#x27;</span>,<span class="string">&#x27;Bob&#x27;</span>],<span class="string">&#x27;City&#x27;</span>]</span><br></pre></td></tr></table></figure></li><li>使用数值区间进行范围查询<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = df.loc[<span class="string">&#x27;Alice&#x27;</span>:<span class="string">&#x27;Charlie&#x27;</span>,Salary]</span><br></pre></td></tr></table></figure></li><li>使用条件表达式查询<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = df.loc[df[<span class="string">&#x27;Salary&#x27;</span>] &lt; <span class="number">7000</span> :  ]</span><br></pre></td></tr></table></figure></li><li>调用函数查询<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = df.loc[<span class="keyword">lambda</span> df:(df[<span class="string">&quot;Salary&quot;</span>] &lt; = <span class="number">7000</span>) &amp; (df[<span class="string">&quot;Salary&quot;</span>] &gt; = <span class="number">5000</span>) ]</span><br></pre></td></tr></table></figure></li></ol><h6 id="isin"><a href="#isin" class="headerlink" title=".isin"></a>.isin</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#选择城市为&#x27;Paris&#x27;或&#x27;Tokyo&#x27;的行</span></span><br><span class="line">result = df[df[<span class="string">&#x27;City&#x27;</span>].isin([<span class="string">&#x27;Paris&#x27;</span>, <span class="string">&#x27;Tokyo&#x27;</span>])]</span><br></pre></td></tr></table></figure><h6 id="query"><a href="#query" class="headerlink" title=".query"></a>.query</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#选择工资大于6000的行</span></span><br><span class="line">result = df.query(<span class="string">&#x27;Salary &gt; 6000&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="新增数据列"><a href="#新增数据列" class="headerlink" title="新增数据列"></a>新增数据列</h5><ol><li><p>使用直接赋值</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个DataFrame</span></span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">&#x27;A&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">                   <span class="string">&#x27;B&#x27;</span>: [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#新增一个名为&#x27;C&#x27;的列，并赋值为一个列表</span></span><br><span class="line">df[<span class="string">&#x27;C&#x27;</span>] = [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure></li><li><p>使用assign()方法</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="comment">#创建一个DataFrame</span></span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">&#x27;A&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">                   <span class="string">&#x27;B&#x27;</span>: [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]&#125;)</span><br><span class="line"><span class="comment">#使用assign()方法新增一个名为&#x27;C&#x27;的列，并赋值为一个列表</span></span><br><span class="line">df = df.assign(C=[<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br></pre></td></tr></table></figure></li></ol><h5 id="统计函数"><a href="#统计函数" class="headerlink" title="统计函数"></a>统计函数</h5><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td><code>sum()</code></td><td>计算数字的总和</td></tr><tr><td><code>mean()</code></td><td>计算平均值</td></tr><tr><td><code>median()</code></td><td>计算中位数</td></tr><tr><td><code>mode()</code></td><td>计算众数</td></tr><tr><td><code>variance()</code></td><td>计算方差</td></tr><tr><td><code>stddev()</code></td><td>计算标准差</td></tr><tr><td><code>min()</code></td><td>找到最小值</td></tr><tr><td><code>max()</code></td><td>找到最大值</td></tr><tr><td><code>numpy</code> 库</td><td>强大的数组和矩阵操作</td></tr><tr><td><code>pandas</code> 库</td><td>数据处理和分析，提供数据结构和统计函数</td></tr><tr><td><code>scipy</code> 库</td><td>高级的统计函数和科学计算工具</td></tr></tbody></table><p>当涉及到统计函数时，以下是每个函数的简单示例：</p><ol><li><p><code>sum()</code>: 计算数字的总和</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">total = <span class="built_in">sum</span>(numbers)</span><br><span class="line"><span class="built_in">print</span>(total)  <span class="comment"># 输出：15</span></span><br></pre></td></tr></table></figure></li><li><p><code>mean()</code> 或 <code>average()</code>: 计算平均值</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numbers = [<span class="number">12</span>, <span class="number">18</span>, <span class="number">24</span>, <span class="number">30</span>, <span class="number">36</span>]</span><br><span class="line">average = <span class="built_in">sum</span>(numbers) / <span class="built_in">len</span>(numbers)</span><br><span class="line"><span class="built_in">print</span>(average)  <span class="comment"># 输出：24.0</span></span><br></pre></td></tr></table></figure></li><li><p><code>median()</code>: 计算中位数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numbers = [<span class="number">5</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">7</span>]</span><br><span class="line">numbers.sort()</span><br><span class="line">n = <span class="built_in">len</span>(numbers)</span><br><span class="line"><span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">    median = (numbers[n//<span class="number">2</span> - <span class="number">1</span>] + numbers[n//<span class="number">2</span>]) / <span class="number">2</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    median = numbers[n//<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(median)  <span class="comment"># 输出：5</span></span><br></pre></td></tr></table></figure></li><li><p><code>mode()</code>: 计算众数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> statistics <span class="keyword">import</span> mode</span><br><span class="line">data = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">result = mode(data)</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 输出：3</span></span><br></pre></td></tr></table></figure></li><li><p><code>variance()</code>: 计算方差</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> statistics <span class="keyword">import</span> variance</span><br><span class="line">data = [<span class="number">5</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">15</span>]</span><br><span class="line">result = variance(data)</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 输出：11.0</span></span><br></pre></td></tr></table></figure></li><li><p><code>stddev()</code>: 计算标准差</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">from</span> statistics <span class="keyword">import</span> stdev</span><br><span class="line">   data = [<span class="number">5</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">15</span>]</span><br><span class="line">   result = stdev(data)</span><br><span class="line">   <span class="built_in">print</span>(result)  <span class="comment"># 输出：3.3166247903554</span></span><br><span class="line"></span><br><span class="line"><span class="number">7.</span> `<span class="built_in">min</span>()` 和 `<span class="built_in">max</span>()`: 找到最小值和最大值</span><br><span class="line"></span><br><span class="line">   ```python</span><br><span class="line">   numbers = [<span class="number">15</span>, <span class="number">8</span>, <span class="number">22</span>, <span class="number">3</span>, <span class="number">11</span>]</span><br><span class="line">   min_val = <span class="built_in">min</span>(numbers)</span><br><span class="line">   max_val = <span class="built_in">max</span>(numbers)</span><br><span class="line">   <span class="built_in">print</span>(min_val)  <span class="comment"># 输出：3</span></span><br><span class="line">   <span class="built_in">print</span>(max_val)  <span class="comment"># 输出：22</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="numpy"><a href="#numpy" class="headerlink" title="numpy"></a>numpy</h4><p>首先，让我们导入numpy库。在你的Python环境中，你可以这样做：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><p>我们使用 “as” 关键字给numpy库起了一个别名 “np”，这样在我们的代码中就可以使用 “np” 来代替 “numpy”，使代码更简洁。</p><p><strong>创建数组</strong></p><p>在numpy中，最基本的对象是ndarray对象，也就是n维数组。我们可以使用np.array()函数来创建一个数组。例如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"><span class="built_in">print</span>(arr)</span><br></pre></td></tr></table></figure><p>这将会创建一个一维数组，并输出 <code>[1 2 3 4 5]</code>。</p><p><strong>数组的属性</strong></p><p>创建了数组之后，我们可以查看一些数组的属性。例如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Shape of the array: &quot;</span>, arr.shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Data type of the array: &quot;</span>, arr.dtype)</span><br></pre></td></tr></table></figure><p><code>shape</code> 属性返回一个元组，表示数组的形状（即各维度的大小）。<code>dtype</code> 属性则返回数组中元素的数据类型。</p><p><strong>多维数组</strong></p><p>我们不仅可以创建一维数组，还可以创建多维数组。例如，我们可以创建一个2x3的二维数组：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr_2d = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line"><span class="built_in">print</span>(arr_2d)</span><br></pre></td></tr></table></figure><p>这将会输出：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[[1 2 3]</span><br><span class="line"> [4 5 6]]</span><br></pre></td></tr></table></figure><p><strong>数组的索引和切片</strong></p><p>我们可以使用索引和切片来访问和修改数组中的元素。例如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(arr[<span class="number">0</span>])  <span class="comment"># 输出数组的第一个元素</span></span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">10</span>  <span class="comment"># 将数组的第一个元素修改为10</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr_2d[<span class="number">0</span>, <span class="number">1</span>])  <span class="comment"># 输出二维数组的第一行第二列的元素</span></span><br><span class="line">arr_2d[<span class="number">1</span>, :] = [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]  <span class="comment"># 将二维数组的第二行的所有元素修改为7, 8, 9</span></span><br></pre></td></tr></table></figure><h5 id="数学运算"><a href="#数学运算" class="headerlink" title="数学运算"></a>数学运算</h5><ol><li>加法：<code>numpy.add(x, y)</code>，对应元素相加。</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">y = np.array([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"><span class="built_in">print</span>(np.add(x, y))  <span class="comment"># Output: array([5, 7, 9])</span></span><br></pre></td></tr></table></figure><ol start="2"><li>减法：<code>numpy.subtract(x, y)</code>，对应元素相减。</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(np.subtract(x, y))  <span class="comment"># Output: array([-3, -3, -3])</span></span><br></pre></td></tr></table></figure><ol start="3"><li>乘法：<code>numpy.multiply(x, y)</code>，对应元素相乘。</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(np.multiply(x, y))  <span class="comment"># Output: array([ 4, 10, 18])</span></span><br></pre></td></tr></table></figure><ol start="4"><li>除法：<code>numpy.divide(x, y)</code>，对应元素相除。</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(np.divide(x, y))  <span class="comment"># Output: array([0.25, 0.4 , 0.5 ])</span></span><br></pre></td></tr></table></figure><ol start="5"><li>幂运算：<code>numpy.power(x, y)</code>，对应元素做幂运算。</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(np.power(x, y))  <span class="comment"># Output: array([  1,  32, 729], dtype=int32)</span></span><br></pre></td></tr></table></figure><ol start="6"><li>平方根：<code>numpy.sqrt(x)</code>，计算数组各元素的平方根。</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(np.sqrt(x))  <span class="comment"># Output: array([1.        , 1.41421356, 1.73205081])</span></span><br></pre></td></tr></table></figure><ol start="7"><li><p>三角函数，如 numpy.sin(x)、numpy.cos(x)、numpy.tan(x)等。</p></li><li><p>指数和对数，如 <code>numpy.exp(x)</code>、<code>numpy.log(x)</code>、<code>numpy.log10(x)</code>等。</p></li></ol><h5 id="随机数生成"><a href="#随机数生成" class="headerlink" title="随机数生成"></a>随机数生成</h5><ol><li><code>numpy.random.rand(d0, d1, ..., dn)</code>: 生成一个给定形状的数组，数组中的值均匀分布在[0, 1)中。</li></ol><p>示例：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="built_in">print</span>(np.random.rand(<span class="number">3</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><ol start="2"><li><code>numpy.random.randn(d0, d1, ..., dn)</code>: 返回一个由d0, d1, …, dn确定的形状的数组，数组中的值来自标准正态分布。</li></ol><p>示例：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="built_in">print</span>(np.random.randn(<span class="number">3</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><ol start="3"><li><code>numpy.random.randint(low, high=None, size=None, dtype=&#39;l&#39;)</code>: 返回随机整数，范围区间为[low, high)，high默认为None。</li></ol><p>示例：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="built_in">print</span>(np.random.randint(<span class="number">2</span>, size=<span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(np.random.randint(<span class="number">1</span>, size=<span class="number">5</span>))</span><br><span class="line"><span class="built_in">print</span>(np.random.randint(<span class="number">5</span>, size=(<span class="number">2</span>, <span class="number">4</span>)))</span><br></pre></td></tr></table></figure><ol start="4"><li>numpy.random.random(size=None)`: 返回随机的浮点数，在半开区间 [0.0, 1.0)。 </li></ol><p>示例：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="built_in">print</span>(np.random.random())</span><br><span class="line"><span class="built_in">print</span>(np.random.random((<span class="number">5</span>,)))</span><br><span class="line"><span class="built_in">print</span>(np.random.random((<span class="number">2</span>, <span class="number">2</span>)))</span><br></pre></td></tr></table></figure><ol start="5"><li><code>numpy.random.choice(a, size=None, replace=True, p=None)</code>: 从一个给定的一维数组中生成随机数。</li></ol><p>示例：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="built_in">print</span>(np.random.choice(<span class="number">5</span>, <span class="number">3</span>))  <span class="comment"># 从0到4中随机选择3个数</span></span><br></pre></td></tr></table></figure><p>注意：为了获得可重复的结果，我们可以使用<code>numpy.random.seed()</code>函数设置随机数种子。</p><h6 id="蒙特卡洛模拟"><a href="#蒙特卡洛模拟" class="headerlink" title="蒙特卡洛模拟"></a>蒙特卡洛模拟</h6><p>这是一个使用NumPy进行蒙特卡洛模拟的例子。在这个例子中，我们将使用蒙特卡洛模拟来估计圆周率π的值。</p><p>基本思想是这样的：我们在一个边长为1的正方形内随机撒点，然后计算落在1/4圆内（半径为1）的点的数量。由于圆的面积是πr²，正方形的面积是1，所以落在1/4圆内的点的数量除以总的点的数量，大约等于π/4。</p><p>以下是Python代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义模拟的次数</span></span><br><span class="line">n = <span class="number">1000000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在[0, 1)区间内随机生成n个点的x和y坐标</span></span><br><span class="line">points = np.random.rand(n, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算这些点到原点的距离，然后判断这些距离是否小于1（也就是判断这些点是否落在1/4圆内）</span></span><br><span class="line">inside_circle = np.<span class="built_in">sum</span>(np.square(points).<span class="built_in">sum</span>(axis=<span class="number">1</span>) &lt; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#估计π的值：落在1/4圆内的点的数量除以总的点的数量，然后乘以4</span></span><br><span class="line">pi_estimate = <span class="number">4</span> * inside_circle / n</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;π的估计值为：<span class="subst">&#123;pi_estimate&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这个代码运行后，会打印出一个π的估计值，这个值应该会接近真实的π值（3.14159…）。随着模拟次数n的增加，这个估计值会越来越接近真实的π值。</p><h3 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h3><h3 id="网络爬虫"><a href="#网络爬虫" class="headerlink" title="网络爬虫"></a>网络爬虫</h3><h3 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Python&quot;&gt;&lt;a href=&quot;#Python&quot; class=&quot;headerlink&quot; title=&quot;Python&quot;&gt;&lt;/a&gt;Python&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="编程语言" scheme="https://kalyan-zitiu.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Study Note" scheme="https://kalyan-zitiu.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Study-Note/"/>
    
    
    <category term="Python" scheme="https://kalyan-zitiu.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>HumanSystemOptimization</title>
    <link href="https://kalyan-zitiu.github.io/2023/08/31/%E4%BA%BA%E4%BD%93%E8%B0%83%E4%BC%98/"/>
    <id>https://kalyan-zitiu.github.io/2023/08/31/%E4%BA%BA%E4%BD%93%E8%B0%83%E4%BC%98/</id>
    <published>2023-08-31T14:00:00.000Z</published>
    <updated>2023-08-31T12:37:27.041Z</updated>
    
    <content type="html"><![CDATA[<p>UPDATE: 鉴于文章比较长，很多同学没有耐心读完，后续也分享录制了一个 <a href="https://www.bilibili.com/video/BV1EW4y1R7yi/">视频版</a>，基本涵盖了文章里的大部分内容。</p><p>另外在健康生活实践方面，也提供一个极简版的基础列表，供大家参考：</p><ul><li>保持睡眠时长与质量。</li><li>不要吸烟。</li><li>尽可能每天做点运动。</li><li>减少糖分的摄入。</li></ul><p>能做到这四点，就已经可以达到一个还不错的健康状态了。剩下的可以根据各自的身体状况再来做补充调整。</p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>去年 5 月曾经写了一篇文章介绍了下 <a href="https://zhuanlan.zhihu.com/p/371254789">Lex Fridman 大佬的日常生活安排</a>，后续我也根据他的方法对自己的日常生活做了一系列规范和改进。这一年整体实行下来，效果还是非常显著的，本文的最后会对我的一些实践以及借助的工具做一些分享。</p><p>最近几个月，偶然在油管上看到了个 <a href="https://youtu.be/2ekdc6jCu2E">Rich Roll 采访 Andrew Huberman 的 podcast</a>，介绍了如何提升我们日常工作，学习表现的相关神经科学原理与可以利用的“工具”，瞬间打开了一扇新世界的大门。后续又一连追了好几集 Huberman 自己的 podcast，从各个方面了解了一下跟我们日常生活，健康，学习，工作，锻炼等方面相关的知识。与其它很多讲“养生”的文章和视频最大的区别在于，Huberman 本身是斯坦福的神经科学教授，其中讲述的内容都是<strong>来自于高质量，peer reviewed 的科学研究成果</strong>，从机体工作原理出发，非常细致地介绍了相关的实验和结论，并给出了很多实操建议（很多都是零成本，不是搞推销的……）。</p><p>通过一系列的学习，逐渐有种学习了各种人类的“组成和操作原理”的感觉。通过一系列的工具和实践，我们也可以<strong>像调优软件程序那样来“调优”我们自身的人体系统</strong>。这篇文章就来介绍一些相关的知识内容。注意，原版的 podcast 中有非常多专业性的阐述，在这篇文章中基本都去掉了，尽量以故事性的描述来讲解，相对会比较好理解。当然准确性也会因此有所下降，如果希望获取更专业的内容，强烈建议观看 <a href="https://hubermanlab.com/">原版的 podcast 内容</a>。</p><h1 id="睡眠"><a href="#睡眠" class="headerlink" title="睡眠"></a>睡眠</h1><p>如果你想要获得健康，更好的工作学习状态，提升生理健康如免疫，新陈代谢，以及心理健康如更好的心情，专注能力等，最最重要的前提是拥有一个良好的睡眠。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>睡眠最重要的控制机理是我们内在的生物钟。随着生物钟的影响，我们体内的各类化学物质会发生变化，体温也随之改变，会影响我们的各种内在状态和外在行为。Huberman 教授很形象地描述了这个“生物钟”的具体作用方式：在早上，身体释放的皮质醇（cortisol）和肾上腺素（aderenaline）会让我们醒来，同时还会设定松果体释放褪黑素的倒计时钟，会在十多个小时之后让我们感到困意再次入睡。</p><p>影响这个生物钟的最大因素是光照。我们的眼睛除了能够看到东西，另外一个重大的作用就是<strong>通过黑视素神经节细胞来接收光照信息，用以设定我们的内在生物钟</strong>。这也是为什么有时候我们通宵工作之后，虽然已经持续很久时间没有睡眠了，但随着太阳升起，整体的生物钟被设定到了类似起床时的状态，各类化学物质的释放会让我们突然感觉又有精神了。后续很多最佳实践里也都跟这个原理相关，我们需要控制自己接收光照的时间点，类型和时长。</p><p>此外，<strong>体温也是一个用于控制我们生物钟的手段</strong>。一般来说我们的体温会从深睡眠中比较低的状态逐渐升高，到醒来后持续上升。到了一天的后半段会开始逐渐下降，直到再次进入睡眠。</p><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p>基于上面的原理，Huberman 教授提供了一系列提升睡眠的最佳实践：</p><ul><li>皮质醇的释放与接触阳光有关，因此如果想尽快醒来且保持日间良好的精神状态，<strong>起床后应该到外面去接触阳光，持续 2-10 分钟</strong>。这对于血压控制，心理状态，设定睡眠的“倒计时钟”等都有很大好处。户外日光的效果最好，如果是人造光源，蓝光的效果会比较好，且最好是上部（天空的位置）的光源。根据光照强度推算，隔着窗户接收日光的强度会降低 50%以上，而达到同样效果所需要的光照时间则需要 50 到 100 倍。有意思的是，这一点对于视障人士也有效，因为前面提到的黑视素神经节细胞并不是用于视觉成像的细胞。</li><li>对应的，<strong>在晚上要尽量减少光源的接触</strong>，因为这会扰乱我们的生物钟，让身体系统误以为是在白天。尤其是晚上 11 点到次日凌晨 4 点之间接收光源，会抑制后续几天的多巴胺的释放，影响心情，心理健康，专注度，学习能力，新陈代谢等等。关于多巴胺的作用和机理，后面会再单独介绍。</li><li>如果不可避免需要在晚上接触光源，处于较低位置，暗淡的红光，蜡烛之类的会相对好一些。如果要看电脑，建议使用 blue blockers 眼镜，这跟一些电脑软件会自动调节屏幕色温的效果可能类似。</li><li>傍晚观察落日，对于后续入睡也有帮助，甚至能减轻晚上摄入光照的负面影响，有点神奇。</li><li>人一天中的精神状态一般会在中间有个短暂的低谷，所以午睡对于有些人可能是有帮助的。也可以用一些其它的非睡眠深度休息的方式来替代，如 <a href="https://youtu.be/M0u9GST_j3s">Yoga Nidra</a>，<a href="https://www.headspace.com/">冥想</a>，<a href="https://www.youtube.com/c/MichaelSealey">自我催眠</a>（可以利用一些 App，如 Reveri）等。</li><li>体温对生物钟周期的影响：<ul><li>早上洗冷水澡，会让人快速升温，从而把睡眠周期往前移（早起）。</li><li>晚上锻炼身体，会让人保持高体温，从而延后周期（晚睡）。</li><li>可以选购一些自动控制体温的智能床垫来提升睡眠质量。</li></ul></li><li>一般建议的锻炼时间：醒来后 30 分钟，3 小时和 11 小时这三个时间点。不过总体来看好像影响度比较小。</li><li>饮食和药物因素：<ul><li>咖啡因会占据腺苷（adenosine）的受体，阻断入睡的信号。有不少文章都提到中午之后尽量不要喝咖啡，但 Huberman 表示没有科学实验表明咖啡因对所有人的效果是一样的，得根据自己的测试情况来。比如他自己在下午 5 点喝咖啡也能正常入睡。</li><li>镁，对入睡有帮助。</li><li>芹黄素也能帮助入睡，但要注意对雌性激素的影响。</li><li>建议不要摄入太多牛磺酸。</li><li>不建议通过摄入褪黑素来帮助入睡，褪黑素药物本身的规格把控不严格，且褪黑素容易引起抑郁情绪。</li><li>中午可以吃低卡路里以及含酪氨酸的食物，如坚果，大豆，部分蔬菜等，提升多巴胺，肾上腺素，保持清醒。</li><li>晚上则可以吃点淀粉，白肉等富含色氨酸的食物，进而转化为血清素，会让人更加平静，容易入睡。</li></ul></li><li>对于绝大多数人，6-8 小时的睡眠时长是比较健康的。</li><li>对于各类药物的检索可以参考：<a href="https://examine.com/">examine.com</a>。</li></ul><h1 id="饮食"><a href="#饮食" class="headerlink" title="饮食"></a>饮食</h1><p>在前面 Lex 的分享中，提到了他采取了生酮饮食以及 fasting（禁食）的习惯，这引起了我对于饮食习惯的注意。Huberman 教授正好也有几个 podcast 介绍了 fasting，肠道健康等话题，很有意思。</p><h2 id="Fasting-的背景"><a href="#Fasting-的背景" class="headerlink" title="Fasting 的背景"></a>Fasting 的背景</h2><p>我们可以把身体跟进食相关的化学状态分成 2 类：</p><ol><li>吃饱了的状态，也就是血糖含量较高的状态。此时我们身体会更活跃地进行体内细胞的复制与成长。</li><li>禁食的状态，也就是血糖含量较低的状态。此时我们的身体会更活跃地进行体内细胞的修复与清理（autophagic）。</li></ol><p>由于睡眠时我们天然是不吃东西的，所以一般来说睡眠中的一部分时间会使我们处于禁食状态，饮食时间的选择实际上就是在控制上述两个状态的持续时间和平衡关系。比较有意思的是世界上很多民族文化和宗教中，都有一些跟禁食相关的习俗，甚至会持续很多天。</p><p>在 2012 年，科学家开始对小白鼠做实验，把他们分成两大组，一组可以在一天中的任何时间吃东西，而另一组只能在固定的 8 小时里吃东西。在大组里再区分小组，给小白鼠吃健康的和不健康的食物。结果发现，只能在 8 小时里吃东西的小白鼠们，即使吃的是不健康的高脂肪食物，他们的健康水平仍然得到了保持甚至提高，相比所有不做限制的组都有明显的提升。</p><p>这个研究震动了学术界，后续又有非常多的针对人类，不同性别，不同年龄，不同职业（包括运动员）的各种实验与论文发表，科学家们发现这种<strong>间歇性禁食状态对于身体有非常多的好处</strong>，包括：促进肝脏健康，胆汁酸代谢，炎症自愈，保持体重，提升 brown fat 储备（对健康有益），防止非酒精性脂肪肝，血糖控制，肠道健康等等。如果养成间歇性禁食的习惯 60 天以上，还会让我们的身体倾向于代谢脂肪来供能，控制体重。</p><p>因此，Huberman 教授指出，<strong>何时进食，与吃什么东西，其实是同等重要的</strong>。这个研究也让很多学术界的研究人员自己也都养成了 fasting 的习惯，包括 Huberman 自己。</p><h2 id="Fasting-的实践"><a href="#Fasting-的实践" class="headerlink" title="Fasting 的实践"></a>Fasting 的实践</h2><p>由于长时间的禁食难度较大，所以绝大多数的研究都专注于间歇性禁食，也就是 intermittent fasting。简单来说就是跟前面的小白鼠实验一样，在一天的固定时间段来吃东西（跟睡眠周期对齐），而其它时间段都不摄入任何食物的做法。这里简单整理为基础和高阶两个版本：</p><ul><li>基础：如果想享受 fasting 的基础收益，最简单的执行原则是<strong>起床后至少 1 小时内不要吃东西，同时睡前的 2-3 小时不要吃任何东西</strong>。</li><li>高阶：目前研究结果中<strong>最理想的进食窗口是 8 小时</strong>，结合社会习俗等，一般比较合理的时间在 10-18 点或 12-20 点的范围。看起来<strong>不吃早饭并不是什么坏事</strong> :)</li><li>作者特地温馨提醒，如果想通过健身来增肌，建议可以把这个时间窗口往前移，因为早上摄入蛋白质会对肌肉增长有益。而健身的时间可以自由选择。</li><li>尽量<strong>保证这个窗口时间的稳定性</strong>，也非常重要。否则就跟频繁倒时差产生的效果差不多，会打不少收益折扣。</li><li>如果想尝试高阶 fasting，建议逐渐切换进食习惯，例如每两天缩短 1 小时的进食窗口，逐渐达到理想的 8 小时。</li></ul><p>值得注意的是，这里说的不吃任何东西，并不是说连水也不能喝。从前面的背景可以看到，是否处于禁食状态，主要依据是血糖水平，因此：</p><ul><li>喝水，茶，咖啡（不加牛奶）等，并不会中断禁食。但一勺糖的摄入就会中断。</li><li>晚饭后想尽快进入禁食状态，可以做一些轻量运动，比如散步等，加快血糖清理。</li><li>二甲双胍，黄连素（berberine）等可以直接促进血糖清理。肉桂皮，柠檬汁，也能轻微降低血糖。</li></ul><p>最后，如果禁食期间觉得有些头晕，颤抖，并不需要立刻进食或摄入糖分。可以喝一点盐水（可以加柠檬汁），一般就能很好的缓解症状。这让我想起 Lex 会提到了会服用药片来补充各种电解质元素，比如钠，镁，钾等。</p><h2 id="饮食与消化道健康"><a href="#饮食与消化道健康" class="headerlink" title="饮食与消化道健康"></a>饮食与消化道健康</h2><p>由于我个人的肠胃功能比较差，所以也特别关注了一下消化道健康的话题。Huberman 邀请了一位非常知名的微生物学家 Sonnenburg 来介绍肠胃微生物群落与我们的健康之间的关系，也是学到了很多新的知识：</p><ul><li>肠道的微生物群不仅影响消化系统的健康运作，<strong>对人体的免疫系统也起到了非常关键的因素</strong>。</li><li>婴儿出生，成长的方式会形成非常不同的肠道菌群生态。暴露在微生物环境中（但要注意会引起疾病的情况），对于维持菌群环境是有益的，比如家里养宠物，让孩子自由玩耍等，不需要过度清洁与消毒。</li><li>什么是健康的肠道菌群生态，目前没有一个标准的结论。不过总体来看，<strong>菌群的多样性程度高，一般就表示更加健康</strong>。</li><li>抗生素会严重破坏肠道菌群生态，需要谨慎使用。</li></ul><p>在访谈中，两位重点讨论了一个实验，就是什么样的饮食方式会让我们更好的维持肠道菌群的多样性和健康。实验主要对比了两种附加饮食：</p><ul><li>高纤维食物：全谷类，豆类，蔬菜，坚果。这也是传统上被认为非常健康的食物，其中很多纤维的分解都需要肠道菌群的帮助，换句话说，纤维就是它们的“食物”。</li><li>发酵类食物：酸奶，牛奶酒（kefir），康普茶，酸菜，泡菜，纳豆等。注意需要是自然发酵，一般是冷藏且非罐装的食品。而且像酸奶这类要格外注意不要加糖等添加剂。</li></ul><p>实验的结果也颇令人意外：</p><ul><li>摄入发酵类食品的组，显著提升了肠道菌群的多样性。被试者<strong>几十个免疫标志物的显著降低，对各类炎症都有更好的抑制作用</strong>。没想到吧，肠道菌群还能调节炎症。</li><li>肠道菌群本来的多样化程度比较高的人，摄入高纤维食物是有帮助的。如果不是，则摄入高纤维食物的帮助不大。在工业化进程中，人类的进食习惯已经有很多代都转变为了摄入大量肉类，加工食品等，肠道菌群的生态无法仅通过提高纤维食物的量来改变其族群结构。</li></ul><p>此外在访谈中，两位还讨论了具体食谱推荐的问题，引用了 <a href="https://youtu.be/sJLK3sVexIk">Christopher Gardner 关于生酮饮食与地中海饮食比较的研究</a>。这里总结一下实践建议：</p><ul><li><strong>如果要改善肠道菌群生态，最好的方式是一天两次摄入天然发酵类食品</strong>。</li><li>高纤维食物对于肠道菌群生态的维护是有益的，建议日常饮食以植物类食物为主，尽量避免深度加工食品的摄入，控制糖的摄入。Sonnenburg 教授还讲了个故事，说微生物学家参加的会议，一般餐厅的沙拉吧总是会供不应求 :) 前面提到的 Rich Roll 大佬也是个素食者。</li><li><strong>益生菌的效果没有广泛研究支持</strong>，且这类产品的监管很有限。<strong>益生元的效果也是好坏参半</strong>，缺乏多样性，溶解速度太快等问题都使总体效果存疑。</li><li>地中海饮食相比生酮饮食来说对健康的影响效果接近，但更容易坚持遵循。另外生酮饮食如果长期实践可能有一定的风险。所以<strong>总体更推荐地中海饮食结构</strong>。</li></ul><p>另外值得参考的是我们也有官方的 <a href="https://sspai.com/post/72984">中国居民膳食指南</a>，或许更适合东方人的饮食习惯。</p><h1 id="心态与动力"><a href="#心态与动力" class="headerlink" title="心态与动力"></a>心态与动力</h1><p>这一部分主要介绍的是人体的多巴胺系统原理，以及如何利用它来形成健康，自律的生活方式。这一集是 Huberman 开播以来播放量最高的一集，对于强健我们的心智有着非常好的指导作用。</p><h2 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h2><p>多巴胺是一种非常重要的化学物质，主要作用于两个神经回路：一个影响身体的运动，例如帕金森病与多巴胺的分泌不足有关；另一个则影响我们的动机，欲望与快乐，这几乎与我们从事的各种活动有关，无论是工作，学习还是社交，休闲娱乐。这里我们会主要讨论多巴胺的后者影响能力。我们为什么会“放弃”，实际上是由于在不安，压力，沮丧等情绪作用下，身体内的去甲肾上腺素水平不断提升，当超过一定阈值时，神经系统中的认知控制就会关闭，我们就放弃了。多巴胺能够抑制去甲肾上腺素作用，从而持续“激励”我们前行。</p><p>神经系统中多巴胺含量水平的高低会影响我们的情绪，当多巴胺水平低时，我们会感到情绪低落，没有动力，而多巴胺水平高时，我们会感到兴奋和快乐。在通常情况下，我们的身体处于多巴胺 baseline 的状态，当我们达成一些令人兴奋的目标（比如玩游戏胜利，考试拿高分）后，多巴胺的水平会达到一个高峰，此时我们就会获得巨大的愉悦感。在高峰之后，多巴胺水平会回落到比 baseline 更低的一个水平，且这个状态会持续一段时间。</p><p>这里有两个非常重要的原理：</p><ul><li>多巴胺绝对值含量的高低只是一方面，<strong>更重要的是其“相对变化量”的多少</strong>。比如在刷抖音时看到了一个很有趣的视频，多巴胺水平升高，你会感到快乐，刷到下一个视频时，你感到的快乐程度好像不会那么强烈了，因为多巴胺已经在一个比较高的水平，难以形成更大的变化量。而同样的视频，如果你是几天之后看到，或许你会觉得有意思的多。所以<strong>当你持续做一件喜欢的事情时，你感受到快乐的阈值也会不断提高</strong>。</li><li><strong>多巴胺的总体“储备”是有限的</strong>！也就是说无论你是通过学习，工作，娱乐，社交，运动等不同方式来获得快乐，所消耗的“快乐货币”都是同一种：多巴胺。举几个例子来看下这个原理带来的影响：<ul><li>很多自律的人都会说自己是 work hard，play hard 的生活方式，比如工作日通过高强度的工作来获得成就和满足感，休息日进行各种休闲娱乐，运动，社交等方式来获得快乐，其实背后都是在释放多巴胺来获取快乐。长期持续，我们身体的多巴胺 baseline 会逐渐下降，出现一种耗尽（burn out）的心理感觉，对很多事物无法保持之前的兴趣与精力。</li><li>很多人会对玩电子游戏着迷，因为它们能带来巨大的多巴胺释放刺激让人感到快乐。但要意识到，多巴胺的储备是有限的，如果对此上瘾，你的多巴胺耗尽问题就会变得非常严重：一方面能够引起你兴趣的事物会变少，可能只有玩游戏才能带来快乐；另一方面，后续甚至会导致玩游戏本身也无法触发多巴胺释放，引起严重的抑郁问题。</li></ul></li></ul><p>另外，<strong>多巴胺也具有叠加效应</strong>。比如你喜欢健身，那么运动就会刺激多巴胺的释放。而我们实际去健身时，可能会不自觉地安排了很多其它的“快乐因素”，比如选一个精神状态比较好的日子，运动前喝一些能量饮料，跟认识的朋友一起去，边健身边 social，听一些自己喜欢的音乐或 podcast，等等。这些因素也都会促进多巴胺的释放，让你感到“前所未有的快乐”。但要注意前面的原理，多巴胺的高峰越高，后面随之而来持续的低谷也会越长，而且长此以往，可能会降低你单纯从运动中获取快乐的能力。这样的例子还有很多，比如边跟朋友吃饭，边玩手机，拍照发朋友圈，可以计算一下叠加了几种快乐因素 :)</p><h2 id="影响多巴胺的外界因素"><a href="#影响多巴胺的外界因素" class="headerlink" title="影响多巴胺的外界因素"></a>影响多巴胺的外界因素</h2><p>我们来看下具体影响多巴胺释放的各类因素有哪些，首先是促进多巴胺分泌的：</p><ul><li>巧克力，提升到 1.5 倍的多巴胺 baseline</li><li>性行为，提升到 2 倍</li><li>尼古丁，提升到 2.5 倍</li><li>可卡因，提升到 2.5 倍</li><li>安非他命，提升到 10 倍</li><li>咖啡因本身只会少量提升多巴胺，但它会抑制一些多巴胺受体，提升同等多巴胺造成感受的效果</li><li>马黛茶，包含咖啡因，能控制血糖，还能保护多巴胺神经元</li><li>刺蒺藜豆也能提升多巴胺（基本等同于 L-DOPA），还能提升男性精子数量和质量</li><li>运动，带有主观成分，喜欢跑步的人，可以提升到 2 倍 baseline</li><li>健康的社交关系也会促进多巴胺释放</li></ul><p>食物方面感觉 Huberman 教授<strong>非常推荐马黛茶</strong>。</p><p>也有很多提升多巴胺释放或影响其效果的药物：</p><ul><li>L-Tyrosine（酪氨酸），提升多巴胺</li><li>Phenethylamine（PEA），巧克力中也包含，能够提升多巴胺</li><li>Huperzine A，提升多巴胺</li><li>各种“聪明药”，如 Adderall, Modafinil, Alpha-GPC, Ginkgo 等，留学党应该很多都有耳闻</li></ul><p>通常来说，<strong>不推荐持续使用这些药物</strong>，因为多巴胺释放之后的高峰会带来 baseline 水平的降低，导致无法享受活动的快乐，无法专注，限制学习能力和神经元可塑性等。Huberman 表示<strong>一周使用一次的频率应该是安全的</strong>。</p><p>最后还有一个比较特别的研究，就是<strong>冷水浴能够提升多巴胺释放到 baseline 的 2.5 倍左右</strong>，且持续时间更长，能达到 3 小时左右。建议使用 10-14 摄氏度的水温，注意安全。此外冷水浴也不需要太频繁，每周 11 分钟左右足够。如果已经习惯了冷水浴，那么也就没有释放多巴胺的效果了。</p><p>还有一些因素会降低多巴胺，如：</p><ul><li><strong>褪黑素，会引起多巴胺的减少</strong>。前面也提到过并不建议使用褪黑素来帮助入睡，或者适应时差等。</li><li>睡眠时段接触光源，也会引起接下来几天的多巴胺水平下降。<strong>半夜睡不着刷手机是很有害的哦</strong>。</li></ul><h2 id="维持健康的多巴胺水平"><a href="#维持健康的多巴胺水平" class="headerlink" title="维持健康的多巴胺水平"></a>维持健康的多巴胺水平</h2><p>了解了原理和各种影响因素后，我们来看下如何有效设计我们的生活工作方式来维持健康，可持续的多巴胺水平。</p><p>简单回顾一下，前面我们已经知道了多巴胺储备有限，且对一件事物上瘾会不断提高感受快乐的阈值，那么如何让我们能对一件事情保持长时间的兴趣和投入度，又不至于耗尽多巴胺呢？一个经典的例子是赌场的运作方式，我们并不是每一次下注都能赢，偶尔赢一次会释放多巴胺，而且根据赢得钱的多少有所上下浮动，这会吸引玩家持续参与。这就是一种非常有效的<strong>间歇性且随机的奖励机制</strong>。感觉很多游戏，社交网络产品也借鉴了这个思路来进行设计。</p><p>对于我们经常需要从事的活动，我们也可以模拟这个机制。还记得前面提到的<strong>多巴胺叠加效应</strong>吗？我们可以<strong>通过随机化叠加因素的多少，来实现多巴胺释放的差异性</strong>。还是以健身为例，我们可以随机决定今天是否要听音乐，是否去健身时带手机，是否要在健身前喝能量饮料等因素。如果其它什么都不做，只是单纯健身，那么多巴胺的释放量就会相对较低。如此就能模拟多巴胺释放有高有低的随机奖励机制。</p><h2 id="成长型思维"><a href="#成长型思维" class="headerlink" title="成长型思维"></a>成长型思维</h2><p>最后来看下如何构建良好的思维方式来利用多巴胺系统提升自我。</p><p>有一个非常知名的实验，挑选了一群天生喜爱画画的小朋友，在他们完成画作后给与一些奖励。后面在移除这些奖励后，小朋友们对于画画的兴趣和动力大大降低了。这个实验说明，当我们因为一个活动收到奖励（比如金钱，美食等）时，我们<strong>反而会降低活动本身的愉悦程度</strong>。而且多巴胺本身影响我们对时间的认知，同时也影响我们的情绪状态，如果我们<strong>始终以完成活动后的奖励为目标，则整个过程中就很少释放多巴胺，让原本困难的过程变得更加难以坚持</strong>。</p><p>仔细想一下，这是一个非常有意思的观察。多巴胺有点像我们的“本能系统”，决定了我们是否有动力做一件事。但反过来<strong>我们的主观思想却可以影响这个系统起作用的方式</strong>，这也是人类为何能摆脱动物本能，达成很多需要“反人性”的投入才能取得的成就的原因吧。上述的实验是我们的主观思想造成的一个反面作用的例子，我们自然也可以实现正面作用，那就是成长型思维。</p><p>具体来说，就是<strong>通过自我暗示，把努力过程本身当作一种“奖励”</strong>。我在努力学习，这个过程本身就是有趣的，会让我不断变得更强，这样的想法会在过程中激发身体系统释放多巴胺，而多巴胺提升了我们的情绪和动力水平，也会让努力的过程中碰到的困难变得相对容易克服。专注于这个过程的本身，而不是在过程前进行各种外界刺激（如前面提到的药物），或者在过程后给自己巨大的奖励。</p><p>这种思维方式看起来很主观，但这就是我们的神经系统工作的方式，虽然人类的“硬件系统”都差不多，但知识，思维这些运行之上的“软件”却可以千差万别。<strong>我们可以通过自律，自我暗示来改变自身对各类活动的喜好</strong>。例如通过暗示 fasting 对我们健康的益处，来获取满足感，而不是借助于 fasting 结束后的大快朵颐。通过自律抵御高油盐食物的吸引力，并且自我暗示植物类食物对身体的好处，坚持一段时间，会觉得花椰菜也挺美味的。这也是为什么我们在这篇文章中介绍了很多原理性的内容，而不仅仅是行为建议。因为这些原理知识能够让我们做更好的自我暗示 :)</p><p>多巴胺系统中也有对我们认知成长造成“障碍”的运作机理。例如当我们接受到的信息支撑我们之前的信念时，也能够激发多巴胺的释放让我们感到快乐，这从本质上会改变我们对世界的认知。由此可见，“空杯心态”是多么难得的品质，网上如此多的争论无法达成共识也有很大一部分“归功”于此。如何克服神经系统中的这类缺陷呢？一种可能的方法是尽可能调节情绪，使自己处于镇静的状态（提升血清素水平），这样才能让自己更好的去倾听和吸收跟自己认知不一致的信息，更好地协同合作。</p><p>这一节的 podcast 对我本人的冲击非常大，强烈建议大家观看这期 <a href="https://hubermanlab.com/controlling-your-dopamine-for-motivation-focus-and-satisfaction/">Mindset &amp; Drive</a>，相信也会有不同的收获。</p><h1 id="学习与专注"><a href="#学习与专注" class="headerlink" title="学习与专注"></a>学习与专注</h1><p>在了解了多巴胺的运作机制基础上，我们可以继续探究一些跟大脑健康，专注度，如何进行高效学习相关的话题。</p><h2 id="学习的原理"><a href="#学习的原理" class="headerlink" title="学习的原理"></a>学习的原理</h2><p>从脑神经科学来看，学习的本质是神经元的重新连接（rewire），进一步来看，需要大脑处在一种学习的化学状态下，也就是 Huberman 经常提到的神经可塑性（neuroplasticity）状态。要达到这个神经可塑性状态，有两个重要条件，一个是足够的专注度，另外一个是“犯错”的信号（后面会展开）。另外大脑一个比较有意思的机制是，在学习时的神经可塑状态下，乙酰胆碱会标记需要改变的神经元，而具体的神经元重连接则主要是在休息和睡眠时发生，是不是有点像 JVM 虚拟机的垃圾回收机制 :)</p><p>什么是犯错信号呢？当我们尝试做一些事情，但没有达到预期目标时，身体会给大脑发信号，“我犯错了”。处在这种犯错，沮丧的认知状态下，神经系统会释放肾上腺素（提升 alertness），乙酰胆碱（提升 focus），多巴胺（促进神经元的 change，rewire）等化学物质，激活神经元的可塑性。也就是说，<strong>犯错是我们进入学习状态的重要前提</strong>。搞机器学习的同学应该很熟悉了吧，这跟我们训练模型不是一模一样么 :) 另外很多人可能觉得心流（flow）状态是学习的最佳状态，而 Huberman 则不这么认为。<strong>心流是一种精神高度集中且接近于自动化的状态，是在做我们已经知道怎么做的事情，而不是在学习新的知识技能</strong>。</p><p>对于这个学习状态，经典的实验是给人们戴上一些能转变角度的眼镜，然后执行一些类似物体抓取的任务。由于看到的东西通过眼镜改变了其本来的位置，一开始在尝试时总会出现抓取动作的偏离。但后续在进入神经可塑性状态后，我们能逐渐适应相关的视觉偏移，协调自己的听觉，动作等都与之协同，顺利完成任务。更有意思的是，<strong>这个“神经可塑性”的化学状态是可以持续的</strong>，我们甚至可以先通过一些其它操作触发大脑的这个机制，再去进行真正的学习，以加快学习的速度。这里还有一个隐藏逻辑，当你在遇到挫折困难时，大脑进入了可塑性状态，而此时你却放弃了，那么<strong>神经元也会重新连接到这种容易放弃的行为模式，形成恶性循环</strong>。</p><p>人在年幼时期大脑天然的神经可塑性会比较好，而在 25 岁以后则会大大下降。我们后面会提到如何来进行克服。</p><p>另外，<strong>休息和睡眠时也会发生大量的神经元重连接的活动</strong>，这也是之前我们就提到过的，高质量的睡眠是实现很多生理，心理健康强壮的先决条件。</p><h2 id="利用神经可塑性"><a href="#利用神经可塑性" class="headerlink" title="利用神经可塑性"></a>利用神经可塑性</h2><p>如果正在阅读文章的你还未满 25 岁，那么恭喜你，你的神经可塑性仍然非常的好，可以<strong>尽可能广泛的学习各种知识和技能</strong>。比如你可以很快学会各种乐器，新的语言，新的运动，新的专业技能等等。通过更广阔领域的体验接触，尽量找到你最有兴趣的方向，可以后续再不断深入经营。</p><p>如果已经像我一样超过了 25 岁，那么还有很多办法来提升神经可塑性：</p><ul><li>通过实验发现，<strong>成年人对于小幅度的增量学习是完全可以适应与掌握的</strong>。例如每次视觉上的偏差只有 7 度，而不是一下子就来个 180 的大颠倒，那么成年人也能很快从错误中学习纠正。应用到实际学习中，我们每次学习的内容可以控制一下不要太多（本文有点违反了，建议收藏慢慢学习），多次积累来完成神经系统的调整学习。</li><li>对于达成目标的渴求度越高，重要性越大，奖励的刺激越大（比如为了生存），则神经可塑性就会越容易出现。这个比较符合直觉，但是现实中可操作性可能不高。</li><li>第三点最有意思，<strong>通过扰乱前庭神经系统（vestibular system），能够达到神经元可塑性的状态</strong>。简单来说，就是让你的身体有一些“新颖的重力体验”，如倒立，瑜伽，体操，滑板，任何让身体会失去平衡的一些状态等，会快速激发“我犯错了”的信号，进入学习状态，甚至可以在之后去做别的任务的学习。这一下子就让我想到了<strong>淘宝成立初期的“倒立文化”，没想到还真的有科学依据</strong>。需要注意的是，这个体验必须要新颖，也就是说如果你已经倒立很熟练了，那么去做倒立就是个日常行为，并不会给身体一种在犯错边缘，需要纠正的刺激。</li></ul><p>Huberman 认为，大脑的主要功能链路是感知，认知，情感，思想，行动。在尝试控制我们的神经系统来进行各种任务时（例如学习，解决困难问题，挑战运动极限），我们是很难用精神思想来控制其本身的（比如不断跟自己说我不能分心），更可行的办法是“逆向链路”，从我们的行动出发，利用神经系统的运作原理，逐渐影响思想，情感，认知甚至感知部分。这也是 Huberman 非常推崇各种“行动工具”的原因。Mood follows action。</p><h2 id="学习的理想状态"><a href="#学习的理想状态" class="headerlink" title="学习的理想状态"></a>学习的理想状态</h2><p>除了神经可塑性的化学状态外，我们也需要注意其它的因素。例如我们<strong>不能太放松以至于有些昏昏欲睡，也不能太紧张激动，无法控制自己拥有清晰的思考</strong>等。这些也都跟我们体内的多巴胺，肾上腺素，乙酰胆碱，血清素，褪黑素等化学物质的水平有关，需要做好调节。在之前 Rich Roll 的访谈节目中，Huberman 提了一个非常有效的“呼吸工具”，叫<strong>生理叹息</strong>（Physiological Sigh）。操作方法上简单来说就是吸两口气，然后出一口长气。通常情况下，只要一两次生理叹息就足以使我们的压力和警觉水平迅速下降，让人感到更加平静，提升学习表现。</p><p>前面提到的成长型思维也很重要，在遇到错误导致的沮丧感觉时，可以不断增强自我暗示，失败是帮助我们学习成长的唯一路径，对我们是有益的，以此增加多巴胺的释放，提升学习动力和过程中的愉悦感。</p><p>联系到睡眠对学习的促进作用，也有一些研究提供了一些相关的 tips：</p><ul><li>在学习时听一些有规律的节拍，在入睡时也播放同样的微弱节拍，能够提升学习和记忆的效果。</li><li>一般在 90 分钟的学习后（人体生物钟的周期），可以选择进行 20 分钟的休息（non sleep deep rest），也会加强学习的效果。</li><li>Gap effect，在学习中随机停止 10 秒钟，这些停止会在睡眠中加速“播放”，提升学习效果。</li></ul><h2 id="提升专注"><a href="#提升专注" class="headerlink" title="提升专注"></a>提升专注</h2><p>“专注”背后的机理是大脑中两种“网络模式”的协调，一种叫 Default network，在我们不做任何事情时被激活，另一种叫 Task networks，在我们专注于做某些事情时被激活。普通人的大脑能够很好地协调这两个模式，两者像跷跷板一样，当一种模式被激活时另一种模式会被抑制。而具有专注障碍（比如多动症）的人来说，这两者无法很好地进行协调，因此会出现无法专注的现象。</p><p>通过提升多巴胺水平，可以有效促进这两种网络模式的协调，因此有非常多的多动症治疗药物都跟提升多巴胺有关，例如 <strong>Adderall，Modafinil</strong> 等。一些调查表明，这些药物（经常被称为聪明药，nootropics）在美国被滥用的程度甚至超过了大麻，不少“学霸”都以此来提升注意力，减少对睡眠的需求。但 Huberman 教授表示，一方面多巴胺的刺激提升后都会带来多巴胺水平的低谷，另一方面这些药物也可能导致上瘾，对新陈代谢作用造成扰动，有很多负面影响，<strong>对长期的学习与记忆效果可能并没有提升作用</strong>。在之前介绍多巴胺的章节也有提到，应该谨慎使用这类药物，并严格控制使用频率不能过高。</p><p>最好的提升专注的方法当然是前面聊过的更好的控制我们的多巴胺系统，例如把行动跟背后的意义相连接，给自己正面的心理暗示；将任务拆成多个小的里程碑，通过过程自身的激励来促进多巴胺的释放提升我们的专注度。此外一些安全有效的提升专注力的方法包括：</p><ul><li>适量补充 <strong>Omega-3 EPA 鱼油</strong>，这是神经细胞的组成原料之一，能够有效减轻抑郁，对治疗多动症（ADHD）也有帮助。</li><li><strong>通过身体其它部分释放运动，可以帮助提升注意力</strong>。教授举的例子是作为神经科医生在开刀时，如果采用半蹲半站的姿态（运动释放），拿手术刀的手更稳定不容易颤抖。这让我想起以前读书时很多同学习惯转笔，现在工作了也有不少人喜欢玩指尖陀螺，或者站立办公，可能都是类似效果。</li><li><strong>限制视野范围，能够提升专注度</strong>。比如我们经常因为眼睛瞟到了任务栏上的消息提示闪动而分心，可以通过一些设置来进入“专注模式”。</li><li>视线的高低也会影响神经状态，<strong>视线往下看会让神经系统偏向镇静，放松，甚至困倦，而视线向上则会让系统提升警惕</strong>。工作时一般至少把显示器放置在鼻子位置之上。</li><li>大脑不擅长处理大量频繁的 context switch，典型的比如刷抖音，不同的信息以非常快的速度频繁切换，这对我们的注意力是有伤害作用的。2014 年的一项研究表示，<strong>我们每天在手机上花费的时间应该少于 60 分钟（青少年）/120 分钟（成年）</strong>，以免引起注意力障碍问题。</li><li>还有研究表明，<strong>17 分钟的冥想，能够对大脑中的神经元做重新连接，永久地改善注意力</strong>。只要做一次就可以，完全可以尝试一下。</li></ul><h2 id="大脑健康"><a href="#大脑健康" class="headerlink" title="大脑健康"></a>大脑健康</h2><p>最后来看下提升大脑健康和效能的一些方法。</p><p>首先是前面提到过的，保证高质量的睡眠。</p><p>运动方面，<strong>对大脑直接帮助最大的是有氧运动</strong>，提升心肺功能，支持大脑供能。建议每周 150-180 分钟的有氧训练。</p><p>对于大脑健康有帮助的食物，其中前三点是比较重要的，后面的部分涉及的研究没有那么多：</p><ul><li><strong>Omega3, 尤其是 EPA 等脂肪酸</strong>，是大脑组成的重要部分，且一般人都容易摄入不足。多吃鱼，牡蛎，鱼子酱，奇亚籽，核桃，大豆。一天至少摄入 1.5 克，理想情况需要 3 克以上。不喜欢吃鱼的话可以辅助摄入鱼油。</li><li><strong>磷脂酰丝氨酸</strong>，也对认知能力有帮助。通过鱼，肉类，卷心菜来摄入。</li><li><strong>乙酰胆碱</strong>，重要的神经调质，提升注意力。摄入胆碱的重要来源是鸡蛋，尤其是蛋黄。土豆，坚果，水果中也含有，虽然没有蛋黄中的含量那么丰富。可以通过 Alpha-GPC 等补充剂来获取。</li><li>肌酸，尤其对于不吃肉的人，一天需要摄入 5 克左右。</li><li>花青素，在蓝莓，黑莓，葡萄等食物中有提供。可以降低 DNA 损伤，缓解认知下降等问题。大约每天需要 60-120 克蓝莓的补充。</li><li>谷氨酰胺，可以通过牛肉，鸡肉，鱼肉，鸡蛋，大豆，卷心菜，菠菜，芹菜等食物来摄取。提升大脑在缺氧（高海拔地区）下的表现，还能够抑制对糖的需求。</li><li>水，钠，钾，镁等电解质是神经元信号传递所需的基础元素，需要保证。</li></ul><p>这一节中还讨论了我们身体对各种食物喜好进行判断的三个渠道，前两个分别是味觉判断和营养成分的下意识判断。第三个比较有意思，也跟多巴胺有关，即我们可以<strong>通过提升大脑代谢的活跃度来增加对某种食物的喜好</strong>。比如你如果不喜欢吃鱼，一种方法是你可以把鱼跟你平时爱吃的食物一起吃，另一种是给自己足够的心理暗示，说服自己吃鱼是有益身体健康的。通过这两种办法，你都可以让大脑释放多巴胺，从而逐渐提升对鱼类食物的喜好程度。</p><p>最后，如果你对膳食补充剂感兴趣，还可以看看 <a href="https://www.thorne.com/u/huberman">Huberman 教授平时会吃的补充剂有哪些</a>。</p><h1 id="长寿"><a href="#长寿" class="headerlink" title="长寿"></a>长寿</h1><p>最后我们来看下如何延年益寿，这是 Huberman 跟这个领域的专家，来自哈佛的 David Sinclair 的一集访谈节目。</p><h2 id="衰老的本质"><a href="#衰老的本质" class="headerlink" title="衰老的本质"></a>衰老的本质</h2><p>Sinclair 认为，衰老是一种疾病，它本身导致了非常多通常意义上的疾病的出现，比如阿尔兹海默症，癌症等。我们可以通过科学的手段来“治疗”衰老，甚至逆转它。</p><p>从本质上来说，衰老是<strong>基因信息的损失</strong>，这分为两部分：</p><ul><li>DNA 本身的信息，比如细胞中的 DNA 结构会在辐射等情况下受到破坏。</li><li>控制哪些基因进行表达的信息受到了破坏，也就是所谓的表观基因组（epigenome）。这部分在衰老的因素中占了 80%。</li></ul><p>人体内有一个天然的“衰老时钟”，而且并不是以匀速走的。在年轻时我们的生长发育过程中，这个时钟走得更快。所以如果青春期发育比较迅速的人，一般来说整体的时钟走的比较快，寿命也会相对短，是不是有点吓人……而且，一般比较矮小的人，像侏儒很少会得心脏病，癌症，也会明显更长寿。不过不要紧张，前面提到了，基因本身的信息只占了衰老因素的 20%，<strong>控制基因表达这部分占了大多数</strong>。</p><p>这里有点意外的是 Sinclair 教授介绍的最重要的几个实验，都跟前面我们提到的 fasting 有关。比如一般老鼠的寿命大概是 2 年，他们实验室有一只叫 Yoda 的老鼠，活了足足 5 年。其主要的做法就是选取了侏儒基因，以及执行 fasting。</p><p>教授详细介绍了 <strong>fasting 为何能提升动物/人类 30% 以上的寿命</strong>：</p><ul><li>在低血糖水平时，身体会抑制哺乳动物雷帕霉素靶蛋白（mTOR），激活去乙酰化酶（sirtuin），形成一个非常良好的化学状态，清理旧蛋白质，提高胰岛素敏感度，提供更多能量，修复细胞等等。后面这个乙酰化酶是我们抵御衰老的一个重要武器。</li><li>当胰岛素水平低时，“长寿基因”会被激活，如 SIRT1 等。</li><li>fasting 会给细胞足够的“休息时间”。</li><li>血糖水平低，会让身体对胰岛素更敏感，更快吸收血糖，也对健康有益。</li><li>当你从来不感受饥饿时，你的衰老时钟也走的更快。</li><li>除了 24 小时周期 fasting 触发的 autophagic，还有更深层次的清理机制，会在禁食第二，三天启动。在老年老鼠上的实验表明，这种长时间的禁食可以让他们延长寿命 35%。不过这个实操难度对普通人来说有点大。</li></ul><p>Sinclair 也对比了一些上个世纪失败的研究，比如通过抗氧化剂来抵御衰老。现代长寿研究的核心思想是，如何<strong>通过一些机制手段来触发身体自身的衰老抵抗机制</strong>。</p><p>此外 Sinclair 也介绍了一些激动人心的前沿技术，例如<strong>通过基因治疗方法，可以重启我们的 DNA 表达系统</strong>。通过一次注射，可以让盲人恢复视力，这已经在老鼠身上得到了验证。或许几年后，我们可以像死侍那样实现身体各部分的逆转老化。</p><h2 id="抗衰老手段"><a href="#抗衰老手段" class="headerlink" title="抗衰老手段"></a>抗衰老手段</h2><p>先来总览看一下各种抗衰老的手段。</p><h3 id="饮食-1"><a href="#饮食-1" class="headerlink" title="饮食"></a>饮食</h3><p>包括食物结构和饮食控制。饮食控制方面前面有提到过，建议缩短进食窗口到 8 小时左右。饮食结构可以参考最新发表在 Cell 上的这篇文章 <a href="https://www.cell.com/cell/pdf/S0092-8674(22)00398-1.pdf">Nutrition, longevity and disease: From molecular mechanisms to interventions</a>。简单总结一下就是多吃植物类的蛋白（花生，藜麦，豆类，西兰花等），脂肪（橄榄油，坚果，牛油果等），减少精制碳水（白米饭，白面包，蛋糕，饼干等）；动物脂肪，动物蛋白质，糖这些总体来说是加速衰老的。</p><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/diet_for_longevity.png" alt="长寿饮食建议"></p><h3 id="体育锻炼"><a href="#体育锻炼" class="headerlink" title="体育锻炼"></a>体育锻炼</h3><p>有氧锻炼对心肺功能，血管健康等方面的促进对延寿很有帮助。力量训练也能持续保持我们的肌肉，关节，韧带的力量水平，支撑保护能力等，在年纪大时减少各种跌倒或者受伤的风险。一般建议是一周 3 小时左右的有氧运动，搭配 2 到 3 次的力量训练。有氧运动一般比较简单，跑步，骑车，游泳都可以。力量训练有一定的门槛，个人也最近正在学习一些入门训练方式。</p><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/workout_plan.png" alt="力量训练计划"></p><h3 id="药物"><a href="#药物" class="headerlink" title="药物"></a>药物</h3><p>药物方面的研究也非常多，不过绝大多数都还在人体实验的早期。具体可以参考发表在 Nature 上的这篇 <a href="https://www.nature.com/articles/s41573-020-0067-7">The quest to slow ageing through drug discovery</a>，总结了各种相关研究，其中就包括了著名的二甲双胍，NMN 等。</p><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/drugs_for_longevity.png" alt="长寿药物"></p><h3 id="细胞重编程"><a href="#细胞重编程" class="headerlink" title="细胞重编程"></a>细胞重编程</h3><p>前面也提到了基因表达是影响衰老最重要的因素，那么有没有手段来控制人体细胞的基因表达呢？著名的山中因子（Yamanaka Factors）给出了一种可能。山中伸弥团队发现的诱导方法是，通过慢病毒载体将 Oct4、Sox2、c-Myc、Klf4 四种转录因子基因转入成体细胞，将其转化为类似于胚胎干细胞的多能干细胞（iPS 细胞）。iPS 细胞与胚胎干细胞拥有相似的再生能力，理论上可以分化为成体的所有器官、组织，而这一点完美地对冲了由细胞衰减带来的人体衰老。听起来是不是非常的神奇？基于这些新技术也出现了很多主攻长寿领域的科技创新公司，如 <a href="https://www.lifebiosciences.com/">Life Biosciences</a>，<a href="https://altoslabs.com/">Altos Labs</a> 等，我们可以期待一下未来这些技术的普及应用。</p><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/cell_reprogramming.png" alt="山中因子"></p><h2 id="实践-1"><a href="#实践-1" class="headerlink" title="实践"></a>实践</h2><p>这里列出一些 Sinclair 自己的实践方式，如果想要采纳还是要结合自身的情况来看。有意思的是这集节目下有个热门留言是这个教授竟然已经 52 岁了，完全看不出来……所以你懂的。</p><ul><li>不吃早饭，午饭也吃的比较少，酸奶或者橄榄油，晚饭吃蔬菜为主，加鱼和虾，基本不吃牛排。不吃糖，甜品，面包。基本达到了 2 小时进食窗口的高阶 fasting 状态。他偶尔也会尝试一整天都不吃东西，但比较难坚持。</li><li>每天摄入 1 克的白藜芦醇（resveratrol），1 克的 NMN（进而会转化为 NAD，which is sirtuin 的“燃料”），还有二甲双胍（metformin）。其中锻炼的日子可能会跳过一些补充品。他并不吃复合维生素。</li><li>以蔬菜为主食的好处：富含各种营养，维生素；包含异种激素（Xenohormesis），植物基于“压力”之下产生的物质，对长寿有益。后者也可以通过槲皮素（quercetin）来做膳食补充。</li><li>一般会隔一天进行有氧运动和力量训练。有氧运动能提升 NAD 水平。</li><li>根据家族病史来决定一些药物摄入，如他 29 岁就开始服用降胆固醇药物。</li><li>对于人造甜味剂，教授认为总体来说是安全的。他偶尔也会喝健怡可乐。</li></ul><p>对于这一系列实践，Sinclair 教授都进行了 10 多年的自身实验，并使用各种手段来监控身体数据。通过监控数据可以推测出一个人的“生理年龄”如何（不是光看脸），他自己在上述实践下，生理年龄在持续下降，现在已经达到了 30 岁左右的水平（实际年龄 52 岁）。另外，他认为每个人的身体情况不一样，医院约定俗成的生理指标范围也不一定适合每个人。<strong>未来这种健康数据的实时监控与个性化诊断会成为主流</strong>。他举了一些例子：</p><ul><li>监控血糖水平 HbA1c，观察 fasting 的影响等。</li><li>监控炎症指标 CRP，与心脏病等各种疾病的诱发相关。</li><li>监控 LDL，通过药物等进行控制。膳食胆固醇对血液胆固醇几乎没有影响，不需要戒红肉，黄油等。</li><li>补充铁元素可能加速衰老。医学指标需要个性化，低铁元素含量并不一定导致贫血。</li></ul><p>还有一些影响寿命的负面因素：</p><ul><li>肥胖症会加速衰老。</li><li>吸烟，会破坏基因表达，加速衰老。</li><li>X 光检查同理，没有必要时，避免接触。</li></ul><p>展望一下 longevity 研究的未来，还是挺激动人心的。现代科学每一年能让我们的平均寿命延长 1/4 年，如果每一年能让我们的平均寿命延长超过 1 年，则达到了<strong>寿命“逃逸速度”</strong>（类比以 1000 英里每小时的速度往西飞行，太阳永远不会落下），实现了“永生”。著名的未来学家 Ray Kurzweil 预测，大约 12 年后（2034 年）就能实现，让我们拭目以待。</p><p>除了这集 podcast，也必须附上吴承霖大佬的万星项目 <a href="https://github.com/geekan/HowToLiveLonger">程序员延寿指南</a>。</p><h1 id="个人实践"><a href="#个人实践" class="headerlink" title="个人实践"></a>个人实践</h1><p>前面介绍的内容有点多，这篇文章篇幅也有些超了。最后来简单介绍下我个人目前采纳的一些行动和辅助工具。</p><p>睡眠方面暂时没有什么特别的措施，现在带娃基本上晚上睡眠质量也比较一般。只是会稍稍注意一下晚上 11 点后尽量不接触手机光源。早起接收光照这点，基本上就是早上遛狗或者开车通勤时间来接触，基本压力不大。如果比较讲究的同学，还可以下一个 <a href="https://mycircadianclock.org/">My Circadian Clock App</a> 来追踪一下生物钟，也是 Satchin Panda 等大佬参与开发的项目，值得信赖。</p><p>饮食方面，开始尝试 8 小时进食窗口的 fasting，目前感觉良好。中饭一般吃蔬菜为主的轻食，晚上就比较放飞自我，想吃啥吃啥。早上会看情况喝点盐水，茶或者 AG1 的补充剂。膳食补充剂目前基本只有复合维生素和 EPA 鱼油在使用，后面可以参考下 <a href="https://fastlifehacks.com/andrew-huberman-supplements-list/">Huberman 的“配方”</a> 增加一些。Huberman 自己也在节目中表示<strong>对白藜芦醇和 NMN 还在观望状态</strong>，我查了些资料发现有争议的地方还不少，所以我个人建议先采纳广受认可和使用的一些补充剂，如 EPA 鱼油，二甲双胍等。个人目前考虑的补充剂列表：</p><ul><li><a href="https://www.thorne.com/products/dp/basic-nutrients-2-day">基础维生素</a>，常规补充剂，也可以根据自己的饮食结构，生活习惯选择特定的营养物质补充。</li><li><a href="https://www.thorne.com/products/dp/super-epa-sp608nc">Omega-3 EPA</a>，常年销量靠前的补充剂，好处前面已经说了很多了。</li><li><a href="https://athleticgreens.com/en">AG1</a>，超火的小绿粉，各种植物提取物 + 各种维生素矿物会，Fridman 等大佬的节目里都有提到。个人买了一次，不过看一些其它评测貌似并不是很划得来。</li><li><a href="https://www.thorne.com/products/dp/betaine-hcl-pepsin-225-s">Betaine HCL &amp; Pepsin</a>，保护肠胃，促进吸收。</li><li><a href="https://www.thorne.com/products/dp/l-tyrosine">L-Tyrosine</a>，提升多巴胺，可能会买个尝尝鲜。</li><li><a href="https://zh.m.wikipedia.org/zh/%E4%BA%8C%E7%94%B2%E5%8F%8C%E8%83%8D">二甲双胍</a>，抗衰老“神药”，不过这个药的有效性和安全性还有争议，建议谨慎。</li><li><a href="https://www.thorne.com/products/dp/resveracel">ResveraCel</a>，白藜芦醇，NR 等抗衰老组合。效果同样有争议，尤其 NMN 这块更是各种产品鱼龙混杂无法分辨，谨慎购入。</li></ul><p>很多人都关心 fasting 可能引发胆结石，这里提供一些补充信息：</p><ul><li>从这篇 <a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC1419405/">Bloch, H. M. 等人的论文</a> 来看，fasting 过程中胆汁的饱和度有一个先上升后下降的过程，<a href="https://youtu.be/2lGuXBwudKw">Dr. Berg 也以此做了解释</a>，认为 fasting 加生酮饮食（摄入脂肪）对胆囊健康反而是有益的。</li><li>从这篇 <a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC1405175/">Sichieri, R. 等人的论文</a> 的结果来看，long overnight fasting 和节食会提升得胆结石的概率。不过减肥（减少脂肪）本身就会提升得胆结石的概率。</li><li>持续 24 小时以上的禁食相关的研究比较少（比较难执行），但从机理上来说长时间的禁食应该会增加得胆结石的概率。</li><li>饮食结构，自身状况对胆结石的形成也会有很大影响，例如高胆固醇，高胰岛素水平，高碳水饮食等。高纤维食物，健康的脂肪摄入，有助于降低得胆结石的概率。</li></ul><p>总体看下来，我个人感觉这块的实验上没有一个定论（就跟 <a href="https://www.coffeeandhealth.org/factsheet/gallstones-factsheet">咖啡是否会引发胆结石</a> 一样），但应该不是一个概率很大的问题，起码 Huberman 教授跟这个领域的另一位权威 Satchin Panda 教授都没有提到这块的问题。理想情况是执行 fasting 时持续对你的身体状况做医学指标的跟踪。其它就看个人选择了 :)</p><p>工作，学习，专注方面，主要看自律了。这方面我总体控制还可以，在了解了多巴胺的工作原理之后就更加有自信了，主要靠各种软件的专注模式来近似执行番茄时钟法，此外也采用了升降桌，大概有 30% 的时间站立办公。工作间歇会尝试一下 Yoga Nidra。此外晚上学习时段会用 iPad 的 Books 来记录一下阅读时间，基本上每天保持 30 分钟以上，持续坚持。后面考虑试试工作时喝马黛茶，以及夏天开始尝试冷水澡。</p><p>运动方面是这一年来改观最大的一项，依靠小米手环 PAI 指数功能的督促，基本上做到了每周平均 3 次的跑步或者羽毛球活动，持续把 PAI 值保持在 200 左右。总体来说对于精神状态的改观还是很大的，肚子上的脂肪也减少了很多。唯一比较困扰的是一般下班后运动都要 9，10 点开始了，结束后会离入睡的时间比较近，有时候会对睡眠质量有所影响。</p><p>最后，Huberman 教授的 podcast 中还有很多其它内容，比如习惯养成，健身增肌，应对恐惧与创伤，情绪管理等，感兴趣的朋友可以进一步挖掘。本文以实验事实与原理假设的陈述为主，以上所有的行动方案都需要在咨询医师，专业人员的条件下，结合自身情况执行，注意自身安全，本人与 Huberman 都不负相关后果责任。</p><p>备注：这篇文章也同时发布到了 <a href="https://github.com/zijie0/HumanSystemOptimization">Github</a>，欢迎大家 Star 并提出宝贵建议，谢谢！如果你对我的其它作品感兴趣，也欢迎搜索关注公众号：RandomGenerator。</p><p>转载：<a href="https://github.com/zijie0/HumanSystemOptimization">https://github.com/zijie0/HumanSystemOptimization</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;UPDATE: 鉴于文章比较长，很多同学没有耐心读完，后续也分享录制了一个 &lt;a href=&quot;https://www.bilibili.com/video/BV1EW4y1R7yi/&quot;&gt;视频版&lt;/a&gt;，基本涵盖了文章里的大部分内容。&lt;/p&gt;
&lt;p&gt;另外在健康生活实践方面，也</summary>
      
    
    
    
    <category term="Human" scheme="https://kalyan-zitiu.github.io/categories/Human/"/>
    
    <category term="daily diet" scheme="https://kalyan-zitiu.github.io/categories/Human/daily-diet/"/>
    
    
    <category term="optimization" scheme="https://kalyan-zitiu.github.io/tags/optimization/"/>
    
  </entry>
  
  <entry>
    <title>AWS云计算基础</title>
    <link href="https://kalyan-zitiu.github.io/2023/07/31/AWS%E4%BA%91%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80/"/>
    <id>https://kalyan-zitiu.github.io/2023/07/31/AWS%E4%BA%91%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80/</id>
    <published>2023-07-31T14:00:00.000Z</published>
    <updated>2023-08-12T07:43:48.236Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AWS云计算理论基础"><a href="#AWS云计算理论基础" class="headerlink" title="AWS云计算理论基础"></a>AWS云计算理论基础</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>Amazon Web Services </li><li>可以理解成一群人买了一个空间，里面堆了一堆硬件然后租给你用，和网吧的原理是一样的。</li><li>AWS云计算是指亚马逊网络服务（Amazon Web Services）提供的一系列云计算服务。它允许个人、企业和组织通过互联网访问和使用IT资源</li></ul><iframe width="560" height="315" src="https://www.youtube.com/embed/a9__D53WsUs" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ul><li>分别能够提供高级联网，数据分析，数据库，AWS游戏，机器学习，媒体服务，安全性，无服务器，存储等主要服务<br><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230807172336657.png" alt="image-20230807172336657"></li></ul><h3 id="云计算类型"><a href="#云计算类型" class="headerlink" title="云计算类型"></a>云计算类型</h3><ul><li>每种类型的云服务和部署方法都提供不同级别大的控制力，灵活性和管理功能。理解基础设施即服务和软件即服务之间的差异，以及可以使用的部署策略，有助于根据需求选用合适的服务组合。</li></ul><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230812141634839.png" alt="image-20230812141634839"></p><h4 id="云计算模型"><a href="#云计算模型" class="headerlink" title="云计算模型"></a>云计算模型</h4><h5 id="基础设施即服务（laaS）"><a href="#基础设施即服务（laaS）" class="headerlink" title="基础设施即服务（laaS）"></a>基础设施即服务（laaS）</h5><ul><li>提供基本的计算，存储和网络资源，用户可以在这些资源上构建和管理自己的应用程序。用户负责操作系统及以上的管理和维护，如虚拟机，存储实例等</li></ul><h5 id="平台即服务（PaaS）"><a href="#平台即服务（PaaS）" class="headerlink" title="平台即服务（PaaS）"></a>平台即服务（PaaS）</h5><ul><li>在laaS的基础上，PaaS还提供开发框架，数据库，中间件等。用户可以专注于应用程序开发，而不必关心底层基础设施的管理。</li></ul><h5 id="软件即服务（SaaS）"><a href="#软件即服务（SaaS）" class="headerlink" title="软件即服务（SaaS）"></a>软件即服务（SaaS）</h5><ul><li>提供完整的应用程序作为服务，用户无需安装，维护或管理应用程序本身。常见的有电子邮件，办公套件，客户关系，管理系统等。</li></ul><h5 id="函数即服务（FaaS）"><a href="#函数即服务（FaaS）" class="headerlink" title="函数即服务（FaaS）"></a>函数即服务（FaaS）</h5><ul><li>也称为无服务器计算，它允许开发人员编写单个函数（或功能块），并在需要时候自动触发执行，无需关心底层的服务器和基础设施。</li></ul><h5 id="容器即服务（CaaS）"><a href="#容器即服务（CaaS）" class="headerlink" title="容器即服务（CaaS）"></a>容器即服务（CaaS）</h5><ul><li>提供容器管理和编排的服务，用户可以将应用程序打包成容器，并在云平台上进行部署，扩展和管理</li></ul><h5 id="多云和混合云"><a href="#多云和混合云" class="headerlink" title="多云和混合云"></a>多云和混合云</h5><ul><li>多云指的是将应用程序和数据分布在等多个不同的云平台上，而混合云则是将云计算与传统本地基础设施相结合，使得用户可以在不同环境中灵活地部署和管理应用程序。</li></ul><h4 id="AWS核心服务"><a href="#AWS核心服务" class="headerlink" title="AWS核心服务"></a>AWS核心服务</h4><h5 id="计算服务："><a href="#计算服务：" class="headerlink" title="计算服务："></a>计算服务：</h5><p>Amazon EC2 (Elastic Compute Cloud)：提供可扩展的虚拟机实例，用于运行各种应用程序。</p><p>Amazon ECS (Elastic Container Service)：用于管理和编排Docker容器的服务。</p><p>AWS Lambda：无服务器计算服务，允许您在需要时运行代码，无需管理服务器。</p><p>Amazon Lightsail：为简单应用提供的轻量级计算实例，适用于初学者和小型项目。</p><h5 id="存储服务："><a href="#存储服务：" class="headerlink" title="存储服务："></a>存储服务：</h5><p>Amazon S3 (Simple Storage Service)：对象存储服务，用于存储和检索任意数量的数据。</p><p>Amazon EBS (Elastic Block Store)：提供持久性块存储卷，可附加到EC2实例。</p><p>Amazon Glacier：长期数据存储服务，适用于需要稳定存储而不需要频繁访问的数据。</p><p>Amazon EFS (Elastic File System)：提供可扩展的文件存储，可以在多个EC2实例之间共享。</p><h5 id="数据库服务："><a href="#数据库服务：" class="headerlink" title="数据库服务："></a>数据库服务：</h5><p>Amazon RDS (Relational Database Service)：托管的关系型数据库服务，支持多种数据库引擎。</p><p>Amazon DynamoDB：托管的NoSQL数据库服务，适用于高度可扩展和低延迟的应用程序。</p><p>Amazon Aurora：高性能、关系型数据库引擎，兼容MySQL和PostgreSQL。</p><p>Amazon Redshift：用于数据仓库和分析的大规模数据存储和处理服务。</p><h5 id="网络和内容分发："><a href="#网络和内容分发：" class="headerlink" title="网络和内容分发："></a>网络和内容分发：</h5><p>Amazon VPC (Virtual Private Cloud)：创建私有网络，允许您在AWS中隔离和配置资源。</p><p>Amazon CloudFront：内容分发网络，加速向全球用户分发静态和动态内容。</p><p>Amazon Route 53：可扩展的域名系统（DNS）服务，用于管理域名和路由流量。</p><h5 id="安全与身份管理："><a href="#安全与身份管理：" class="headerlink" title="安全与身份管理："></a>安全与身份管理：</h5><p>AWS IAM (Identity and Access Management)：身份和访问管理服务，用于管理用户、权限和资源访问。</p><p>Amazon Cognito：用于身份验证、授权和用户管理的服务。</p><h5 id="分析与大数据："><a href="#分析与大数据：" class="headerlink" title="分析与大数据："></a>分析与大数据：</h5><p>Amazon EMR (Elastic MapReduce)：大数据处理服务，支持Apache Hadoop、Spark等。</p><p>Amazon Athena：无服务器查询服务，用于分析S3中的数据。</p><p>Amazon Redshift Spectrum：扩展Redshift数据仓库，可以直接查询S3中的数据。</p><h5 id="人工智能与机器学习："><a href="#人工智能与机器学习：" class="headerlink" title="人工智能与机器学习："></a>人工智能与机器学习：</h5><p>Amazon SageMaker：用于构建、培训和部署机器学习模型的托管服务。</p><p>Amazon Rekognition：图像和视频分析服务，用于识别对象、人脸等。</p><p>Amazon Polly：文本转语音服务，可将文本转换为自然语音。</p><p>Amazon Lex：构建聊天机器人和语音交互应用的服务。</p><h4 id="开发者工具"><a href="#开发者工具" class="headerlink" title="开发者工具"></a>开发者工具</h4><h5 id="AWS-CodeCommit："><a href="#AWS-CodeCommit：" class="headerlink" title="AWS CodeCommit："></a>AWS CodeCommit：</h5><p>提供托管的Git存储库，用于团队协作和版本控制。<br>可以将代码存储在私有存储库中，并管理代码的变更历史。</p><h5 id="AWS-CodeBuild："><a href="#AWS-CodeBuild：" class="headerlink" title="AWS CodeBuild："></a>AWS CodeBuild：</h5><p>托管的持续集成服务，用于构建、测试和打包应用程序。<br>自动执行构建过程，生成可部署的构建产物。</p><h5 id="AWS-CodeDeploy："><a href="#AWS-CodeDeploy：" class="headerlink" title="AWS CodeDeploy："></a>AWS CodeDeploy：</h5><p>自动化部署服务，用于将应用程序部署到不同的计算实例。<br>支持各种部署策略，如无停机部署、蓝绿部署等。</p><h5 id="AWS-CodePipeline："><a href="#AWS-CodePipeline：" class="headerlink" title="AWS CodePipeline："></a>AWS CodePipeline：</h5><p>托管的持续交付服务，用于创建、管理和自动化整个交付流程。<br>可以连接多个代码存储库、构建和部署服务，形成完整的交付流水线。</p><h5 id="AWS-CodeStar："><a href="#AWS-CodeStar：" class="headerlink" title="AWS CodeStar："></a>AWS CodeStar：</h5><p>为团队提供一站式的开发项目管理和协作工具。<br>集成了多个开发者工具，帮助您快速搭建、部署和管理应用。</p><h5 id="AWS-Cloud9："><a href="#AWS-Cloud9：" class="headerlink" title="AWS Cloud9："></a>AWS Cloud9：</h5><p>基于浏览器的集成开发环境（IDE），允许团队协作开发代码。<br>可以连接到远程服务器，编写、测试和调试代码。</p><h5 id="AWS-X-Ray："><a href="#AWS-X-Ray：" class="headerlink" title="AWS X-Ray："></a>AWS X-Ray：</h5><p>分布式应用程序性能分析服务，可帮助您识别和调试性能问题。<br>可以跟踪请求在不同服务之间的流动，并生成性能图表。</p><h5 id="AWS-Command-Line-Interface-CLI-："><a href="#AWS-Command-Line-Interface-CLI-：" class="headerlink" title="AWS Command Line Interface (CLI)："></a>AWS Command Line Interface (CLI)：</h5><p>命令行工具，使您能够通过命令管理AWS资源。<br>提供了丰富的命令和选项，用于自动化和管理任务。</p><h5 id="AWS-SAM-Serverless-Application-Model-："><a href="#AWS-SAM-Serverless-Application-Model-：" class="headerlink" title="AWS SAM (Serverless Application Model)："></a>AWS SAM (Serverless Application Model)：</h5><p>一种用于构建、测试和部署无服务器应用程序的开发框架。<br>基于CloudFormation，简化了无服务器应用程序的定义和部署。</p><h5 id="AWS-Amplify："><a href="#AWS-Amplify：" class="headerlink" title="AWS Amplify："></a>AWS Amplify：</h5><p>用于构建现代Web和移动应用程序的开发平台。<br>提供前端框架、托管、认证等功能，支持快速开发和部署。</p><h5 id="AWS的IDE和IDE工具包"><a href="#AWS的IDE和IDE工具包" class="headerlink" title="AWS的IDE和IDE工具包"></a>AWS的IDE和IDE工具包</h5><ul><li>AWS支持流行的集成开发环境（IDE）和IDE工具包提供支持，因此你可以在你的首选环境中在AWS上编写，调试和部署代码。</li></ul><h4 id="基础设施即代码（IaC）"><a href="#基础设施即代码（IaC）" class="headerlink" title="基础设施即代码（IaC）"></a>基础设施即代码（IaC）</h4><ul><li>AWS提供服务能够以编程，描述性和声明性的方式创建，部署和维护基础设施</li></ul><h5 id="AWS-CDK"><a href="#AWS-CDK" class="headerlink" title="AWS CDK"></a>AWS CDK</h5><ul><li><p>AWS云开发套件（AWS CDK）是一个软件开发框架，用于在代码中的定义云基础设施并通过AWS CloudFormation进行配置。CDK支持类似于TypeScript，JavaScript，Python，Java，C#/.Net和Go</p></li><li><p>配置云应用程序可能具有挑战性，需要编写自定义脚本，维护模板或学习特定于领域的语言。提供才成为构造的高级组件，可以使用经过验证的默认值预配置云资源，以便你可以轻松构建云应用程序。</p></li></ul><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230812151513189.png" alt="image-20230812151513189"></p><h4 id="AWS云形成"><a href="#AWS云形成" class="headerlink" title="AWS云形成"></a>AWS云形成</h4><ul><li>建模和设置AWS资源可能非常耗时，这就是AWS CloudFormation可以提供帮助的地方。CloudFormation帮助你建模和设置AWS资源，以便你可以花更少的时间管理资源，而将更多的时间专注于你的应用程序。创建模板后，CloudFormation会我为你预置这些资源。无需单独创建和配置AWS资源并且弄清楚哪些资源依赖哪些资源。</li></ul><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230812152841112.png" alt="image-20230812152841112"></p><h4 id="架构完善的基础设施"><a href="#架构完善的基础设施" class="headerlink" title="架构完善的基础设施"></a>架构完善的基础设施</h4><h5 id="框架概述"><a href="#框架概述" class="headerlink" title="框架概述"></a>框架概述</h5><ul><li>AWS Well-Architected可以帮助云架构和开发人员为各种应用程序和工作负载构建安全，高性能，弹性且高效的基础设施。AWS Well-Architected围绕六大支柱构建。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;AWS云计算理论基础&quot;&gt;&lt;a href=&quot;#AWS云计算理论基础&quot; class=&quot;headerlink&quot; title=&quot;AWS云计算理论基础&quot;&gt;&lt;/a&gt;AWS云计算理论基础&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="Cloud Konwleage" scheme="https://kalyan-zitiu.github.io/categories/Cloud-Konwleage/"/>
    
    <category term="Study Note" scheme="https://kalyan-zitiu.github.io/categories/Cloud-Konwleage/Study-Note/"/>
    
    
    <category term="基础知识" scheme="https://kalyan-zitiu.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>OceanBase</title>
    <link href="https://kalyan-zitiu.github.io/2023/07/15/OceanBase/"/>
    <id>https://kalyan-zitiu.github.io/2023/07/15/OceanBase/</id>
    <published>2023-07-15T14:00:00.000Z</published>
    <updated>2023-09-10T14:05:34.932Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OceanBase"><a href="#OceanBase" class="headerlink" title="OceanBase"></a>OceanBase</h1><h2 id="传统集中式数据库面临的挑战"><a href="#传统集中式数据库面临的挑战" class="headerlink" title="传统集中式数据库面临的挑战"></a>传统集中式数据库面临的挑战</h2><h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230718091134287.png" alt="image-20230718091134287"></p><ul><li>可扩展性方面：传统集中式数据库的扩展性有限，当数据量增加或者并发访问量增大时，集中式数据库可能无法提供足够的性能和吞吐量</li><li>单点故障：由于集中式数据库只有一个中心节点，一旦该节点发生故障，整个系统将无法正常工作。这种单点故障可能导致系统可用性和数据的丢失</li><li>单点上限：在一个数据库系统中，单个节点能够处理的最大负载或并发连接数。通常由硬件资源以及数据库软件本身的性能限制所决定的，</li><li>数据库安全：传统型集中式数据库存储所有数据的中心节点成为攻击者的目标，一旦该节点被入侵或者遭受到其他安全威胁，整个数据库的数据会面临泄露和篡改的风险</li><li>数据一致性：由于集中式数据库的数据存储都在一个节点上，当多个用户同时对数据库进行操作时，可能会出现数据一致性的问题。例如，当一个用户在修改某个数据时，另一个用户可能正在读取该数据，导致读取的数据不一致</li><li>高延迟：远程用户在访问数据库时，可能会出现高延迟，这对于要低延迟响应的应用场景是不可接受的。</li></ul><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230718094411164.png" alt="image-20230718094411164"></p><h3 id="数据库分布规则"><a href="#数据库分布规则" class="headerlink" title="数据库分布规则"></a>数据库分布规则</h3><ul><li>是指分布式数据库系统中，决定怎么将数据分散到不同节点上，实现分布式存储和访问。</li></ul><h4 id="分片"><a href="#分片" class="headerlink" title="分片"></a>分片</h4><ul><li>将数据划分成多个片段，每个片段存储在不同的节点上。分片规则可以基于数据的某个属性进行划分，例如按照用户ID进行哈希分片或按照地理位置进行范围分片<h4 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h4></li><li>将数据复制到多个节点上以提高数据的可用性和容错性。复制规则可以确定数据的副本数量，复制的同步方式以及副本的位置选择策略<h4 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h4></li><li>根据查询或操作的条件将请求路由到正确的节点上。路由规则可以基于数据的分片键或其他属性进行路由决策的，以确保操作在正确的节点上执行。<h4 id="数据迁移"><a href="#数据迁移" class="headerlink" title="数据迁移"></a>数据迁移</h4></li><li>在节点的增加，减少或数据重平衡时，如何将数据从一个节点迁移到另一个节点上，以保持数据的均衡和一致性。<h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3></li><li>使用通用数据库，可以实现数据库线性的扩容</li><li>数据库是单点数据库，数据库之间没有联系，不知道其他数据库的存在，依靠中间件完成需要跨库的事务</li><li>数据库中间件连接各个数据库，实现分库分表</li></ul><p>需要注意的是单中间件整合各个数据库时候，倘若该数据库服务器时间戳不一致的时候可能会导致数据不一致的问题，可能在数据同步阶段的时候不同服务器操作时间戳或早或晚可能会被视为未来操作或者视为过时操作会丢失数据。</p><p>解决上面的问题，能够使用专门统一数据库服务器的时间的服务器或者建立时间戳校验机制，或者定期校准时间戳。</p><h4 id="非短板"><a href="#非短板" class="headerlink" title="非短板"></a>非短板</h4><ul><li>能过通过线性扩展来达到分库分表，可以快速实现数据库的水平扩展；</li><li>技术成本较低，不需要改造核心数据库引擎，或者只需要做很少的改造；</li></ul><h4 id="短板"><a href="#短板" class="headerlink" title="短板"></a>短板</h4><ul><li>跨库分布式事物，数据库核心引擎没有分布式能力，只能通过中间件来完成分布式处理，但中间件很难做到RPO = 0，因此在遇到异常和故障时无法100%保证分布式事务的ACID能力</li><li>全局一致性，由于多个数据库服务器的时间戳不一致，因此很难保证多个库之间数据版本号的全局性一致</li><li>负载均衡，在扩容和缩容时候，底层数据库引擎无法在线调整数据分布规则，因此需要暂停业务并重新导数据，对业务和运维挑战很大；</li><li>跨库复杂SQL，跨库的复杂SQL运算，只能要求中间件能够完成，而中间件不具备分布式并行计算能力，最终会限制应用对SQL的使用，产生业务侵入性。</li></ul><h2 id="原生的分布式关系型数据库架构"><a href="#原生的分布式关系型数据库架构" class="headerlink" title="原生的分布式关系型数据库架构"></a>原生的分布式关系型数据库架构</h2><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230910195837934.png" alt="image-20230910195837934"></p><ul><li>一种新型的数据库架构，能更好的处理大规模数据，并具有高并发，高可用，高扩展等特点。</li></ul><h3 id="数据高可靠，服务高可用"><a href="#数据高可靠，服务高可用" class="headerlink" title="数据高可靠，服务高可用"></a>数据高可靠，服务高可用</h3><ul><li>多副本一致性Paxos，个别节点发生故障时，保证数据零丢失和服务快速恢复。</li></ul><h4 id="Paxos协议"><a href="#Paxos协议" class="headerlink" title="Paxos协议"></a>Paxos协议</h4><ul><li>一种解决分布式系统中的一致性问题的协议，保证系统中多个副本在面对网络延迟，分区，信息丢失等问题时。</li></ul><h5 id="Prepare阶段"><a href="#Prepare阶段" class="headerlink" title="Prepare阶段"></a>Prepare阶段</h5><ol><li>Paxos提议者会向一组接受者发送一个提议，改提议包含一个提议编号和提议内容。</li><li>接受者会在接收到提议后，如果该提议的编号是其所接收过的所有提议中最大的，那么它就会接受这个提议，并将自己之前接受的最大编号的提议回复给提议者。</li></ol><h5 id="Accept阶段"><a href="#Accept阶段" class="headerlink" title="Accept阶段"></a>Accept阶段</h5><ol><li>议者会根据Prepare阶段的回复，选择一个提议内容，然后再次向接受者发送提议，该提议包含了在Prepare阶段中提出的提议编号和选定的提议内容。</li><li>接受者在接收到提议后，如果该提议的编号仍然是其所接收过的所有提议中最大的，那么它就会接受这个提议。</li></ol><h3 id="线性扩容"><a href="#线性扩容" class="headerlink" title="线性扩容"></a>线性扩容</h3><ul><li>指随着硬件资源的增加，数据库的处理能力或存储能力能够线性增长。</li><li>线性扩容的好处是可以让系统在面对业务增长时，能够通过简单地扩展硬件资源来满足业务需求，而无需对系统的架构进行大的修改。</li><li>实现线性扩容，需要数据库系统具有良好的分布式架构，包括数据分片、负载均衡、分布式事务处理等能力。同时，也需要数据库系统能够有效地管理和调度各个节点的资源，以确保资源的充分利用。</li></ul><h3 id="全局一致性"><a href="#全局一致性" class="headerlink" title="全局一致性"></a>全局一致性</h3><ul><li>支持分布式事务，确保全局一致性，无需使用高端小型机和存储</li></ul><h3 id="对业务透明"><a href="#对业务透明" class="headerlink" title="对业务透明"></a>对业务透明</h3><ul><li>可以像使用单点数据库一样使用分布式数据库，业务迁移改造成本低。</li></ul><h3 id="核心部分"><a href="#核心部分" class="headerlink" title="核心部分"></a>核心部分</h3><h4 id="数据分片"><a href="#数据分片" class="headerlink" title="数据分片"></a>数据分片</h4><h5 id="分片策略"><a href="#分片策略" class="headerlink" title="分片策略"></a>分片策略</h5><ul><li>范围分片（按照某个字段）</li><li>哈希分片（通过哈希函数将数据均匀分布到各个节点）</li><li>列表分片（根据列表中定义的值将数据分布到各个节点）<h5 id="分片键"><a href="#分片键" class="headerlink" title="分片键"></a>分片键</h5></li><li>分片键是确定数据分布到哪个分片的关键。通常，分片键应该选择能够使数据均匀分布到各个分片的字段<h5 id="数据均匀分布"><a href="#数据均匀分布" class="headerlink" title="数据均匀分布"></a>数据均匀分布</h5></li><li>为了提高系统的性能和可用性，需要尽可能地使数据均匀分布到各个分片。如果数据在分片之间的分布不均匀，可能会导致某些节点过载，而其他节点闲置，这被称为”数据倾斜”<h5 id="数据迁移-1"><a href="#数据迁移-1" class="headerlink" title="数据迁移"></a>数据迁移</h5></li><li>当添加或删除节点时，需要重新分配数据，这被称为数据迁移。数据迁移是一个复杂的过程，需要在保证数据完整性和服务可用性的同时进行。<h4 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h4></li><li>支持分布式事务，保证数据的一致性，通常通过两阶段提交（2PC）或 三阶段提交（3PC）等协议来实现。<h4 id="数据复制"><a href="#数据复制" class="headerlink" title="数据复制"></a>数据复制</h4></li><li>为了提高数据的可用性和容错性，原生分布式关系型数据库会将数据复制到多个节点。如果某个节点发生故障，可以从其他节点获取数据。<h4 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h4></li><li>原生分布式关系型数据库需要支持负载均衡，以保证系统的性能。这通常通过分布式哈希、一致性哈希等算法来实现。<h4 id="故障恢复"><a href="#故障恢复" class="headerlink" title="故障恢复"></a>故障恢复</h4></li><li>在分布式系统中，节点故障是常见的问题。原生分布式关系型数据库需要支持故障恢复，以保证系统的持续运行。</li></ul><h4 id="弹性扩展"><a href="#弹性扩展" class="headerlink" title="弹性扩展"></a>弹性扩展</h4><ul><li>需要支持弹性扩展，即可以根据需要动态增加或减少节点。</li></ul><h2 id="OceanBase-1"><a href="#OceanBase-1" class="headerlink" title="OceanBase"></a>OceanBase</h2><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230910205750757.png" alt="image-20230910205750757"></p><h4 id="多种部署方式"><a href="#多种部署方式" class="headerlink" title="多种部署方式"></a>多种部署方式</h4><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230910205925780.png" alt="image-20230910205925780"><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230910210114199.png" alt="image-20230910210114199"> </p><h4 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h4><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230910211314030.png" alt="image-20230910211314030"></p><ul><li><p>OceanBase是蚂蚁金服完全自主研发的通用的分布式关系型数据库。OceanBase以集群的形式存在，至少三个节点分布在三个区域（Zone），每个节点上运行一个单进程程序，进程名observer。每个observer进程都包含连个模块：SQL引擎和存储引擎，所以每个节点地位基本是平等的。稍微特殊的是每个Zone里会有一个节点的observer内还会运行总控服务，三个总控服务内容一样，角色上会有一个Leader和Follower，只有Leader提供服务。</p></li><li><p>OceanBase集群还支持多租户管理</p><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230719094326659.png" alt="image-20230719094326659"></p></li></ul><h4 id="RootService总控服务（RS）"><a href="#RootService总控服务（RS）" class="headerlink" title="RootService总控服务（RS）"></a>RootService总控服务（RS）</h4><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230910215101839.png" alt="image-20230910215101839"></p><h4 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h4><p>OceanBase的数据存在每个节点上，observer通过分区管理数据。分区是数据的子集，一个非分区就是一个分区，一个分区表包含多个分区，一个分区不能跨节点，分区表的不同分区可以跨节点。所以分区表可以做水平跨节点扩展。分区是数据的子集，是高可用的最小粒度。分析OceanBase是否丢数据，只要分析分区的数据写是否会丢。</p><h4 id="读写模式"><a href="#读写模式" class="headerlink" title="读写模式"></a>读写模式</h4><ul><li>OceanBase在初次读入一行数据时会将该行所在块读入到内存的Block Cache中，后面修改的时候并不是直接修改这个block，而是在另外一块内存中分配少量空间记录这笔修改，并且只记录变化部分，这称为增量数据（Memtable）。前面在Block Cache里的数据称为基线数据。同一记录如果反复修改多次，多个增量会议链表形式挂在该记录下</li></ul><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230719095139281.png" alt="image-20230719095139281"></p><p>OceanBase的这种方式能够比传统数据库产生的脏块要小得多，所以OceanBase会把这些Memtable一直保存在缓存中或者推迟写入磁盘。当最后落盘的时候，Memtable会冻结成历史版本，然后和对应的基线数据在内存中进行合并，生成SSTable格式写入磁盘数据文件。合并的操作对资源有较大的影响，所以会在尽可能推迟合并操作到低峰期。若专门用户Memtable的内存利用率达到了一定的阈值，它会将Memtable直接以SSTable格式临时写入磁盘中。这就是转储的操作，相对对资源消耗比较小。</p><h4 id="多个资源池（Resource-Pool）"><a href="#多个资源池（Resource-Pool）" class="headerlink" title="多个资源池（Resource Pool）"></a>多个资源池（Resource Pool）</h4><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230910215905310.png" alt="image-20230910215905310"></p><h4 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h4><p>OceanBase的Memtable一天只落盘一次，但是记录Memtable的时候OceanBase会遵循WAL机制，生成相关的事务日志保存在日志缓冲区里。和Oracle不同的是OceanBase的这些事务日志在事务提交之前会一直在日志缓冲区里，若节点宕机，没提交的事务日志对业务来说也没有数据丢失，当提交后，OceanBase会做事务日志的持久化动作。所以可能对于一些大事务会占用不少的内存空间。而且OceanBase是没有Undo，假设业务事务回滚了，它只会有一些清理逻辑。</p><h4 id="宕机恢复"><a href="#宕机恢复" class="headerlink" title="宕机恢复"></a>宕机恢复</h4><p>OceanBase的节点宕机后，节点上部分分区的访问会受影响，但OceanBase集群会很快恢复这些分区访问，这是OceanBase的可用性特性。和传统数据库一样，宕机后恢复，它会读取事务日志，重做事务，但在不同在于observer不需要再次读入基线数据，只需要在事务日志在增量内存中构建相关分区的Memtable。相关分区被业务读取时，对应的基线数据所在块才会被再次读入Block Cache中。</p><h4 id="副本复制"><a href="#副本复制" class="headerlink" title="副本复制"></a>副本复制</h4><ul><li>Oracle一样，光支持WAL是不足以保障数据安全，OceanBase还要设法保障事务日志的可靠性。除了使用DirectIO持久化到本节点磁盘外，也需要持久化到其他节点上。</li><li>跟传统关系数据库主备两副本架构不一样，OceanBase选择了多副本架构，是如果副本数是偶数，会有传统双机房容灾的脑裂问题。脑裂问题的本质就是全体成员在局部通信中断故障时无法就哪个节点接管服务作出一致性决议。成员数是奇数，才有可能形成多数派。</li></ul><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230719104329304.png" alt="image-20230719104329304"></p><p>副本就是分区的别称，一个分区有三份数据，每份是一个副本。副本的内容除了数据还有事务日志。在这里我们只关心事务日志部分。三个副本在角色上是1个Leader（类似于主副本）2个Follower（类似于备副本）。只有Leader副本才会对外提供读写服务，这样就规避了单个分区多个节点同时写入的问题。但是注意每个分区只能单点写入跟OceanBase集群多个节点写入并不矛盾。因为Leader副本是可以分散到所有节点（OBServer）上。跟传统关系数据库一样，OceanBase维持三副本数据的同步是靠传输事务日志（Redo）机制实现的。</p><p>所以，为了保障事务日志的可靠性，OceanBase要把Leader副本上的事务日志持久化到本机和其他两个Follower副本上。宏观上表现就是可能存在各个节点彼此互相传输事务日志。这个跟MySQL的Master-Master架构里双向复制并不完全一样。 我们重点看看OceanBase如何认定事务日志可靠了。</p><p>使用Paxos协议，各个副本成员就事务日志持久化到磁盘进行表决。只要一半以上成员投票OK，Leader副本上的事务就可以继续提交了，Follower副本才开始应用Redo。这个协议是强制性约束，不够一半成员就会表决失败，Leader副本上事务就会回滚。这里没有类似Oracle或者MySQL的同步降级的做法。此外，剩余少数派成员最终也是要表决成功的，否则就是一个异常状态。</p><p>OceanBase会尽力自动去保障三副本成员状态的正常，否则就会告警等运维处理。这点也是强制性的约束，也是跟传统关系数据库不一样的地方。</p><h3 id="核心特性"><a href="#核心特性" class="headerlink" title="核心特性"></a>核心特性</h3><h4 id="分布性"><a href="#分布性" class="headerlink" title="分布性"></a>分布性</h4><ul><li>集群形式部署，支持水平扩展</li><li>在线扩容/缩容，自动负载均衡</li><li>跨机房/城市部署，容灾/多活</li></ul><h4 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用</h4><ul><li>基于Paxos协议，强一致性同步</li><li>少数副本故障，数据不丢，服务自动回复</li></ul><h4 id="多租户"><a href="#多租户" class="headerlink" title="多租户"></a>多租户</h4><ul><li>按需分配实例，即时创建和销毁</li><li>在线扩容/缩容</li><li>租户之间资源隔离</li></ul><h4 id="高兼容"><a href="#高兼容" class="headerlink" title="高兼容"></a>高兼容</h4><ul><li>Oracle/MySQL两种兼容模式</li><li>数据平滑迁移</li><li>原生的SQL和事物引擎</li></ul><h2 id="集群技术架构"><a href="#集群技术架构" class="headerlink" title="集群技术架构"></a>集群技术架构</h2><h3 id="Paxos协议与负载均衡"><a href="#Paxos协议与负载均衡" class="headerlink" title="Paxos协议与负载均衡"></a>Paxos协议与负载均衡</h3><h4 id="分区-1"><a href="#分区-1" class="headerlink" title="分区"></a>分区</h4><ul><li>当一个表很大，能够水平拆分为若干分区，每个分区包含表的若干记录。根据行数据到分区的映射关系不同，分为hash分区，List分区，range分区</li><li>每个分区还能过通过不同维度再分，称为二级分区</li><li>分区是OceanBase数据架构的基本单元，传统数据库的分区表在分布式系统上实现</li></ul><h4 id="副本"><a href="#副本" class="headerlink" title="副本"></a>副本</h4><ul><li>为数据安全和高可用的数据服务，分区的数据在物理层面上会存储多份，每一份叫做分区的一个副本</li><li>副本根据负载和特定的策略，由系统自动调度分散在多个Server上。副本支持迁移，复制，增删，类型转换等管理操作</li></ul><h5 id="副本构成"><a href="#副本构成" class="headerlink" title="副本构成"></a>副本构成</h5><p>副本构成由记录事务的日志，存储再内存的Memtable，磁盘上的静态数据SSTable</p><h5 id="副本类型"><a href="#副本类型" class="headerlink" title="副本类型"></a>副本类型</h5><ul><li>一个分区在一个zone中最多由一个全功能或日志型副本</li><li>只读型副本在同一个zone可以有多个<h6 id="全能型副本"><a href="#全能型副本" class="headerlink" title="全能型副本"></a>全能型副本</h6>拥有事务日志，MemTable和SSTable等全部完整的数据和功能，它可以随时快速切换为leader对外提供服务。<h6 id="日志型副本"><a href="#日志型副本" class="headerlink" title="日志型副本"></a>日志型副本</h6>只包含日志的副本，没有Memtable和SSTable。它参与日志投票并对外提供日志服务，可以参与其他副本的恢复，但子集不能变为主提供数据库服务。因为日志型副本所消耗的物理资源更少，它可以有效降低最后副本机器的成本，降低集群的总体成本<h6 id="只读型副本"><a href="#只读型副本" class="headerlink" title="只读型副本"></a>只读型副本</h6>包含完整的日志，MemTable和SSTable等，但是它的日志比较特殊。它不作为paxos成员参与日志的投票，而是作为一个观察者实时追赶paxos成员的日志，并在本地回放。可以在业务读取数据的一致性要求不高的时候，提供只读服务。因其不加入paxos成员组，又不会造成投票成员增加导致事务提交延时的增加</li></ul><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230721195400362.png" alt="image-20230721195400362"></p><p>如上图，按照ID分为三个hash分区，每个分区再按照交易时间分为四个二级的range分区，然后会生成多份副本，副本数量会因集群数量而变化，一般来说会每个zone内只会包含一个副本</p><h4 id="多副本一致性协议"><a href="#多副本一致性协议" class="headerlink" title="多副本一致性协议"></a>多副本一致性协议</h4><h5 id="以分区为单位组建Paxos协议组"><a href="#以分区为单位组建Paxos协议组" class="headerlink" title="以分区为单位组建Paxos协议组"></a>以分区为单位组建Paxos协议组</h5><p>每个分区都有多份副本（Replica），自动建立Paxos组，在分区级用多副本保证数据可靠性和服务高可用，数据管理更加灵活方便</p><h5 id="自动选举主副本"><a href="#自动选举主副本" class="headerlink" title="自动选举主副本"></a>自动选举主副本</h5><p>OB自动生成多份副本，多副本自动选举主副本，主副本提供服务</p><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230721224526185.png" alt="image-20230721224526185"></p><h4 id="自动负载均衡与智能路由"><a href="#自动负载均衡与智能路由" class="headerlink" title="自动负载均衡与智能路由"></a>自动负载均衡与智能路由</h4><h5 id="自动负载均衡"><a href="#自动负载均衡" class="headerlink" title="自动负载均衡"></a>自动负载均衡</h5><p>主副本均匀打散到各个服务器中，使得各个服务器都能承载业务流量</p><h5 id="OB-Server相互独立"><a href="#OB-Server相互独立" class="headerlink" title="OB Server相互独立"></a>OB Server相互独立</h5><p>每台OB Server均可以独立执行SQL，如果应用需要访问的数据不同机器上，OB Server自动将请求路由至数据所在机器，对业务完全透明。</p><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230721225131923.png" alt="image-20230721225131923"></p><h4 id="多副本同步Redo-Log-确保数据持久化"><a href="#多副本同步Redo-Log-确保数据持久化" class="headerlink" title="多副本同步Redo Log 确保数据持久化"></a>多副本同步Redo Log 确保数据持久化</h4><ul><li>Paxos组成员通过Redo-Log的多数派强同步确保数据的持久化</li><li>Leader无需等待所有Follower的反馈，多数派完成同步即可向应用反馈成功</li></ul><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230724153630019.png" alt="image-20230724153630019"></p><ol><li>应用写数据到P2分区。Zone2-OB Server1的P2为主副本（Leader），承接业务需求。</li><li>将Redo-Log同步请求发送到Zone1-OB Server1和Zone3-OB Server1中的P2从副本（Follower）；</li><li>任何一个Follower完成Redo-Log落盘并将响应返回给Leader后，Leader即认为Redo-Log完成强同步，无需再等待其他Follower的反馈；</li><li>Leader反馈应用操作完成。</li></ol><h4 id="智能路由服务，应用透明访问"><a href="#智能路由服务，应用透明访问" class="headerlink" title="智能路由服务，应用透明访问"></a>智能路由服务，应用透明访问</h4><h5 id="高效路由转发"><a href="#高效路由转发" class="headerlink" title="高效路由转发"></a>高效路由转发</h5><ul><li>对SQL做基本解析，确定对应Leader所在机器；</li><li>反向代理，将请求路由至对应Leader；Leader位置无法确定时随机选择OB Server；</li><li>轻量SQL解析 + 快速转发，保证高性能，单OB Proxy每秒转发百万次请求。</li></ul><h5 id="“非”计算节点，无状态"><a href="#“非”计算节点，无状态" class="headerlink" title="“非”计算节点，无状态"></a>“非”计算节点，无状态</h5><ul><li>每个OB Proxy是一个“无状态”的服务进程，不做数据持久化，对部署位置无要求；</li><li>OB Proxy不参与数据库引擎的计算任务，不参与事务处理；</li><li>多个OB Proxy之间无联系，可通过F5/SLB组成负载均衡集群；</li><li>不需要独立服务器，可以与OB Server共用一台服务器，如果应用对实时性要求高，也可以将OB Proxy部署到应用服务器中。</li></ul><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230724160743540.png" alt="image-20230724160743540"></p><p>OB Proxy的故障是不会影响事务的功能，事务，持久化，落盘基本是由OB Server来完成。</p><h4 id="设置Primary-Zone，业务汇聚到特定Zone"><a href="#设置Primary-Zone，业务汇聚到特定Zone" class="headerlink" title="设置Primary Zone，业务汇聚到特定Zone"></a>设置Primary Zone，业务汇聚到特定Zone</h4><p>通过为不同的租户配置不同的Primary Zone，可以将业务流量集中到若干Zone中，减少跨Zone以及服务器的操作。Zone List，逗号两侧优先级相同，分号左侧优先级高于右侧</p><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230724161140837.png" alt="image-20230724161140837"></p><h4 id="Primary-Zone有租户，数据库和表不同的级别。"><a href="#Primary-Zone有租户，数据库和表不同的级别。" class="headerlink" title="Primary Zone有租户，数据库和表不同的级别。"></a>Primary Zone有租户，数据库和表不同的级别。</h4><ul><li>如无特殊指定，自动继承上级对象的Primary_zone:database继承租户的primary_zone设置，table继承database的primary_zone设置。</li><li>database和table可以指定各自的primary_zone，不必和上一级对象的设置保持一致；提供更加灵活的负载均衡策略。</li></ul><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230724162242300.png" alt="image-20230724162242300"></p><h4 id="Table-Group-将多个表的相同分区ID的主副本聚集在一个OB-Server中，减少分布式事务引入的开销"><a href="#Table-Group-将多个表的相同分区ID的主副本聚集在一个OB-Server中，减少分布式事务引入的开销" class="headerlink" title="Table Group,将多个表的相同分区ID的主副本聚集在一个OB Server中，减少分布式事务引入的开销"></a>Table Group,将多个表的相同分区ID的主副本聚集在一个OB Server中，减少分布式事务引入的开销</h4><ul><li>如果多个表的分区方式完全相同（分区类型，分区键个数，分区数量等），可以在逻辑上将这些表归属到同一个Table Group中，以影响动态负载均衡的策略</li><li>同一个Table Group中的所有表，分区ID（partition_id） 相同的所有分区，他们的leader在同一个observer上：在不影响全局负载均衡的前提下，可有效减少分布式事务引入的跨机访问开销。</li><li>如果负载均衡被打破（服务器故障后，扩容缩容等），Table Group中的所有表会作为一个整体来调整分区分布和Leader分布</li><li>动态创建和删除，并且对上层应用完全透明。</li><li>如果租户的unit_num=1 且 primary_zone只有一个zone，不需要tablegroup。</li></ul><p>RDS实例，mysql扩容主备切换，ELR提前解行锁.。。。。。持续更新学习中………</p><h2 id="OBCA模拟题库"><a href="#OBCA模拟题库" class="headerlink" title="OBCA模拟题库"></a>OBCA模拟题库</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">【判断题】分库分表的架构虽然解决了集中式数据库的扩展性问题，但也带来了新的问题(不支持复杂SQL， 较难保证分布式事务的ACID等) 。T</span><br><span class="line">【判断题】TPC-C就是一个跑分测试， 没有什么规则限制,只要能跑高分就行 F</span><br><span class="line">【判断题】Ocean Base数据库是在阿里和蚂蚁内部孵化了10年后才逐步推广到外部市场的。T</span><br><span class="line">【判断题】Ocean Base数据库是基于开源数据库的再发行产品。 F</span><br><span class="line">【判断题】Ocean Base已发布到阿里云公有云及专有云中。 T</span><br><span class="line">【判断题】Ocean Base只支持X 86架构的CPU， 不支持国产CPU(如鲲鹏、海光、飞腾等) F</span><br><span class="line">【判断题】Zone是个逻辑概念， 是给集群内的一批机器打上同一个tag， 属于同一个tag的服务器归属一个Zone。T</span><br><span class="line">【判断题】Zone可以对应不同的城市， 或者一个城市的不同机房， 或者一个机房的不同机架。 T</span><br><span class="line">【判断题】租户的资源池一旦创建完成，就不可改变。 F</span><br><span class="line">【判断题】分区的副本只包含硬盘上的静态数据(S STable) ， 不包括Mem Table数据和日志数据。 F</span><br><span class="line">【判断题】主副本只能打散到所有Zone内， 不能聚焦到一个Zone内 F</span><br><span class="line">【判断题】每台OBServer是相对独立的， 都有自己独立的SQL引擎， 如果应用需要的数据不在当前OBServer上， 该OB&lt;br&gt;Server将协调其他OBServer的数据， 统一反馈给应用， 这个过程对应用是透明的。 T</span><br><span class="line">【判断题】主副本通过同步Redo-Log日志的方式实现可靠性， 主副本需要收到所有从副本落盘成功的消息后才能响应应用。 F</span><br><span class="line">【判断题】企业在一个城市有2个机房， 将2个Zone部署到1个机房中， 将另一个Zone部署到另一个机房中， 可以提供机房级的容灾。 F</span><br><span class="line">【判断题】 Ocean Base可以支持在一个集群中同时支持MySQL租户和Oracle租户。 T</span><br><span class="line">【判断题】使用Explain命令查看SQL执行计划时， SQL也会真正执行。 F</span><br><span class="line">【判断题】合井必须依赖Ocean Base自动完成， 无法手工启动合并。 F</span><br><span class="line">【判断题】Ocean Base的数据在磁盘中按主键有序排列。 T</span><br><span class="line">【判断题】会话变量只对当前会话生效，不影响该租户下的其他会话。 T</span><br><span class="line">【判断题】Global级(租户级) 变量修改后， 对当前已经打开的session也依然生效。 F</span><br><span class="line">【判断题】如果同时存在集群级别参数和租户级别参数，那么集群级别参数将覆盖租户级别参数。 T</span><br><span class="line"></span><br><span class="line">【多选题】传统的集中式关系型数据库面临哪些挑战? AC</span><br><span class="line">A：成本高：运行在高端服务器、小型机、高端存储等专有硬件上；</span><br><span class="line">B：生态欠缺：文档、培训、应用等都不足；</span><br><span class="line">C：扩展性差：无法摆脱单机的架构，只能纵向扩展，无法横向扩展；</span><br><span class="line">D：性能差：任何时候，传统集中式数据库的性能都比分布式数据库较差；</span><br><span class="line"></span><br><span class="line">【多选题】Ocean Base的核心特性有哪些? ABCD</span><br><span class="line">A：高扩展，可以使用普通的PC服务器进行横向扩展；</span><br><span class="line">B：高性能，峰值峰值6，100万次/秒，单表最大3，200亿行；</span><br><span class="line">C：高可用， 通过Paxos协议保证强一致性， RPO=0， R TO&lt;30秒；</span><br><span class="line">D：高兼容， 支持MySQL及Oracle两种模式， 降低业务迁移改造成本；</span><br><span class="line">E：高成本，使用小型机、高端存储等专有硬件；</span><br><span class="line"></span><br><span class="line">【多选题】Ocean Base主要有哪些产品组成? ABCD</span><br><span class="line">A：数据库内核：提供SQL引擎及存储引擎， 同时兼容MySQL和Oracle模式； 使用Paxos协议确保高可用性；</span><br><span class="line">B：OCP云管理平台：给管理员提供的管理工具， 提供集群管理、Zone管理、租户管理等功能；</span><br><span class="line">C：OMS数据迁移工具：提供基线数据和增量数据的同步功能， 可以从数据仓库订阅数据链路、从异构数据库迁移数据；</span><br><span class="line">D：ODC开发者中心：提供数据库日常开发、SQL诊断、会话管理及数据导入导出能功能。</span><br><span class="line"></span><br><span class="line">【多选题】Ocean Base支持哪些事务隔离级别 BC</span><br><span class="line">A：脏读 </span><br><span class="line">B：Read-Committed </span><br><span class="line">C：Serializable</span><br><span class="line"></span><br><span class="line">【多选题】以下对OB Proxy的描述是正确的  AD</span><br><span class="line">A：OB Proxy位于应用和OBServer之间， 将应用的请求路由到合适的OBServer；</span><br><span class="line">B：OB Proxy需要部署到一台独立的服务器上， 以保证其性能要求；</span><br><span class="line">C：OB Proxy参与数据库引擎的计算任务以及事务处理；</span><br><span class="line">D：OB Proxy是一个“无状态”的服务进程， 不做数据持久化</span><br><span class="line"></span><br><span class="line">【多选题】Ocean Base备份恢复业务支持哪些存储介质  AD</span><br><span class="line">A：NFS B：IP-SAN C：FC-SAN D：阿里云OSS</span><br><span class="line"></span><br><span class="line">【多选题】参数有哪两个级别?  AD</span><br><span class="line">A：集群级</span><br><span class="line">B：Zone级</span><br><span class="line">C：OBServer级</span><br><span class="line">D：租户级</span><br><span class="line"></span><br><span class="line">【单选题】Ocean Base是一个什么类型的数据库  C</span><br><span class="line">A：集中式数据库；</span><br><span class="line">B：No SQL数据库；</span><br><span class="line">C：分布式关系型数据库；</span><br><span class="line"></span><br><span class="line">【单选题】Ocean Base是一个集群， 以下哪个组件管理整个集群， 支持全局DDL、集群数据合并等功能。  B</span><br><span class="line">A：OB Proxy</span><br><span class="line">B：Root Service总控服务</span><br><span class="line">C：OCP管理平台 </span><br><span class="line">D：ODC开发者中心</span><br><span class="line"></span><br><span class="line">【单选题】Ocean Base集群可以同时支持MySQL和Oracle的租户， 哪个黑屏工具可以连接到Oracle租户  A</span><br><span class="line">A：Ocean Base客户端；</span><br><span class="line">B：标准MySQL客户端</span><br><span class="line"></span><br><span class="line">【单选题】Ocean Base不支持什么操作系统  B</span><br><span class="line">A：CentOS； </span><br><span class="line">B：Windows </span><br><span class="line">C：中标麒麟</span><br><span class="line">D：银河麒麟</span><br><span class="line"></span><br><span class="line">【单选题】如果一个Ocean Base集群有3个Zone， 每个Zone有5台OBSer er。那么一个分区有几份副本呢?  B</span><br><span class="line">A：10 B：3 C：6 D：5</span><br><span class="line"></span><br><span class="line">【单选题】如果一个集群有3个Zone， 每个Zone有5台OBServer。一个租户对应的资源池的Unit eNum=3， 最终该集群有多少个服务器中有该租户的资源单元呢?  B</span><br><span class="line">A： 15 B：9 C：45 D：30</span><br><span class="line"></span><br><span class="line">【单选题】Ocean Base是以() 为单位组建Paxos协议组。  D</span><br><span class="line">A：租户 B：数据库 C：表 D：分区</span><br><span class="line"></span><br><span class="line">【单选题】以下关于Ocean Base扩容和缩容描述正确的是。  C</span><br><span class="line">A：需要管理员停止业务 </span><br><span class="line">B：需要业务做一定的修改</span><br><span class="line">C：支持动态扩容和缩容，对业务无感知</span><br><span class="line"></span><br><span class="line">【单选题】Ocean Base使用两阶段提交协议保证事务的原子性， 在两阶段提交协议中， 谁是协调者呢?  B</span><br><span class="line">A：OB Proxy </span><br><span class="line">B：OBServer</span><br><span class="line">C：Root Service总控服务</span><br><span class="line">D：OCP云管理平台</span><br><span class="line"></span><br><span class="line">【单选题】Ocean Base使用哪种技术解决了读写互斥的问题。  A</span><br><span class="line">A：MVCC</span><br><span class="line">B：Paxos协议</span><br><span class="line">C：全局快照</span><br><span class="line">D：互斥锁</span><br><span class="line"></span><br><span class="line">单选题】使用JDBC连接Oracle租户时， 需要使用哪种JDBC驱动。  C</span><br><span class="line">A：MySQL标准的JDBC驱动</span><br><span class="line">B：Oracle标准的JDBC驱动</span><br><span class="line">C：Ocean Base自己开发的JDBC驱动</span><br><span class="line"></span><br><span class="line">【单选题】为了达到更好的压缩效果， Ocean Base一般会进行进行几次压缩  B</span><br><span class="line">A：1次 B：2次 C：3次 D：4次</span><br><span class="line"></span><br><span class="line">【单选题】mini freeze是简单的dump操作， 多个mini freeze的数据会(  )合并； 多个minor freeze会(  ) 合并， 但不会和S STable合并。  B</span><br><span class="line">A：实时、异步</span><br><span class="line">B：异步、实时</span><br><span class="line">C：实时、离散</span><br><span class="line">D：离散、实时</span><br><span class="line"></span><br><span class="line">【单选题】 Alter system命令可以修改集群参数和租户参数， 如该命令指定Zone或者OBServer， 最多可以同时指定几个?  A</span><br><span class="line">A：1个 B：2个C：3个D：4个</span><br><span class="line"></span><br><span class="line">【单选题】通过哪个命令可以查询参数的属性。  A</span><br><span class="line">A：show parameters like&#x27;%&lt;pattern&gt;%&#x27;；</span><br><span class="line">B：alter system set&lt;name&gt;=&lt;value&gt;；</span><br><span class="line">C：show variables like&#x27;%&lt;pattern&gt;%&#x27;；</span><br><span class="line">D：set@@global.&lt;name&gt;=&lt;value&gt;</span><br><span class="line"></span><br><span class="line">【单选题】以下哪个组件提供图形化的管理界面，支持集群管理、租户管理、监控告警等功能?  B</span><br><span class="line">A：ODC开发者中心 </span><br><span class="line">B：OCP云管理平台</span><br><span class="line">C：OB Proxy </span><br><span class="line">D：OBServer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">判断：</span><br><span class="line">1.一个租户在同一个 Server 上可以有一个或多个资源单元 UNIT   错误</span><br><span class="line">2.创建资源单元仅仅指定  CPU、MEMORY 参数即可，无需指定 OPS、DISK_SIZE、SESSION_NUM参数  错误</span><br><span class="line">3.OCEANBASE 在少数副本不可用的情况下，可以实现 RPO=0,RTO&lt;30 秒    正确</span><br><span class="line">4.Zone 可以对应不同的城市，或者一个城市的不同机房、或者一个机房的不同机架，以实现不同级别的容灾   正确</span><br><span class="line">5.主副本只能打散到所有 Zone 内，实现访问流量的负载均衡，不能将主副本聚焦到一个Zone内。   错误</span><br><span class="line">6.扩容服务器加入集群后，集群会基于负载均衡的策略，将主副本及从副本迁移到扩容服务器中，以实现整体的负载均衡    正确</span><br><span class="line">7.租户逻辑上类似传统数据库实例，创建完成后，每个租户都拥有自己的专属进程     正确</span><br><span class="line">8.OceanBase 的 Paxos 协议，不同于传统的主备库或者双选方案，可以彻底规避在容灾场景下的脑裂问题（也就是同时又两个主数据库的场景）     正确</span><br><span class="line">9.修改资源池可以实现租户的另一种扩容/缩容的方式，比如在每个 zone 中增加/减少节</span><br><span class="line">点数量，可以通过修改资源池的 unit_num 来实现   正确</span><br><span class="line">10.创建租户时，需要指定租户类型为 Oracle 租户或者 MYSQL 租户，以满足不同开发者的需求。   正确</span><br><span class="line">11.同一个资源单元定义 unit cofig(比如 2C8G，或者 4C16G 等)，可以被多个资源池使用。   错误</span><br><span class="line"></span><br><span class="line">多选：</span><br><span class="line"></span><br><span class="line">1.OMS 实时同步工具是异构数据库迁移到 OceanBase 的利器，OMS 支持哪些功： BCDE</span><br><span class="line">A:支持会话管理和系统全局变量的可视化修改，用户记忆变量的难度</span><br><span class="line">B:支持多种类型数据源，支持包括 Oracle、MYSQL、DB2、OceanBase 等数据库到</span><br><span class="line">OceanBase 的全量迁移和增量实时数据同步</span><br><span class="line">C:一站式交互，数据迁移全生命周期管理，数据迁移的创建、配置和监控都在管控界面上连贯操作完成，交互简便</span><br><span class="line">D：兼容性评估和改造：异构数据迁移 OceanBase 的对象兼容性评估和改写建议，极大降低业务迁移的门槛和业务改造的难度。</span><br><span class="line">E:多重数据校验：提供多种方式校验的保护。要更加全面、省时、高效地保证数据质量</span><br><span class="line"></span><br><span class="line">2.关于 OceanBase 的 Zone，以下说法正确的是CDEF </span><br><span class="line">A:每个 Zone 可以包含一个分区的多个副本</span><br><span class="line">B:不同 Zone 一定要部署在不同机房</span><br><span class="line">C:一个分区的多个副本应分布在不同的 Zone 中，每个 Zone 有且只有分区的一个全功能副本</span><br><span class="line">D:Available Zone 的含义是可用区，通常指一个机房</span><br><span class="line">E:一个 OceanBase 集群由若干个 Zone 组成</span><br><span class="line">F:一个 Zone 包括若干物理服务器</span><br><span class="line">3.关于 OceanBase 的系统参数的生效范围，以下说法正确的是： ABC </span><br><span class="line">A:可以在某台 OBServer 生效</span><br><span class="line">B:可以在某个 Zone 生效</span><br><span class="line">C:可以在集群范围生效</span><br><span class="line">D:可以在某个 Region 生效</span><br><span class="line">4.随着业务不断发展，原有租户的资源无法满足业务需要，有哪些扩容方式？ BC </span><br><span class="line">A:无法对租户进行扩容，需要创建一个新的租户满足业务需要</span><br><span class="line">B:调整资源池中，资源单元（resource unit）的数量，如原数量是 1，可以增加为 2</span><br><span class="line">C:调整资源池里的资源单元（resource unit）的规则，比如之前规格是 2C8G,可以调整为 4C16G</span><br><span class="line">5.RootService 总控服务提供资源分配及调度功能，主要包括哪些功能： ABCD</span><br><span class="line"> A：分区及副本管理</span><br><span class="line">B: 动态负载均衡</span><br><span class="line">C:SQL 引擎</span><br><span class="line">D:扩容和缩容</span><br><span class="line">6.关于 OceanBase 的修改系统参数命令 ALTER SYSTEM SET XX=’YY’，以下说法正确的是：   BCDE</span><br><span class="line">A:如果不要任何条件，则会返回错误；</span><br><span class="line">B:可以修改该 Parameter 在某个 zone 上的值</span><br><span class="line">C:可以修改该 Parameter 在某台具体的 OBServer 上的值</span><br><span class="line">D:如果不带任何条件，则修改所有 OBServer 的值</span><br><span class="line">E:可以修改 Parameter 在某个 Region 的值</span><br><span class="line">7.关于 OceanBase 的分区 Partition，以下说法正确的是：AB</span><br><span class="line">A:数据表根据分区规则，拆分成多个分区，每个分区包括表中的若干行记录</span><br><span class="line">B：每个分区，还可以用不同的分区维度再进行分区，叫做二级分区 C:OceanBase 只支持一级分区，不支持二级分区</span><br><span class="line">D: OceanBase 的分区是数据迁移的最小单元，也是高可用切换的最小单元</span><br><span class="line">E:OceanBase 支持表的自动分区分裂</span><br><span class="line">8.关于租户的扩容方式，以下说法正确的是：  AB</span><br><span class="line">A：租户扩容，可先通过添加服务节点，完成集群扩容，再通过增加资源单元的个数完成租户扩容</span><br><span class="line">B:如果集群和节点资源足够，可以直接修改租户资源池相关的资源单元规格大小，进行扩容</span><br><span class="line">C:OceanBase 是分布式集群具有横向扩展的能力，租户扩容仅仅需要添加阶段即可，无需扩容租户的资源单元</span><br><span class="line">D:租户无法进行扩容，如果资源无法满足需求，需要重新建立更大资源池的租户。</span><br><span class="line"></span><br><span class="line">9.系统管理员可以根据业务需要创建不同的租户，租户具有哪些特性 ABCD </span><br><span class="line">A:有自己独立的系统变量</span><br><span class="line">B:有独立的 information_schema 等系统数据库</span><br><span class="line">C:可以创建自己的用户</span><br><span class="line">D:可以创建数据库，表等所有对象</span><br><span class="line">11.关于 OceanBase 的应用日志级别，以下说法正确的是： CDE </span><br><span class="line">A:warn 警告，用于记录严重错误，需要立即处理</span><br><span class="line">B：info 提示，用户记录系统运行的当前状态，该信息为错误信息</span><br><span class="line">C:ERROR 严重错误，用于记录系统的故障信息，且必须进行故障排除，否则系统不可用</span><br><span class="line">D: info 提示，用户记录系统运行的当前状态，该信息为正常信息</span><br><span class="line">E:warn 警告，用于记录可能会出现的潜在错误</span><br><span class="line"></span><br><span class="line">12.分区数据一般有多份副本，OceanBase 的 副本有什么类型：ACD</span><br><span class="line">A:全能型B 只写型 C:日志型 D:只读型</span><br><span class="line"></span><br><span class="line">13.OceanBase 开发者中心 ODC 是为 OceanBase 数据库量身打造的企业数据库开发平台，主要支持哪些功能 ABCDE </span><br><span class="line">A:提供引导式创建和可视化修改各类数据库对象的服务</span><br><span class="line">B:支持多种文件格式的导入和导出</span><br><span class="line">C:通过 WebSQL 技术为开发人员提供 SQL 语法高亮、格式化、只能提示等贴心特性、支持 PL 对象及匿名快的编译、运行调试</span><br><span class="line">D:实时管控数据库会话访问，支持查看和终止会话，且提供 SQL 执行计划分析和 SQL 调优指导服务</span><br><span class="line">E:支持会话变量和系统全局变量的可视化修改，降低用户记忆变量的难度</span><br><span class="line"></span><br><span class="line">14.关于 OceanBase 的租户权限管理,以下说法正确的是：AB</span><br><span class="line">A:任何租户（，不论是系统租户还是普通租户）下的用户不能跨租户访问其他普通租户下的用户数据</span><br><span class="line">B:只有系统租户下的管理员用户才有集群管理的权限，执行系统管理操作，如创建/删除普通租户。设置系统配置参数，开启每日合并操作</span><br><span class="line">C:系统租户下的管理员用户可以访问其他普通租户的用户数据</span><br><span class="line">D:系统租户下的管理员用户可以给其他普通租户的用户进行授权，使得普通租户的用户拥有系统管理员的权限</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">15.关于 OCP 的告警功能，下列说法正确的是：  ABCDEF</span><br><span class="line">A:OCP 告警依赖专有云底座</span><br><span class="line">B:可以查看告警列表</span><br><span class="line">C:可以调整告警阈值</span><br><span class="line">D:不支持用户修改告警阈值</span><br><span class="line">E:可以自定义告警发送对象</span><br><span class="line">F:可以调整告警开关，确定哪些项需要监控</span><br><span class="line"></span><br><span class="line">16.关于 OceanBase 实物引擎的 MVCC 多版本并发控制，以下说法正确的是： ACD </span><br><span class="line">A: 读操作读取特定快照版本的已提交数据</span><br><span class="line">B：写会阻塞读操作</span><br><span class="line">C: 所有修改的行加互斥锁、实现写-写互斥</span><br><span class="line">D: 读写互不阻塞</span><br><span class="line">17.OceanBase 支持哪些分区方式的分区表 ABD </span><br><span class="line">A：Range </span><br><span class="line">B：Hash </span><br><span class="line">C：Datetime </span><br><span class="line">D：list</span><br><span class="line">19.以下哪个描述不是 OceanBase 的架构特点：中心管控</span><br><span class="line">20. 租户创建完成后，可以使用黑屏客户端连接数据库，除了指定数据库的 IP、端口号、用户名、密码等信息外，OceanBase 一般用户名使用什么格式 </span><br><span class="line">用户名@租户名  例如 root@sys</span><br><span class="line">21.建立 table group 的主要目的是：减少跨机分布式事物</span><br><span class="line">22. OceanBase 产品的数据库内核是什么   完全自主研发</span><br><span class="line">23.当应用向数据库写数据时，默认会访问主副本，此次主副本会同步（）到从副本，保证数据的高可用 D</span><br><span class="line">A:undo-log 日志</span><br><span class="line">B:系统日志</span><br><span class="line">C:心跳消息</span><br><span class="line">D：redo-log 日志</span><br><span class="line"></span><br><span class="line">24.以下哪个组件提供图形化的管理界面，支持集群管理、租户管理、监控警告等功能。  OCP云管理平台</span><br><span class="line">25.部署 OceanBase 集群时，各个 OBServer 的 RPC 允许的时钟偏差最大是多少100毫秒</span><br><span class="line">26.如果一个 OceanBase 集群由 5 个 Zone，每个 Zone 有 10 台 OB Server，那么一个分区最多有几份全功能型副本   5个</span><br><span class="line">27.Linux 系统一般用什么用户来部署 OceanBaseADMIN</span><br><span class="line">28.OceanBase 服务器要求使用的磁盘类型: SSD固态磁盘</span><br><span class="line">29.假设OceanBase有3个Zone,其中2个Zone部署在一个城市的两个机房中，另外一个Zone部署在另外一个城市的一个机房中。如果同城的一个机房宕机，下面说法正确的是？    强一致同步延迟不变</span><br><span class="line">30.Major_freeze_duty_time 设置为 02:00 意味着什么每日凌晨两点，系统自动发起一次内存冻结操作</span><br><span class="line">31.关于 OceanBase 事物引擎一致性特点，描述正确的是：保证主键唯一等一致性约束</span><br><span class="line">32.关于 OceanBase 资源隔离，以下说法正确的是     OceanBase采用租户隔离</span><br><span class="line">33.管理员通过哪条命令创建资源池create resource pool</span><br><span class="line">34.OceanBase 是靠哪种基础架构实现写入高性能的 LSM-TTREE</span><br><span class="line">35.如果一个集群有 3 个 Zone，每个 Zone 有 5 台 OBServer，一个租户对应的资源池的 Unit Num=4,最终该集群有多少个服务器中有该租户的资源单元呢。    3*4=12 个</span><br></pre></td></tr></table></figure><h2 id="感谢OceanBase"><a href="#感谢OceanBase" class="headerlink" title="感谢OceanBase"></a>感谢OceanBase</h2><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230724163848260.png" alt="image-20230724163848260"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;OceanBase&quot;&gt;&lt;a href=&quot;#OceanBase&quot; class=&quot;headerlink&quot; title=&quot;OceanBase&quot;&gt;&lt;/a&gt;OceanBase&lt;/h1&gt;&lt;h2 id=&quot;传统集中式数据库面临的挑战&quot;&gt;&lt;a href=&quot;#传统集中式数据库面临的挑</summary>
      
    
    
    
    <category term="数据库" scheme="https://kalyan-zitiu.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="Study Note" scheme="https://kalyan-zitiu.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/Study-Note/"/>
    
    
    <category term="OceanBase" scheme="https://kalyan-zitiu.github.io/tags/OceanBase/"/>
    
  </entry>
  
  <entry>
    <title>Basic Cryptography</title>
    <link href="https://kalyan-zitiu.github.io/2023/06/29/Sercet/"/>
    <id>https://kalyan-zitiu.github.io/2023/06/29/Sercet/</id>
    <published>2023-06-29T08:50:04.000Z</published>
    <updated>2023-07-02T16:05:03.029Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础密码学"><a href="#基础密码学" class="headerlink" title="基础密码学"></a>基础密码学</h1><p>密码学是研究信息的保密性、完整性和认证性的学科。它在现代通信和计算机系统中起着关键作用，保护着敏感数据的安全。</p><h2 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h2><p>对称加密是一种加密方法，其中使用相同的密钥进行加密和解密。以下是一些常见的对称加密算法和特点：</p><table><thead><tr><th>算法</th><th>特点</th></tr></thead><tbody><tr><td>DES</td><td>数据加密标准，使用56位密钥</td></tr><tr><td>AES</td><td>高级加密标准，使用128、192或256位密钥</td></tr><tr><td>3DES</td><td>三重数据加密标准，对数据进行三次加密</td></tr><tr><td>RC4</td><td>流密码算法，适用于嵌入式设备</td></tr></tbody></table><h2 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h2><p>非对称加密使用不同的密钥进行加密和解密。它包括公钥和私钥，其中公钥用于加密，私钥用于解密。以下是一些常见的非对称加密算法和特点：</p><table><thead><tr><th>算法</th><th>特点</th></tr></thead><tbody><tr><td>RSA</td><td>基于大素数分解的加密算法</td></tr><tr><td>Diffie-Hellman</td><td>密钥交换算法，用于安全地共享密钥</td></tr><tr><td>ECC</td><td>椭圆曲线密码学，使用较短的密钥提供相同的安全性</td></tr></tbody></table><h2 id="哈希函数"><a href="#哈希函数" class="headerlink" title="哈希函数"></a>哈希函数</h2><p>哈希函数将输入数据转换为固定长度的哈希值。它的主要特点是输入的任何小改变都会导致输出值的巨大改变。以下是一些常见的哈希函数和特点：</p><table><thead><tr><th>函数</th><th>特点</th></tr></thead><tbody><tr><td>MD5</td><td>128位哈希值，易于碰撞攻击</td></tr><tr><td>SHA-1</td><td>160位哈希值，被认为不够安全</td></tr><tr><td>SHA-256</td><td>256位哈希值，广泛用于数字签名和认证</td></tr></tbody></table><h2 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h2><p>数字签名用于验证消息的完整性和来源。它使用私钥对消息进行签名，然后使用公钥进行验证。以下是一些常见的数字签名算法和特点：</p><table><thead><tr><th>算法</th><th>特点</th></tr></thead><tbody><tr><td>RSA</td><td>基于大素数分解的加密算法</td></tr><tr><td>DSA</td><td>数字签名算法，用于确保消息的完整性和认证</td></tr><tr><td>ECDSA</td><td>椭圆曲线数字签名算法，提供相同安全性下较短的密钥长度</td></tr></tbody></table><h2 id="密钥交换"><a href="#密钥交换" class="headerlink" title="密钥交换"></a>密钥交换</h2><p>密钥交换是在通信双方之间安全地共享密钥的过程。以下是一些常见的密钥交换协议和特点：</p><table><thead><tr><th>协议</th><th>特点</th></tr></thead><tbody><tr><td>Diffie-Hellman</td><td>公钥密码学协议，双方通过交换信息生成共享密钥</td></tr><tr><td>RSA 密钥交换</td><td>基于RSA算法的密钥交换协议</td></tr><tr><td>ECDH</td><td>基于椭圆曲线密码学的密钥交换协议，提供较短的密钥长度</td></tr></tbody></table><h2 id="消息认证码"><a href="#消息认证码" class="headerlink" title="消息认证码"></a>消息认证码</h2><p>消息认证码（Message Authentication Code，MAC）用于验证消息的完整性和真实性，以防止消息被篡改。以下是一些常见的消息认证码算法和特点：</p><table><thead><tr><th>算法</th><th>特点</th></tr></thead><tbody><tr><td>HMAC</td><td>基于散列函数和密钥的消息认证码算法</td></tr><tr><td>CMAC</td><td>基于块密码的消息认证码算法</td></tr><tr><td>Poly1305</td><td>使用特殊的多项式计算的消息认证码算法</td></tr></tbody></table><h2 id="数字证书"><a href="#数字证书" class="headerlink" title="数字证书"></a>数字证书</h2><p>数字证书用于验证实体的身份和确保通信的安全。它包含了实体的公钥和其他身份信息，并由数字证书颁发机构（Certificate Authority，CA）签名。以下是一些与数字证书相关的概念和术语：</p><table><thead><tr><th>术语</th><th>解释</th></tr></thead><tbody><tr><td>公钥证书（Public Key Certificate）</td><td>包含公钥和实体身份信息的数字证书</td></tr><tr><td>数字签名（Digital Signature）</td><td>用于验证数字证书的完整性和真实性的签名</td></tr><tr><td>证书链（Certificate Chain）</td><td>由一系列数字证书组成的链，用于验证数字证书的信任链条</td></tr></tbody></table><h2 id="密码协议"><a href="#密码协议" class="headerlink" title="密码协议"></a>密码协议</h2><p>密码协议用于在不安全的通信环境中实现安全通信。它们定义了通信双方之间的消息格式、加密算法、密钥交换协议等。以下是一些常见的密码协议：</p><table><thead><tr><th>协议</th><th>特点</th></tr></thead><tbody><tr><td>SSL/TLS</td><td>安全套接层/传输层安全协议，用于保护Web通信</td></tr><tr><td>IPSec</td><td>用于保护IP网络通信的协议</td></tr><tr><td>SSH</td><td>安全外壳协议，用于远程登录和安全文件传输</td></tr></tbody></table><h2 id="抗量子密码学"><a href="#抗量子密码学" class="headerlink" title="抗量子密码学"></a>抗量子密码学</h2><p>随着量子计算机的发展，传统密码学算法的安全性受到了挑战。抗量子密码学致力于设计抵抗量子计算攻击的密码算法。以下是一些抗量子密码学的概念和算法：</p><table><thead><tr><th>概念/算法</th><th>解释</th></tr></thead><tbody><tr><td>Post-Quantum Cryptography（PQC）</td><td>用于抵抗量子计算攻击的密码学算法</td></tr><tr><td>Lattice-Based Cryptography</td><td>基于格的密码学，利用数学问题的困难性提供安全性</td></tr><tr><td>Code-Based Cryptography</td><td>基于编码的密码学，利用编码理论提供安全性</td></tr></tbody></table><h2 id="密码学应用"><a href="#密码学应用" class="headerlink" title="密码学应用"></a>密码学应用</h2><p>密码学在各个领域有广泛的应用。以下是一些常见的密码学应用和场景：</p><table><thead><tr><th>应用</th><th>描述</th></tr></thead><tbody><tr><td>数据加密</td><td>用于保护敏感数据的机密性，例如在存储和传输过程中进行加密</td></tr><tr><td>身份认证</td><td>用于验证用户的身份，例如使用密码、数字证书或生物特征识别</td></tr><tr><td>虚拟私人网络</td><td>通过加密和隧道技术实现安全的远程访问和通信</td></tr><tr><td>数字版权保护</td><td>用于保护数字内容的版权和防止非法复制和分发</td></tr><tr><td>安全电子支付</td><td>用于保护在线交易的机密性和完整性，例如使用加密货币和数字签名</td></tr></tbody></table><h2 id="密码破解与密码强度"><a href="#密码破解与密码强度" class="headerlink" title="密码破解与密码强度"></a>密码破解与密码强度</h2><p>密码破解是试图通过暴力猜测或使用各种技术手段来获取密码的过程。密码强度是衡量密码抵御密码破解攻击的程度。以下是一些与密码破解和密码强度相关的概念：</p><table><thead><tr><th>概念</th><th>解释</th></tr></thead><tbody><tr><td>字典攻击</td><td>使用预先生成的密码列表进行猜测的攻击方式</td></tr><tr><td>彩虹表攻击</td><td>使用预先计算的哈希值与密码对应表进行猜测的攻击方式</td></tr><tr><td>密码策略</td><td>设定密码要求和规则的策略，如密码长度、复杂性和更改频率等</td></tr><tr><td>双因素认证</td><td>使用两个或多个不同的身份验证因素来增强安全性，如密码+OTP令牌</td></tr></tbody></table><h2 id="密码学应用-1"><a href="#密码学应用-1" class="headerlink" title="密码学应用"></a>密码学应用</h2><p>密码学在各个领域有广泛的应用。以下是一些常见的密码学应用和场景：</p><table><thead><tr><th>应用</th><th>描述</th></tr></thead><tbody><tr><td>数据加密</td><td>用于保护敏感数据的机密性，例如在存储和传输过程中进行加密</td></tr><tr><td>身份认证</td><td>用于验证用户的身份，例如使用密码、数字证书或生物特征识别</td></tr><tr><td>虚拟私人网络</td><td>通过加密和隧道技术实现安全的远程访问和通信</td></tr><tr><td>数字版权保护</td><td>用于保护数字内容的版权和防止非法复制和分发</td></tr><tr><td>安全电子支付</td><td>用于保护在线交易的机密性和完整性，例如使用加密货币和数字签名</td></tr></tbody></table><h2 id="密码破解与密码强度-1"><a href="#密码破解与密码强度-1" class="headerlink" title="密码破解与密码强度"></a>密码破解与密码强度</h2><p>密码破解是试图通过暴力猜测或使用各种技术手段来获取密码的过程。密码强度是衡量密码抵御密码破解攻击的程度。以下是一些与密码破解和密码强度相关的概念：</p><table><thead><tr><th>概念</th><th>解释</th></tr></thead><tbody><tr><td>字典攻击</td><td>使用预先生成的密码列表进行猜测的攻击方式</td></tr><tr><td>彩虹表攻击</td><td>使用预先计算的哈希值与密码对应表进行猜测的攻击方式</td></tr><tr><td>密码策略</td><td>设定密码要求和规则的策略，如密码长度、复杂性和更改频率等</td></tr><tr><td>双因素认证</td><td>使用两个或多个不同的身份验证因素来增强安全性，如密码+OTP令牌</td></tr></tbody></table><h2 id="密码管理"><a href="#密码管理" class="headerlink" title="密码管理"></a>密码管理</h2><p>密码管理是指有效管理和保护个人或组织的密码。以下是一些常见的密码管理实践和工具：</p><table><thead><tr><th>实践/工具</th><th>描述</th></tr></thead><tbody><tr><td>密码管理器</td><td>用于安全存储和生成密码的应用程序，如LastPass和1Password等</td></tr><tr><td>多因素身份验证</td><td>在登录过程中要求提供多个验证因素，增加账户安全性</td></tr><tr><td>定期更改密码</td><td>定期更改密码以减少密码泄露和破解的风险</td></tr><tr><td>强密码生成</td><td>使用随机字符、数字和符号生成强密码，避免使用弱密码</td></tr><tr><td>社会工程学防范</td><td>提高对社会工程学攻击的意识，避免将密码泄露给不信任的来源</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">code</summary>
    
    
    
    <category term="密码学" scheme="https://kalyan-zitiu.github.io/categories/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
    <category term="密码学" scheme="https://kalyan-zitiu.github.io/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>设计模型-行为型模式</title>
    <link href="https://kalyan-zitiu.github.io/2023/06/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A1%8C%E4%B8%BA/"/>
    <id>https://kalyan-zitiu.github.io/2023/06/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A1%8C%E4%B8%BA/</id>
    <published>2023-06-15T14:00:00.000Z</published>
    <updated>2023-08-12T07:40:51.637Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式-行为型"><a href="#设计模式-行为型" class="headerlink" title="设计模式-行为型"></a>设计模式-行为型</h1><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul><li>定义了对象之间一对多依赖，让多个观察者对象同时监听某一个主题对象，当主题对象发生变化时，它的所有依赖者都会收到通知并更新</li></ul><h3 id="模式组合"><a href="#模式组合" class="headerlink" title="模式组合"></a>模式组合</h3><table><thead><tr><th>角色</th><th>描述</th></tr></thead><tbody><tr><td>Subject</td><td>被观察者接口，定义了注册、移除和通知观察者的方法</td></tr><tr><td>Observer</td><td>观察者接口，定义了接收被观察者通知并进行更新的方法</td></tr><tr><td>ConcreteSubject</td><td>具体的被观察者类，实现Subject接口，维护观察者列表，当状态变化时通知观察者</td></tr><tr><td>ConcreteObserver</td><td>具体的观察者类，实现Observer接口，定义了接收通知后进行更新操作的方法</td></tr></tbody></table><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><h4 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h4><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230626152258117.png" alt="image-20230626152258117"></p><h4 id="code"><a href="#code" class="headerlink" title="code"></a>code</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 被观察者接口</span><br><span class="line">interface Subject &#123;</span><br><span class="line">    void registerObserver(Observer observer);</span><br><span class="line">    void removeObserver(Observer observer);</span><br><span class="line">    void notifyObservers();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 观察者接口</span><br><span class="line">interface Observer &#123;</span><br><span class="line">    void update(float temperature, float humidity, float pressure);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 具体的被观察者类</span><br><span class="line">class WeatherData implements Subject &#123;</span><br><span class="line">    private List&lt;Observer&gt; observers;</span><br><span class="line">    private float temperature;</span><br><span class="line">    private float humidity;</span><br><span class="line">    private float pressure;</span><br><span class="line">    </span><br><span class="line">    public WeatherData() &#123;</span><br><span class="line">        observers = new ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void registerObserver(Observer observer) &#123;</span><br><span class="line">        observers.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void removeObserver(Observer observer) &#123;</span><br><span class="line">        observers.remove(observer);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void notifyObservers() &#123;</span><br><span class="line">        for (Observer observer : observers) &#123;</span><br><span class="line">            observer.update(temperature, humidity, pressure);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void measurementsChanged() &#123;</span><br><span class="line">        // 当天气数据发生变化时调用该方法</span><br><span class="line">        notifyObservers();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void setMeasurements(float temperature, float humidity, float pressure) &#123;</span><br><span class="line">        this.temperature = temperature;</span><br><span class="line">        this.humidity = humidity;</span><br><span class="line">        this.pressure = pressure;</span><br><span class="line">        measurementsChanged();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 具体的观察者类</span><br><span class="line">class WeatherDisplay implements Observer &#123;</span><br><span class="line">    private float temperature;</span><br><span class="line">    private float humidity;</span><br><span class="line">    private float pressure;</span><br><span class="line">    </span><br><span class="line">    public void update(float temperature, float humidity, float pressure) &#123;</span><br><span class="line">        this.temperature = temperature;</span><br><span class="line">        this.humidity = humidity;</span><br><span class="line">        this.pressure = pressure;</span><br><span class="line">        display();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void display() &#123;</span><br><span class="line">        // 更新天气展示板上的数据显示</span><br><span class="line">        System.out.println(&quot;当前天气情况：温度 &quot; + temperature + &quot;℃，湿度 &quot; + humidity + &quot;%，气压 &quot; + pressure + &quot;Pa&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 测试代码</span><br><span class="line">public class ObserverPatternExample &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        WeatherData weatherData = new WeatherData();</span><br><span class="line">        </span><br><span class="line">        WeatherDisplay display1 = new WeatherDisplay();</span><br><span class="line">        WeatherDisplay display2 = new WeatherDisplay();</span><br><span class="line">        </span><br><span class="line">        weatherData.registerObserver(display1);</span><br><span class="line">        weatherData.registerObserver(display2);</span><br><span class="line">        </span><br><span class="line">        // 模拟天气数据变化</span><br><span class="line">        weatherData.setMeasurements(28.5f, 70.2f, 1013.2f);</span><br><span class="line">        </span><br><span class="line">        // 移除一个观察者</span><br><span class="line">        weatherData.removeObserver(display2);</span><br><span class="line">        </span><br><span class="line">        // 再次模拟天气数据变化</span><br><span class="line">        weatherData.setMeasurements(30.2f, 65.8f, 1012.5f);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="模式特征"><a href="#模式特征" class="headerlink" title="模式特征"></a>模式特征</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>松耦合：被观察者和观察者之间是松耦合的关系，它们之间相互独立，可以独立地进行扩展和修改，一方的变化不会影响到另一方。 </li><li>可扩展性：可以轻松地增加新的观察者和被观察者，使系统具有更好的可扩展性。</li><li>随时通知：被观察者状态发生变化时，会立即通知所有观察者，观察者可以及时作出响应。</li><li>解耦：观察者模式将观察者和被观察者解耦，使它们之间的依赖关系降低，符合面向对象设计的原则。</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>增加了复杂性：在使用观察者模式时，需要维护观察者列表并确保正确的通知顺序，这增加了系统的复杂性。</li><li>更新通知顺序：观察者的更新通知顺序是不确定的，这可能导致观察者之间的依赖关系问题。</li><li>观察者数量过多：当观察者数量过多时，被观察者通知所有观察者的时间和性能开销会增加。</li></ul><h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><ul><li>定义了一组算法类，将每个算法封装到单独的类中，并使他们可以相互替换，而不影响客户端的代码</li></ul><h3 id="模式组成"><a href="#模式组成" class="headerlink" title="模式组成"></a>模式组成</h3><table><thead><tr><th>角色</th><th>描述</th></tr></thead><tbody><tr><td>环境类（Context）</td><td>包含对策略的引用，可在运行时切换不同的策略。将具体的算法委托给策略对象执行。</td></tr><tr><td>抽象策略类（Strategy）</td><td>定义了通用的策略接口，所有具体策略类都必须实现该接口。通常是抽象类或接口，包含一个或多个用于执行策略的方法。</td></tr><tr><td>具体策略类（Concrete Strategy）</td><td>实现策略接口，提供具体的算法实现。每个具体策略类封装了一种特定的算法，可根据需要添加、删除或替换。</td></tr></tbody></table><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><h4 id="类图-1"><a href="#类图-1" class="headerlink" title="类图"></a>类图</h4><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/%E5%8C%85%20Strategy.png" alt="包 Strategy"></p><h4 id="code-1"><a href="#code-1" class="headerlink" title="code"></a>code</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 环境类（Context）</span><br><span class="line">class Context &#123;</span><br><span class="line">    private Strategy strategy;</span><br><span class="line"></span><br><span class="line">    public void setStrategy(Strategy strategy) &#123;</span><br><span class="line">        this.strategy = strategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void executeStrategy(int num1, int num2) &#123;</span><br><span class="line">        int result = strategy.doOperation(num1, num2);</span><br><span class="line">        System.out.println(&quot;Result: &quot; + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 抽象策略类（Strategy）</span><br><span class="line">interface Strategy &#123;</span><br><span class="line">    int doOperation(int num1, int num2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 具体策略类（Concrete Strategy）</span><br><span class="line">class AddStrategy implements Strategy &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public int doOperation(int num1, int num2) &#123;</span><br><span class="line">        return num1 + num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 具体策略类（Concrete Strategy）</span><br><span class="line">class SubtractStrategy implements Strategy &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public int doOperation(int num1, int num2) &#123;</span><br><span class="line">        return num1 - num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 具体策略类（Concrete Strategy）</span><br><span class="line">class MultiplyStrategy implements Strategy &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public int doOperation(int num1, int num2) &#123;</span><br><span class="line">        return num1 * num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Context context = new Context();</span><br><span class="line"></span><br><span class="line">        // 使用加法策略</span><br><span class="line">        context.setStrategy(new AddStrategy());</span><br><span class="line">        context.executeStrategy(5, 3); // Output: Result: 8</span><br><span class="line"></span><br><span class="line">        // 使用减法策略</span><br><span class="line">        context.setStrategy(new SubtractStrategy());</span><br><span class="line">        context.executeStrategy(5, 3); // Output: Result: 2</span><br><span class="line"></span><br><span class="line">        // 使用乘法策略</span><br><span class="line">        context.setStrategy(new MultiplyStrategy());</span><br><span class="line">        context.executeStrategy(5, 3); // Output: Result: 15</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="模式特征-1"><a href="#模式特征-1" class="headerlink" title="模式特征"></a>模式特征</h4><h5 id="策略模式的优点："><a href="#策略模式的优点：" class="headerlink" title="策略模式的优点："></a>策略模式的优点：</h5><p>可扩展性：策略模式使得新增或修改算法变得简单，通过添加新的具体策略类，可以轻松地扩展系统的功能。</p><p>灵活性：客户端可以根据需要在运行时选择不同的策略，无需修改原有的代码，提供了更高的灵活性和可定制性。</p><p>代码复用：策略模式利用了面向对象的多态特性，可以让多个具体策略类共享相同的接口或抽象类，提高了代码的复用性。</p><p>解耦合：策略模式将算法的选择与使用算法的客户端代码解耦，客户端只需要关注如何使用策略，而无需关注具体的算法实现细节，降低了代码的耦合度。</p><h6 id="策略模式的缺点："><a href="#策略模式的缺点：" class="headerlink" title="策略模式的缺点："></a>策略模式的缺点：</h6><p>增加类的数量：每个具体策略类都需要一个对应的类，当策略较多时，会增加类的数量，导致代码结构复杂。</p><p>客户端需要了解不同策略的区别：客户端在选择具体策略时需要了解不同策略的特点和适用场景，增加了客户端的理解和学习成本。</p><p>策略的切换开销：在运行时切换策略时，可能需要重新设置环境类的策略，会带来一定的切换开销，尤其是在需要频繁切换策略时。</p><h2 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h2><h3 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h3><ul><li>允许多个对象依次处理请求，形成一个处理请求的链条，每个对象都有机会处理请求，但具体是哪个对象处理请求由运行时决定。<h3 id="模式组成-1"><a href="#模式组成-1" class="headerlink" title="模式组成"></a>模式组成</h3></li></ul><table><thead><tr><th>组成部分</th><th>描述</th></tr></thead><tbody><tr><td>抽象处理者（Abstract Handler）</td><td>定义处理请求的接口，包含一个指向下一个处理者的引用。</td></tr><tr><td>具体处理者（Concrete Handler）</td><td>实现抽象处理者接口，并决定自己能处理的请求类型，如果可以处理就进行处理，否则将请求传递给下一个处理者。</td></tr><tr><td>客户端（Client）</td><td>发起请求的对象，将请求发送给第一个处理者。</td></tr></tbody></table><h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><h4 id="类图-2"><a href="#类图-2" class="headerlink" title="类图"></a>类图</h4><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230626161056453.png" alt="image-20230626161056453"></p><h4 id="code-2"><a href="#code-2" class="headerlink" title="code"></a>code</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 抽象处理者</span><br><span class="line">abstract class Handler &#123;</span><br><span class="line">    protected Handler successor; // 下一个处理者</span><br><span class="line"></span><br><span class="line">    public void setSuccessor(Handler successor) &#123;</span><br><span class="line">        this.successor = successor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public abstract void handleRequest(int request);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 具体处理者A</span><br><span class="line">class ConcreteHandlerA extends Handler &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void handleRequest(int request) &#123;</span><br><span class="line">        if (request &gt;= 0 &amp;&amp; request &lt; 10) &#123;</span><br><span class="line">            System.out.println(&quot;ConcreteHandlerA 处理请求：&quot; + request);</span><br><span class="line">        &#125; else if (successor != null) &#123;</span><br><span class="line">            successor.handleRequest(request); // 传递给下一个处理者</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 具体处理者B</span><br><span class="line">class ConcreteHandlerB extends Handler &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void handleRequest(int request) &#123;</span><br><span class="line">        if (request &gt;= 10 &amp;&amp; request &lt; 20) &#123;</span><br><span class="line">            System.out.println(&quot;ConcreteHandlerB 处理请求：&quot; + request);</span><br><span class="line">        &#125; else if (successor != null) &#123;</span><br><span class="line">            successor.handleRequest(request); // 传递给下一个处理者</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 具体处理者C</span><br><span class="line">class ConcreteHandlerC extends Handler &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void handleRequest(int request) &#123;</span><br><span class="line">        if (request &gt;= 20 &amp;&amp; request &lt; 30) &#123;</span><br><span class="line">            System.out.println(&quot;ConcreteHandlerC 处理请求：&quot; + request);</span><br><span class="line">        &#125; else if (successor != null) &#123;</span><br><span class="line">            successor.handleRequest(request); // 传递给下一个处理者</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 客户端</span><br><span class="line">public class Client &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Handler handlerA = new ConcreteHandlerA();</span><br><span class="line">        Handler handlerB = new ConcreteHandlerB();</span><br><span class="line">        Handler handlerC = new ConcreteHandlerC();</span><br><span class="line"></span><br><span class="line">        handlerA.setSuccessor(handlerB);</span><br><span class="line">        handlerB.setSuccessor(handlerC);</span><br><span class="line"></span><br><span class="line">        int[] requests = &#123; 2, 12, 25, 30 &#125;;</span><br><span class="line"></span><br><span class="line">        for (int request : requests) &#123;</span><br><span class="line">            handlerA.handleRequest(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="模式特征-2"><a href="#模式特征-2" class="headerlink" title="模式特征"></a>模式特征</h4><h5 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h5><p>责任链模式将发送者和接收者解耦，发送者无需知道具体的接收者，只需将请求发送给责任链的起始点即可，由责任链负责将请求传递给合适的接收者进行处理。<br>灵活性和可扩展性：责任链模式允许动态地添加、移除或重新排列处理者，可以根据需求对责任链进行灵活的组织和调整，而无需修改客户端代码。<br>可以确保请求被处理：由于责任链中的每个处理者都有机会处理请求，可以确保请求最终会被处理，而不会被忽略或丢失。</p><h5 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h5><p>性能问题：如果责任链过长或者处理者的判断逻辑过于复杂，可能会导致性能下降，因为每个请求都要依次经过链中的所有处理者。<br>请求的处理不一定成功：由于责任链模式并不保证请求一定会被处理，如果没有合适的处理者或者处理者链配置错误，请求可能会被忽略或丢失。<br>可能导致调试困难：责任链模式中请求的处理路径是动态确定的，可能会导致在调试时难以确定请求的具体处理路径。</p><h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><h3 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h3><ul><li>将请求封装成一个对象，该对象会包含了执行操作的方法，发送者将命令对象传递给调用者，并在需要执行操作的时候触发命令并执行相应操作。</li></ul><h3 id="模式组成-2"><a href="#模式组成-2" class="headerlink" title="模式组成"></a>模式组成</h3><table><thead><tr><th>模式组成</th><th>描述</th></tr></thead><tbody><tr><td>命令接口</td><td>定义命令的执行方法，通常包括一个执行操作的方法。</td></tr><tr><td>具体命令</td><td>实现命令接口，持有一个接收者对象，并将请求委托给接收者执行具体的操作。</td></tr><tr><td>接收者</td><td>知道如何实施与执行一个请求相关的操作。</td></tr><tr><td>调用者</td><td>将命令对象传递给调用者，并可选择性地触发命令执行。</td></tr></tbody></table><h3 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h3><h4 id="code-3"><a href="#code-3" class="headerlink" title="code"></a>code</h4><p>当然，以下是一个简单的 Java 实例来演示命令模式：</p><p>首先，我们定义一个命令接口 <code>Command</code>，它包含了一个执行操作的方法 <code>execute()</code>：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Command</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，我们创建一个具体命令类 <code>ConcreteCommand</code>，它实现了 <code>Command</code> 接口，并持有一个接收者对象，用于执行具体的操作：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteCommand</span> <span class="keyword">implements</span> <span class="title class_">Command</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Receiver receiver;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConcreteCommand</span><span class="params">(Receiver receiver)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.receiver = receiver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        receiver.performAction();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，我们定义一个接收者类 <code>Receiver</code>，它知道如何实施与执行请求相关的操作：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Receiver</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">performAction</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Receiver: Performing action...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，我们创建一个调用者类 <code>Invoker</code>，它将接收到的命令对象传递给调用者，并在需要的时候触发命令的执行：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Invoker</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Command command;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCommand</span><span class="params">(Command command)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.command = command;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">executeCommand</span><span class="params">()</span> &#123;</span><br><span class="line">        command.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，我们可以在客户端代码中配置和使用命令模式：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建接收者对象</span></span><br><span class="line">        <span class="type">Receiver</span> <span class="variable">receiver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Receiver</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建具体命令对象并设置接收者</span></span><br><span class="line">        <span class="type">Command</span> <span class="variable">command</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteCommand</span>(receiver);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建调用者对象并设置命令</span></span><br><span class="line">        <span class="type">Invoker</span> <span class="variable">invoker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Invoker</span>();</span><br><span class="line">        invoker.setCommand(command);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行命令</span></span><br><span class="line">        invoker.executeCommand();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类图-3"><a href="#类图-3" class="headerlink" title="类图"></a>类图</h4><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230702220522678.png" alt="image-20230702220522678"></p><h3 id="模式特征-3"><a href="#模式特征-3" class="headerlink" title="模式特征"></a>模式特征</h3><h4 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h4><ol><li>解耦发送者和接收者：命令模式将请求封装成对象，使得发送者和接收者之间解耦。发送者不需要知道接收者的具体实现细节，只需通过命令对象来执行请求。</li><li>容易扩展和修改：由于命令模式将请求封装成独立的对象，因此可以很容易地添加新的命令或修改现有命令，而不会对其他部分产生影响。这种可扩展性使得系统更加灵活和可维护。</li><li>支持撤销和重做：命令模式可以记录命令的历史，从而支持撤销和重做操作。通过保存命令的执行历史，可以在需要时回溯执行，实现撤销操作。</li><li>支持命令的排队和调度：命令模式可以将命令对象进行排队或者调度，从而实现更高级的控制和管理。可以按照特定的顺序执行命令，或者延迟执行命令。</li></ol><h4 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h4><ol><li>类的增加：在使用命令模式时，每个具体命令都需要一个独立的类，这可能会导致类的数量增加，增加了系统的复杂性。</li><li>可能导致系统过于细粒度：如果系统中有大量的命令对象，每个对象都只封装了一个操作，可能会导致系统过于细粒度，增加了管理和维护的成本。</li><li>可能引入额外的开销：命令模式需要创建额外的对象来封装请求，可能会引入一定的开销。但在大多数情况下，这种开销是可以接受的。</li></ol><h2 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h2><h3 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h3><ul><li>通过将不同状态抽象为独立的类，并将其与主对象关联，实现状态之间的切换和行为的动态变化。</li></ul><h3 id="模式组成-3"><a href="#模式组成-3" class="headerlink" title="模式组成"></a>模式组成</h3><table><thead><tr><th>组成要素</th><th>描述</th></tr></thead><tbody><tr><td>环境（Context）</td><td>环境类持有一个状态对象的引用，可以定义和维护对象的内部状态。它将状态相关的操作委托给当前状态对象，并在状态发生改变时更新当前状态对象。</td></tr><tr><td>抽象状态（State）</td><td>定义一个接口或抽象类，声明各个具体状态类共同的方法，这些方法可以是环境在某个特定状态下要执行的行为。</td></tr><tr><td>具体状态（Concrete State）</td><td>实现抽象状态接口或继承抽象状态类，具体状态类封装了特定状态下的行为。每个具体状态类负责处理与其状态相关的操作，并在必要时切换到其他状态。</td></tr></tbody></table><h3 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h3><h4 id="code-4"><a href="#code-4" class="headerlink" title="code"></a>code</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 抽象状态类</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">OrderState</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">processOrder</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体状态类：新订单状态</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NewOrderState</span> <span class="keyword">implements</span> <span class="title class_">OrderState</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;处理新订单...&quot;</span>);</span><br><span class="line">        <span class="comment">// 执行新订单状态下的业务逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体状态类：已支付状态</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PaidOrderState</span> <span class="keyword">implements</span> <span class="title class_">OrderState</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;处理已支付订单...&quot;</span>);</span><br><span class="line">        <span class="comment">// 执行已支付订单状态下的业务逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体状态类：已发货状态</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ShippedOrderState</span> <span class="keyword">implements</span> <span class="title class_">OrderState</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;处理已发货订单...&quot;</span>);</span><br><span class="line">        <span class="comment">// 执行已发货订单状态下的业务逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 环境类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Order</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> OrderState currentState;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Order</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 默认初始状态为新订单状态</span></span><br><span class="line">        currentState = <span class="keyword">new</span> <span class="title class_">NewOrderState</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setState</span><span class="params">(OrderState state)</span> &#123;</span><br><span class="line">        currentState = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        currentState.processOrder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StatePatternExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 处理新订单</span></span><br><span class="line">        order.processOrder();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 切换为已支付状态</span></span><br><span class="line">        order.setState(<span class="keyword">new</span> <span class="title class_">PaidOrderState</span>());</span><br><span class="line">        order.processOrder();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 切换为已发货状态</span></span><br><span class="line">        order.setState(<span class="keyword">new</span> <span class="title class_">ShippedOrderState</span>());</span><br><span class="line">        order.processOrder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述示例中，抽象状态类<code>OrderState</code>定义了一个<code>processOrder()</code>方法，具体状态类<code>NewOrderState</code>、<code>PaidOrderState</code>和<code>ShippedOrderState</code>分别实现了这个方法，封装了不同状态下的具体行为逻辑。<code>Order</code>类作为环境类，维护了当前状态对象的引用，并在<code>processOrder()</code>方法中委托给当前状态对象执行相应的行为。</p><p>客户端代码创建了一个订单对象<code>order</code>，初始状态为新订单状态，然后依次处理订单并切换状态，观察不同状态下的行为执行情况。</p><h4 id="类图-4"><a href="#类图-4" class="headerlink" title="类图"></a>类图</h4><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230702225657156.png" alt="image-20230702225657156"></p><h3 id="模式特征-4"><a href="#模式特征-4" class="headerlink" title="模式特征"></a>模式特征</h3><h4 id="优点-3"><a href="#优点-3" class="headerlink" title="优点"></a>优点</h4><ol><li>状态模式将对象的状态和行为进行了解耦，使得状态的变化可以独立于对象的行为变化。这提高了代码的可维护性和扩展性。</li><li>状态模式遵循开闭原则，可以通过添加新的具体状态类来增加新的状态，而无需修改现有的代码。</li><li>状态模式使得状态转换变得更加明确和可控。状态的切换逻辑集中在具体状态类中，不会分散在对象的各个方法中，使得代码更易理解和调试。</li><li>状态模式使得对象的状态变化可见，可以方便地观察和记录对象的状态变化历史。</li></ol><h4 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a>缺点</h4><ol><li>状态模式增加了系统中类的数量，特别是在具体状态类较多的情况下，可能会导致类的数量增加，增加了系统的复杂性。</li><li>如果状态转换较为复杂，可能会导致状态模式的实现变得复杂，需要维护大量的状态类和状态转换逻辑。</li><li>当状态较少且简单时，引入状态模式可能会带来不必要的复杂性，增加了代码的理解和维护成本。</li></ol><h2 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h2><h3 id="简介-5"><a href="#简介-5" class="headerlink" title="简介"></a>简介</h3><ul><li>用于将数据结构和对数据结构的操作分离开来，允许定义新的操作而无需修改已有的数据结构。</li></ul><h3 id="模式组成-4"><a href="#模式组成-4" class="headerlink" title="模式组成"></a>模式组成</h3><table><thead><tr><th>组成部分</th><th>描述</th></tr></thead><tbody><tr><td>元素（Element）</td><td>表示数据结构中的对象。它定义了一个接受访问者对象的方法，让访问者可以对自身进行操作。</td></tr><tr><td>具体元素（Concrete Element）</td><td>实现了元素接口的具体类。每个具体元素类都会实现自己的接受访问者的方法，并在其中调用访问者对象的操作方法。</td></tr><tr><td>访问者（Visitor）</td><td>定义了对元素进行操作的接口，其中包含了为每个具体元素类定义的操作方法。</td></tr><tr><td>具体访问者（Concrete Visitor）</td><td>实现了访问者接口的具体类。每个具体访问者类都会实现对应的操作方法，以便对具体元素进行相应的操作。</td></tr><tr><td>对象结构（Object Structure）</td><td>存储元素对象并提供访问者访问的接口。它可以是一个集合、列表、树或其他数据结构。</td></tr></tbody></table><h3 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h3><h4 id="code-5"><a href="#code-5" class="headerlink" title="code"></a>code</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 元素接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Element</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Visitor visitor)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体元素类A</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteElementA</span> <span class="keyword">implements</span> <span class="title class_">Element</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Visitor visitor)</span> &#123;</span><br><span class="line">        visitor.visitConcreteElementA(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operationA</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ConcreteElementA operation&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体元素类B</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteElementB</span> <span class="keyword">implements</span> <span class="title class_">Element</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Visitor visitor)</span> &#123;</span><br><span class="line">        visitor.visitConcreteElementB(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operationB</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ConcreteElementB operation&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问者接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Visitor</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">visitConcreteElementA</span><span class="params">(ConcreteElementA elementA)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">visitConcreteElementB</span><span class="params">(ConcreteElementB elementB)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体访问者类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteVisitor</span> <span class="keyword">implements</span> <span class="title class_">Visitor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visitConcreteElementA</span><span class="params">(ConcreteElementA elementA)</span> &#123;</span><br><span class="line">        elementA.operationA();</span><br><span class="line">        System.out.println(<span class="string">&quot;ConcreteVisitor visits ConcreteElementA&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visitConcreteElementB</span><span class="params">(ConcreteElementB elementB)</span> &#123;</span><br><span class="line">        elementB.operationB();</span><br><span class="line">        System.out.println(<span class="string">&quot;ConcreteVisitor visits ConcreteElementB&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象结构类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ObjectStructure</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Element&gt; elements = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addElement</span><span class="params">(Element element)</span> &#123;</span><br><span class="line">        elements.add(element);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Visitor visitor)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Element element : elements) &#123;</span><br><span class="line">            element.accept(visitor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建具体元素对象</span></span><br><span class="line">        <span class="type">ConcreteElementA</span> <span class="variable">elementA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteElementA</span>();</span><br><span class="line">        <span class="type">ConcreteElementB</span> <span class="variable">elementB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteElementB</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建对象结构并添加元素</span></span><br><span class="line">        <span class="type">ObjectStructure</span> <span class="variable">objectStructure</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectStructure</span>();</span><br><span class="line">        objectStructure.addElement(elementA);</span><br><span class="line">        objectStructure.addElement(elementB);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建具体访问者对象</span></span><br><span class="line">        <span class="type">Visitor</span> <span class="variable">visitor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteVisitor</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 对象结构接受访问者访问</span></span><br><span class="line">        objectStructure.accept(visitor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类图-5"><a href="#类图-5" class="headerlink" title="类图"></a>类图</h4><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230702232125374.png" alt="image-20230702232125374"></p><h3 id="模式特征-5"><a href="#模式特征-5" class="headerlink" title="模式特征"></a>模式特征</h3><h4 id="优点-4"><a href="#优点-4" class="headerlink" title="优点"></a>优点</h4><p>当讨论访问者模式时，可以列举一些其优点和缺点，以便全面评估该模式的适用性和潜在的问题。</p><p>优点：</p><ul><li>分离关注点：访问者模式可以将数据结构和操作分离开来，使得操作可以独立变化而不影响元素类的结构。这种分离可以提高代码的可维护性和可扩展性。</li><li>增加新操作更容易：通过定义新的访问者类，可以很容易地增加新的操作，而无需修改元素类的代码。这符合开闭原则，使系统更灵活。</li><li>集中相关操作：访问者模式可以将相关操作集中到访问者类中。这样，当需要对元素进行某个操作时，只需调用相应的访问者方法，而不需要在元素类中编写重复的操作代码。</li><li>增加新元素相对容易：如果需要增加新的元素类，只需创建相应的具体元素类并实现接受访问者的方法即可。无需修改现有的访问者类。</li></ul><h4 id="缺点-4"><a href="#缺点-4" class="headerlink" title="缺点"></a>缺点</h4><ul><li>增加新元素困难：在访问者模式中，如果需要增加新的访问者类，需要修改所有已有的元素类，为它们添加接受新访问者的方法。这可能会导致元素类的修改和代码的重复。</li><li>违反封装原则：访问者模式需要将具体元素类的内部结构暴露给访问者类，以便访问者能够进行操作。这可能违反了封装原则，降低了元素类的封装性。</li><li>增加系统复杂性：引入访问者模式会增加系统中的类和接口数量，增加了代码的复杂性和理解难度。这可能使得系统变得更加复杂，特别是对于简单的数据结构而言，使用访问者模式可能过于繁琐。</li></ul><h2 id="模块方法模式"><a href="#模块方法模式" class="headerlink" title="模块方法模式"></a>模块方法模式</h2><h3 id="简介-6"><a href="#简介-6" class="headerlink" title="简介"></a>简介</h3><ul><li>定义了一个操作中的算法的骨架。将一些步骤延迟到子类中实现。模板方块使得子类可以在不改变算法结构的情况下重新定义算法中某些步骤<h3 id="模式组成-5"><a href="#模式组成-5" class="headerlink" title="模式组成"></a>模式组成</h3></li></ul><table><thead><tr><th>模式组成</th><th>描述</th></tr></thead><tbody><tr><td>模板方法（Template Method）</td><td>定义了算法的骨架，将算法的步骤定义为一系列抽象操作或具体操作的调用顺序。这个方法可以包含预定义的操作和钩子方法。</td></tr><tr><td>具体方法（Concrete Method）</td><td>在模板方法中定义的具体操作，是算法的固定部分。</td></tr><tr><td>抽象方法（Abstract Method）</td><td>在模板方法中定义的抽象操作，由子类实现。这些方法可以有不同的实现，以满足特定的需求。</td></tr><tr><td>钩子方法（Hook Method）</td><td>在模板方法中定义的具体操作，子类可以选择性地覆盖或扩展。这些方法在模板方法中有默认实现，但可以在子类中进行修改。</td></tr><tr><td>抽象类（Abstract Class）</td><td>包含模板方法和抽象方法的抽象类。它定义了算法的骨架，并规定了具体操作和抽象操作的调用顺序。</td></tr><tr><td>具体类（Concrete Class）</td><td>继承抽象类并实现其中的抽象方法，完成算法的具体步骤。它可以覆盖钩子方法来定制算法的行为。</td></tr></tbody></table><h3 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h3><h4 id="code-6"><a href="#code-6" class="headerlink" title="code"></a>code</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 抽象类</span><br><span class="line">abstract class AbstractClass &#123;</span><br><span class="line">    // 模板方法</span><br><span class="line">    public void templateMethod() &#123;</span><br><span class="line">        // 调用抽象方法</span><br><span class="line">        operation1();</span><br><span class="line">        // 调用具体方法</span><br><span class="line">        operation2();</span><br><span class="line">        // 调用钩子方法</span><br><span class="line">        if (hookMethod()) &#123;</span><br><span class="line">            operation3();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 抽象方法</span><br><span class="line">    protected abstract void operation1();</span><br><span class="line"></span><br><span class="line">    // 具体方法</span><br><span class="line">    protected void operation2() &#123;</span><br><span class="line">        // 具体操作的实现</span><br><span class="line">        System.out.println(&quot;执行具体操作2&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 钩子方法</span><br><span class="line">    protected boolean hookMethod() &#123;</span><br><span class="line">        // 默认实现，子类可以选择性地覆盖该方法</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 抽象方法</span><br><span class="line">    protected abstract void operation3();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 具体类A</span><br><span class="line">class ConcreteClassA extends AbstractClass &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void operation1() &#123;</span><br><span class="line">        System.out.println(&quot;执行具体操作1（来自具体类A）&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void operation3() &#123;</span><br><span class="line">        System.out.println(&quot;执行具体操作3（来自具体类A）&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 具体类B</span><br><span class="line">class ConcreteClassB extends AbstractClass &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void operation1() &#123;</span><br><span class="line">        System.out.println(&quot;执行具体操作1（来自具体类B）&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected boolean hookMethod() &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void operation3() &#123;</span><br><span class="line">        System.out.println(&quot;执行具体操作3（来自具体类B）&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 测试代码</span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        AbstractClass instanceA = new ConcreteClassA();</span><br><span class="line">        instanceA.templateMethod();</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;-----------------&quot;);</span><br><span class="line"></span><br><span class="line">        AbstractClass instanceB = new ConcreteClassB();</span><br><span class="line">        instanceB.templateMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="类图-6"><a href="#类图-6" class="headerlink" title="类图"></a>类图</h4><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230702234441116.png" alt="image-20230702234441116"></p><h3 id="模式特征-6"><a href="#模式特征-6" class="headerlink" title="模式特征"></a>模式特征</h3><h4 id="优点-5"><a href="#优点-5" class="headerlink" title="优点"></a>优点</h4><ol><li>提供了一种框架或模板，用于定义算法的骨架，使得算法的具体步骤可以在子类中实现，提高了代码的可扩展性和复用性。</li><li>将算法的通用部分封装在模板方法中，具体实现延迟到子类中，使得算法的具体步骤可以灵活变化，而不影响算法的整体结构。</li><li>通过钩子方法，允许子类选择性地覆盖或扩展父类中的某些操作，从而实现个性化定制。</li><li>提高了代码的可维护性和可读性，将重复的代码逻辑放在模板方法中，避免了代码的重复编写。</li></ol><h4 id="缺点-5"><a href="#缺点-5" class="headerlink" title="缺点"></a>缺点</h4><ol><li>引入了抽象类和具体类之间的继承关系，增加了系统的复杂性。如果继承关系设计不当，可能会导致类的层次结构变得复杂，难以维护。</li><li>由于模板方法已经定义了算法的骨架，因此在一定程度上限制了子类的自由度，子类只能实现父类定义好的抽象方法。</li><li>如果算法的变化点过多，可能需要定义大量的抽象方法，增加了子类的实现工作量。</li><li>模板方法模式的设计初衷是为了定义算法的骨架，对于一些具有多个算法簇的情况，可能会导致类的爆炸性增长，不利于系统的扩展和维护。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设计模式-行为型&quot;&gt;&lt;a href=&quot;#设计模式-行为型&quot; class=&quot;headerlink&quot; title=&quot;设计模式-行为型&quot;&gt;&lt;/a&gt;设计模式-行为型&lt;/h1&gt;&lt;h2 id=&quot;观察者模式&quot;&gt;&lt;a href=&quot;#观察者模式&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="设计模式" scheme="https://kalyan-zitiu.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="Study Note" scheme="https://kalyan-zitiu.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/Study-Note/"/>
    
    
    <category term="设计模式" scheme="https://kalyan-zitiu.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>MP</title>
    <link href="https://kalyan-zitiu.github.io/2023/05/06/mybatis/"/>
    <id>https://kalyan-zitiu.github.io/2023/05/06/mybatis/</id>
    <published>2023-05-06T09:32:04.000Z</published>
    <updated>2023-08-12T07:41:19.125Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MyBatis-Plus"><a href="#MyBatis-Plus" class="headerlink" title="MyBatis Plus"></a>MyBatis Plus</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>无侵入：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li><li>损耗小：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li><li>强大的 CRUD 操作：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li><li>支持 Lambda 形式调用：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li><li>支持主键自动生成：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li><li>支持 ActiveRecord 模式：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li><li>支持自定义全局通用操作：支持全局通用方法注入（ Write once, use anywhere ）</li><li>内置代码生成器：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li><li>内置分页插件：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li><li>分页插件支持多种数据库：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li><li>内置性能分析插件：可输出 Sql 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li><li>内置全局拦截插件：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作<h4 id="什么是MyBatisPlus"><a href="#什么是MyBatisPlus" class="headerlink" title="什么是MyBatisPlus"></a>什么是MyBatisPlus</h4></li><li>MyBatis是一款优秀的持久层框架，用于简化JDBC开发</li><li>MyBatisPlus是基于MyBatis框架基础上开发的增强型工具，皆在<strong>简化开发，提高效率</strong></li></ul><h4 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h4><ul><li>负责将数据保存倒数据库那一层代码</li><li>JavaEE三层架构：表现层，业务层，持久层</li></ul><h4 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h4><ul><li>框架就是一个半成品软件，是一套可重用的，通用的，软件基础代码模型</li><li>在框架的基础之上构建软件编写更加高效，规范，通用，可扩展</li></ul><h3 id="入门案列"><a href="#入门案列" class="headerlink" title="入门案列"></a>入门案列</h3><ul><li>SpringBoot整合MyBatis开发过程<ul><li>创建SpringBoot工程</li><li>勾选配置使用的技术</li><li>设置dataSource相关属性（JDBC参数）</li><li>定义数据层接口映射配置<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Spring:</span><br><span class="line">  datasource:</span><br><span class="line">    type: com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">    url: jdbc:mysql:<span class="comment">//localhost:3306/mybatisplus_db?serverTimezone = UTC</span></span><br><span class="line">    username: ？</span><br><span class="line">    password: ？</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;?&gt;&#123;</span><br><span class="line"><span class="meta">@select(&quot;select * from user where id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">getById</span><span class="params">(Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h4><h5 id="创建SpringBoot工程"><a href="#创建SpringBoot工程" class="headerlink" title="创建SpringBoot工程"></a>创建SpringBoot工程</h5><pre><code>![image-20230503171102161](https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230503171102161.png)</code></pre><h5 id="添加依赖MySQL-Driver"><a href="#添加依赖MySQL-Driver" class="headerlink" title="添加依赖MySQL Driver"></a>添加依赖MySQL Driver<img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230503171325952.png" alt="image-20230503171325952"></h5><h5 id="打开xml文件，手动添加mybatis-plus-boot-start依赖"><a href="#打开xml文件，手动添加mybatis-plus-boot-start依赖" class="headerlink" title="打开xml文件，手动添加mybatis-plus-boot-start依赖"></a>打开xml文件，手动添加mybatis-plus-boot-start依赖</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="mybatis-plus-boot-start"><a href="#mybatis-plus-boot-start" class="headerlink" title="mybatis-plus-boot-start"></a>mybatis-plus-boot-start</h6><p>这是Maven依赖，用于引入MyBatis Plus框架的快速启动器。MyBatis Plus是一个增强版的MyBatis框架，提供了许多MyBatis没有的方便实用的功能，例如自动代码生成、分页插件、多数据源支持、性能优化等。</p><p>在pom.xml中引入了这个依赖后，就可以开始使用MyBatis Plus。可以在配置文件中添加MyBatis Plus的配置，如：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">mybatis-plus:</span><br><span class="line">  typeAliasesPackage: com.example.demo.entity</span><br><span class="line">  mapperLocations: classpath:/mapper/*.xml</span><br><span class="line">  global-config:</span><br><span class="line">    db-config:</span><br><span class="line">      column-underscore: true</span><br><span class="line">      id-type: auto</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这里，typeAliasesPackage是指实体类所在的包，mapperLocations是指MyBatis mapper XML文件的位置，global-config是MyBatis Plus的全局配置，在这里修改了ID的生成策略和开启了下划线到驼峰命名的自动转换。</p><p>然后，可以像平常一样编写MyBatis mapper XML文件和DAO接口，如：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- demo.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.demo.dao.DemoDAO&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.example.demo.entity.DemoEntity&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;create_time&quot;</span> <span class="attr">property</span>=<span class="string">&quot;createTime&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;update_time&quot;</span> <span class="attr">property</span>=<span class="string">&quot;updateTime&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;listByParam&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BaseResultMap&quot;</span>&gt;</span></span><br><span class="line">        select * from demo</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span> and name = #&#123;name&#125; <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null&quot;</span>&gt;</span> and age = #&#123;age&#125; <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 其他的SQL语句... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">// DemoDAO.java</span><br><span class="line">@Mapper</span><br><span class="line">public interface DemoDAO extends BaseMapper<span class="tag">&lt;<span class="name">DemoEntity</span>&gt;</span> &#123;</span><br><span class="line">    List<span class="tag">&lt;<span class="name">DemoEntity</span>&gt;</span> listByParam(@Param(&quot;name&quot;) String name, @Param(&quot;age&quot;) Integer age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在编写DAO接口时，可以继承MyBatis Plus提供的BaseMapper&lt; T &gt;接口，该接口提供了许多便捷的CRUD方法。此外，也可以编写自定义SQL语句，既具有MyBatis的灵活性，又能充分利用MyBatis Plus提供的便利性。最后，在使用DAO接口时，可以像平常一样使用Spring的@Autowired注解来注入DAO对象，例如：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">private DemoDAO demoDAO;</span><br><span class="line"></span><br><span class="line">public void test() &#123;</span><br><span class="line">    QueryWrapper<span class="tag">&lt;<span class="name">DemoEntity</span>&gt;</span> queryWrapper = new QueryWrapper<span class="tag">&lt;&gt;</span>();</span><br><span class="line">    queryWrapper.eq(&quot;name&quot;, &quot;张三&quot;).eq(&quot;age&quot;, 25);</span><br><span class="line">    demoDAO.selectList(queryWrapper);</span><br><span class="line">    // TODO: 使用查询到的数据进行操作</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="打开xml文件，手动添加com-baomidou依赖"><a href="#打开xml文件，手动添加com-baomidou依赖" class="headerlink" title="打开xml文件，手动添加com.baomidou依赖"></a>打开xml文件，手动添加com.baomidou依赖</h6><p>这是Maven依赖，用于引入MyBatis Plus框架的快速启动器。MyBatis Plus是一个增强版的MyBatis框架，提供了许多MyBatis没有的方便实用的功能，例如自动代码生成、分页插件、多数据源支持、性能优化等。</p><p>在pom.xml中引入了这个依赖后，就可以开始使用MyBatis Plus。可以在配置文件中添加MyBatis Plus的配置，如：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">typeAliasesPackage:</span> <span class="string">com.example.demo.entity</span></span><br><span class="line">  <span class="attr">mapperLocations:</span> <span class="string">classpath:/mapper/*.xml</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">column-underscore:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span></span><br></pre></td></tr></table></figure><p>在这里，typeAliasesPackage是指实体类所在的包，mapperLocations是指MyBatis mapper XML文件的位置，global-config是MyBatis Plus的全局配置，在这里修改了ID的生成策略和开启了下划线到驼峰命名的自动转换。</p><p>然后，可以像平常一样编写MyBatis mapper XML文件和DAO接口，如：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- demo.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.demo.dao.DemoDAO&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.example.demo.entity.DemoEntity&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;create_time&quot;</span> <span class="attr">property</span>=<span class="string">&quot;createTime&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;update_time&quot;</span> <span class="attr">property</span>=<span class="string">&quot;updateTime&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;listByParam&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BaseResultMap&quot;</span>&gt;</span></span><br><span class="line">        select * from demo</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span> and name = #&#123;name&#125; <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null&quot;</span>&gt;</span> and age = #&#123;age&#125; <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 其他的SQL语句... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// DemoDAO.java</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DemoDAO</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;DemoEntity&gt; &#123;</span><br><span class="line">    List&lt;DemoEntity&gt; <span class="title function_">listByParam</span><span class="params">(<span class="meta">@Param(&quot;name&quot;)</span> String name, <span class="meta">@Param(&quot;age&quot;)</span> Integer age)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在编写DAO接口时，可以继承MyBatis Plus提供的BaseMapper&lt; T &gt;接口，该接口提供了许多便捷的CRUD方法。此外，也可以编写自定义SQL语句，既具有MyBatis的灵活性，又能充分利用MyBatis Plus提供的便利性。</p><p>最后，在使用DAO接口时，可以像平常一样使用Spring的@Autowired注解来注入DAO对象，例如：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> DemoDAO demoDAO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    QueryWrapper&lt;DemoEntity&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;张三&quot;</span>).eq(<span class="string">&quot;age&quot;</span>, <span class="number">25</span>);</span><br><span class="line">    demoDAO.selectList(queryWrapper);</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 使用查询到的数据进行操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MyBatis Plus提供了许多易用的API，通过使用它们可以大大提升代码的开发效率。</p><h5 id="配置resources"><a href="#配置resources" class="headerlink" title="配置resources"></a>配置resources</h5><ol><li>添加datasource<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatisplus?serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">?</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">?</span></span><br></pre></td></tr></table></figure><h5 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以上图为例</span></span><br><span class="line">ackage domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="comment">//这里用到了lombok，后续会讲</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h3><table><thead><tr><th>操作类型</th><th>方法调用示例</th><th>SQL示例</th></tr></thead><tbody><tr><td>插入操作</td><td><code>mapper.insert(entity);</code></td><td><code>INSERT INTO table (column1, column2, ...) VALUES (?, ?, ...);</code></td></tr><tr><td>更新操作</td><td><code>mapper.updateById(entity);</code></td><td><code>UPDATE table SET column1=?, column2=?, ... WHERE id=?;</code></td></tr><tr><td>删除操作</td><td><code>mapper.deleteById(1);</code></td><td><code>DELETE FROM table WHERE id=?;</code></td></tr><tr><td>查询单个对象</td><td><code>mapper.selectById(1);</code></td><td><code>SELECT * FROM table WHERE id=?;</code></td></tr><tr><td>查询多个对象</td><td><code>mapper.selectList(null);</code></td><td><code>SELECT * FROM table;</code></td></tr><tr><td>条件查询</td><td><code>mapper.selectList(queryWrapper);</code></td><td><code>SELECT * FROM table WHERE column1=value1 AND column2&gt;value2;</code></td></tr><tr><td>分页查询</td><td><code>mapper.selectPage(page, queryWrapper);</code></td><td><code>SELECT COUNT(1) FROM table; SELECT * FROM table WHERE column1=value1 LIMIT startIndex, pageSize;</code></td></tr></tbody></table><h3 id="实体类开发工具lombok"><a href="#实体类开发工具lombok" class="headerlink" title="实体类开发工具lombok"></a>实体类开发工具lombok</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//依赖导入</span></span><br><span class="line">&lt;!-- Lombok --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">1.18</span><span class="number">.20</span>&lt;/version&gt;</span><br><span class="line">    &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>以下是 Lombok 常用的注解和对应的方法：</p><table><thead><tr><th>注解</th><th>解释</th><th>方法示例</th></tr></thead><tbody><tr><td>@Data</td><td>自动生成各种方法，包括 getter/setter/toString/hashCode/equals</td><td><code>@Data class T &#123;private String name;&#125;</code></td></tr><tr><td>@Getter/@Setter</td><td>自动生成 getter/setter 方法</td><td><code>@Getter @Setter private String name;</code></td></tr><tr><td>@ToString</td><td>自动生成 toString 方法</td><td><code>@ToString(of = &#123;&quot;name&quot;, &quot;age&quot;&#125;) class T &#123;private String name; private int age;&#125;</code></td></tr><tr><td>@EqualsAndHashCode</td><td>自动生成 hashCode 和 equals 方法</td><td><code>@EqualsAndHashCode(of = &#123;&quot;name&quot;, &quot;age&quot;&#125;) class T &#123;private String name; private int age;&#125;</code></td></tr><tr><td>@NoArgsConstructor</td><td>自动生成无参构造方法</td><td><code>@NoArgsConstructor class T &#123;&#125;</code></td></tr><tr><td>@RequiredArgsConstructor</td><td>自动生成必须参数的构造方法</td><td><code>@RequiredArgsConstructor class T &#123; private final String name; private final int age; &#125;</code></td></tr><tr><td>@AllArgsConstructor</td><td>自动生成全参构造方法</td><td><code>@AllArgsConstructor class T &#123; private String name; private int age; &#125;</code></td></tr><tr><td>@Builder</td><td>自动生成建造者模式方法，用于链式调用</td><td><code>@Builder class T &#123;private String name; private int age;&#125;</code></td></tr><tr><td>@Slf4j</td><td>自动生成 log 变量，方便日志输出</td><td><code>@Slf4j class T &#123;private static final Logger log = LoggerFactory.getLogger(T.class);&#125;</code></td></tr></tbody></table><p>使用 Lombok 可以大大简化 POJO 类编写的过程。不需要手动编写重复的 getter/setter/toString/hashCode/equals 等方法，可以提高开发效率。同时，Builder 注解生成的建造者模式方法可以使代码更加简洁易读。</p><h3 id="标准分页功能"><a href="#标准分页功能" class="headerlink" title="标准分页功能"></a>标准分页功能</h3><h4 id="boot配置日志开启"><a href="#boot配置日志开启" class="headerlink" title="boot配置日志开启"></a>boot配置日志开启</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">mybatis-plus:</span><br><span class="line"> configuration:</span><br><span class="line">  log-impl: org.apache.ibatis.logging.stdout.StdOutImpl</span><br></pre></td></tr></table></figure><h4 id="基本方法"><a href="#基本方法" class="headerlink" title="基本方法"></a>基本方法</h4><p>下面是 <code>IPage&lt;T&gt;</code> 接口中常用的方法：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>List&lt;T&gt; getRecords()</code></td><td>获取当前页数据</td></tr><tr><td><code>long getTotal()</code></td><td>获取总记录数</td></tr><tr><td><code>IPage&lt;T&gt; setTotal(long total)</code></td><td>设置总记录数，并返回当前对象</td></tr><tr><td><code>long getSize()</code></td><td>获取当前页大小</td></tr><tr><td><code>IPage&lt;T&gt; setSize(long size)</code></td><td>设置当前页大小，并返回当前对象</td></tr><tr><td><code>long getCurrent()</code></td><td>获取当前页数</td></tr><tr><td><code>IPage&lt;T&gt; setCurrent(long current)</code></td><td>设置当前页数，并返回当前对象</td></tr><tr><td><code>long getPages()</code></td><td>获取总页数</td></tr><tr><td><code>IPage&lt;T&gt; setPages(long pages)</code></td><td>设置总页数，并返回当前对象</td></tr><tr><td><code>List&lt;OrderItem&gt; orders()</code></td><td>获取排序字段信息</td></tr><tr><td><code>IPage&lt;T&gt; setOrders(List&lt;OrderItem&gt; orders)</code></td><td>设置排序字段信息，并返回当前对象</td></tr><tr><td><code>boolean optimizeCountSql()</code></td><td>是否进行 count SQL 优化</td></tr><tr><td><code>IPage&lt;T&gt; setOptimizeCountSql(boolean optimizeCountSql)</code></td><td>设置 count SQL 优化标识，并返回当前对象</td></tr><tr><td><code>boolean isSearchCount()</code></td><td>是否进行 count SQL 查询</td></tr><tr><td><code>IPage&lt;T&gt; setSearchCount(boolean isSearchCount)</code></td><td>设置 count SQL 查询标识，并返回当前对象</td></tr><tr><td><code>Map&lt;String, Object&gt; condition()</code></td><td>获取查询条件信息</td></tr><tr><td><code>IPage&lt;T&gt; setCondition(Map&lt;String, Object&gt; condition)</code></td><td>设置查询条件信息，并返回当前对象</td></tr><tr><td><code>List&lt;T&gt; getRecords(boolean optimizeCountSql, boolean isSearchCount)</code></td><td>获取当前页数据，并选择是否进行 count SQL 优化和 count SQL 查询</td></tr><tr><td><code>IPage&lt;T&gt; convert(Function&lt;? super T, ? extends U&gt; converter)</code></td><td>转换当前 <code>IPage&lt;T&gt;</code> 为 <code>IPage&lt;U&gt;</code></td></tr></tbody></table><h4 id="MP拦截器"><a href="#MP拦截器" class="headerlink" title="MP拦截器"></a>MP拦截器</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//类似于一个插件功能，但是不实现的话就可能实现不了分页功能</span></span><br><span class="line"><span class="keyword">package</span> com.example.mybatisplus.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MPConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mpInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1.定义MP拦截器</span></span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">mpInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        <span class="comment">//2.添加具体拦截器</span></span><br><span class="line">        mpInterceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> mpInterceptor;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//同样能够实现上面的方法</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.example.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisConfig</span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> PaginationInterceptor <span class="title function_">paginationInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PaginationInterceptor</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="sql语句打印配置，运行日志"><a href="#sql语句打印配置，运行日志" class="headerlink" title="sql语句打印配置，运行日志"></a>sql语句打印配置，运行日志</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">mybatis-plus:</span><br><span class="line">  configuration:</span><br><span class="line">    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl</span><br></pre></td></tr></table></figure><h4 id="杀掉多余得数据显示"><a href="#杀掉多余得数据显示" class="headerlink" title="杀掉多余得数据显示"></a>杀掉多余得数据显示</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">logback.xml</span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">//在Spring工程生成原生得xml进行配置</span><br><span class="line">  global-config:</span><br><span class="line">    banner: false</span><br><span class="line">  main:</span><br><span class="line">    banner-mode: off</span><br></pre></td></tr></table></figure><h3 id="DQL编程控制"><a href="#DQL编程控制" class="headerlink" title="DQL编程控制"></a>DQL编程控制</h3><h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><ul><li>MyBatisPlus将书写复杂的SQL查询条件进行封装<br><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230504224141560.png" alt="image-20230504224141560"></li><li>其中Wrapper&lt; T &gt;就是对查询条件的封装</li></ul><h4 id="添加QueryWrapper对象"><a href="#添加QueryWrapper对象" class="headerlink" title="添加QueryWrapper对象"></a>添加QueryWrapper对象</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">QueryWrapper</span> <span class="variable">qw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>();</span><br><span class="line">qw.lt(<span class="string">&quot;age&quot;</span>,<span class="number">18</span>);</span><br></pre></td></tr></table></figure><table><thead><tr><th>方法名</th><th>解释</th></tr></thead><tbody><tr><td><code>eq()</code></td><td>等于</td></tr><tr><td><code>ne()</code></td><td>不等于</td></tr><tr><td><code>gt()</code></td><td>大于</td></tr><tr><td><code>ge()</code></td><td>大于等于</td></tr><tr><td><code>lt()</code></td><td>小于</td></tr><tr><td><code>le()</code></td><td>小于等于</td></tr><tr><td><code>between()</code></td><td>在两个值之间</td></tr><tr><td><code>notBetween()</code></td><td>不在两个值之间</td></tr><tr><td><code>like()</code></td><td>模糊查询</td></tr><tr><td><code>notLike()</code></td><td>不匹配某个值的模糊查询</td></tr><tr><td><code>isNull()</code></td><td>为空</td></tr><tr><td><code>isNotNull()</code></td><td>不为空</td></tr><tr><td><code>in()</code></td><td>包含在某个集合中</td></tr><tr><td><code>notIn()</code></td><td>不包含在某个集合中</td></tr><tr><td><code>groupBy()</code></td><td>分组</td></tr><tr><td><code>orderByAsc()</code></td><td>升序排序</td></tr><tr><td><code>orderByDesc()</code></td><td>降序排序</td></tr></tbody></table><h4 id="lambda格式按条件查询"><a href="#lambda格式按条件查询" class="headerlink" title="lambda格式按条件查询"></a>lambda格式按条件查询</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//其一</span></span><br><span class="line">QueryWrapper&lt; User &gt; qw = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt; User &gt;();</span><br><span class="line">qw.lamda().lt(User::getAge,<span class="number">18</span>);</span><br><span class="line">List&lt;User&gt; userList = userDao.selectList(qw);</span><br><span class="line">System.out.println(userList);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//其二</span></span><br><span class="line">LambadQueryWrapper&lt;User&gt; lqw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;();</span><br><span class="line">QueryWrapper&lt;User&gt; qw = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;();</span><br><span class="line">qw.lambda().lt(User::getAge,<span class="number">10</span>);</span><br><span class="line">List&lt;User&gt; userList = userDao.selectList(qw);</span><br><span class="line">System.out.println(userList);</span><br></pre></td></tr></table></figure><h4 id="null值处理"><a href="#null值处理" class="headerlink" title="null值处理"></a>null值处理</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">UserQuery</span> <span class="variable">uq</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserQuery</span>();</span><br><span class="line">uq.setAge2(<span class="number">30</span>);</span><br><span class="line">lqw.lt(<span class="literal">null</span>!=uq.getAge2,User::getAge,uq.getAge2());</span><br><span class="line">List&lt;User&gt; userList = userDao.selectList(lqw);</span><br><span class="line">System.out.println(userList);</span><br></pre></td></tr></table></figure><h3 id="查询投影"><a href="#查询投影" class="headerlink" title="查询投影"></a>查询投影</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//普通</span></span><br><span class="line">QueryWrapper&lt;User&gt; lqw = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>();</span><br><span class="line">lqw.select(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;age&quot;</span>,<span class="string">&quot;tel&quot;</span>);</span><br><span class="line">List&lt;User&gt; userList = userDao.selectList(lqw);</span><br><span class="line">System.out.println(userList);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LambdaQueryWrapper&lt;User&gt; lqw = <span class="keyword">new</span> <span class="title class_">LanbdaQueryWrapper</span>&lt;User&gt;();</span><br><span class="line">lqw.select(User::getId,User::getName,User::getAge);</span><br><span class="line">List&lt;User&gt; userList = userDao.selectList(lqw);</span><br><span class="line">System.out.println(userList);</span><br></pre></td></tr></table></figure><h3 id="查询投影-1"><a href="#查询投影-1" class="headerlink" title="查询投影"></a>查询投影</h3><p>MyBatisPlus 查询投影是一种查询方式，主要用于查询部分实体类属性（字段），而不是整个实体类的所有属性。它提高了查询效率，并减少了网络传输和内存消耗。下面是 MyBatisPlus 查询投影的总结：</p><ol><li><p>查询投影可以通过在实体类中定义一个 VO（View Object）类来实现。这个 VO 类只包含我们需要查询的那些属性，而不是整个实体类。</p></li><li><p>MyBatisPlus 提供了多种查询方式来实现投影查询，包括普通查询、条件构造器查询、Lambda 表达式查询等。</p></li><li><p>在使用 MyBatisPlus 进行查询时，可以使用 <code>selectOne()</code>、<code>selectList()</code>、<code>selectMaps()</code> 等方法实现投影查询。</p></li><li><p>在投影查询中，我们可以使用 <code>select()</code> 方法指定要查询的字段，也可以使用 <code>excludeColumns()</code> 方法排除要查询的字段。</p></li><li><p>投影查询可以使用 <code>@SqlParser(filter = true)</code> 注解来关闭逻辑删除功能。这个注解告诉 MyBatisPlus 不要将逻辑删除的行返回给查询结果列表。</p></li><li><p>对于投影查询结果的处理方式，我们可以选择将结果直接映射到实体类中，或者将结果映射到 Map 对象中。</p></li></ol><h3 id="查询条件设置"><a href="#查询条件设置" class="headerlink" title="查询条件设置"></a>查询条件设置</h3><p>MyBatisPlus 提供了多种设置查询条件的方式，以下是 MyBatisPlus 查询条件设置的总结：</p><ol><li><p>使用实体类作为查询条件。MyBatisPlus 可以自动地将实体类中的非空字段作为查询条件生成 SQL 语句，并将查询结果映射到实体类中。如果存在多个非空字段，它们之间的默认关系是 <code>AND</code>，可以通过注解方式更改其关系为 <code>OR</code>。</p></li><li><p>使用 <code>Wrapper</code> 对象作为查询条件。<code>Wrapper</code> 类是 MyBatisPlus 提供的一种条件构造器，它可以实现 SQL 语句中常见的条件设置操作，例如 <code>eq()</code>（等于）、<code>ne()</code>（不等于）、<code>like()</code>（模糊查询）等。可以使用 Lambda 表达式来构造 <code>Wrapper</code> 对象，也可以直接使用传统的 SQL 片段。</p></li><li><p>使用 <code>QueryWrapper</code> 类作为查询条件。<code>QueryWrapper</code> 是 MyBatisPlus 提供的一种常用条件构造器，可以用于设置 <code>WHERE</code> 条件、排序条件、分组条件等。它支持的查询方式比 <code>Wrapper</code> 更加灵活，例如支持 <code>in()</code>（包含）、<code>between()</code>（在两个值之间）等操作。</p></li><li><p>使用 <code>UpdateWrapper</code> 类作为更新条件。<code>UpdateWrapper</code> 可以用于设置 <code>SET</code> 条件，与 <code>QueryWrapper</code> 类似，也支持 Lambda 表达式和传统的 SQL 片段。</p></li><li><p>使用 <code>LambdaQueryWrapper</code>、<code>LambdaUpdateWrapper</code> 等 Lambda 类型的查询方式，实现更加简洁的条件设置，例如 <code>lambdaQuery().eq(User::getId, 1)</code>。</p></li></ol><h3 id="映射匹配兼容性"><a href="#映射匹配兼容性" class="headerlink" title="映射匹配兼容性"></a>映射匹配兼容性</h3><p>MyBatisPlus 映射匹配兼容性主要指 MyBatisPlus 在进行映射操作时，与传统 MyBatis XML 映射文件的兼容性问题。以下是 MyBatisPlus 映射匹配兼容性的总结：</p><ol><li><p>MyBatisPlus 支持与传统 MyBatis XML 映射文件共存，并且支持使用 <code>@MapperScan</code> 注解扫描所有的 Mapper 接口。</p></li><li><p>MyBatisPlus 中内置了多种自动映射配置方式，包括 <code>AUTO</code>（自动按列名匹配）、<code>FULL</code>（自动映射所有实体属性）、<code>NONE</code>（不进行自动映射）等。</p></li><li><p>MyBatisPlus 还支持自定义类型处理器、全局配置、实体类表名映射、字段名映射等灵活的映射配置方式。</p></li><li><p>在使用 MyBatisPlus 进行开发时，需要注意一些 XML 映射文件中的配置不能与 MyBatisPlus 的自动映射方式冲突，例如 <code>resultMap</code>、<code>association</code>、<code>collection</code> 等配置，需要进行合理的调整。</p></li><li><p>对于一些特殊场景，例如需要进行多表关联查询、复杂的查询构造，或者需要使用 MyBatis 动态 SQL 等功能时，可以继续使用传统的 XML 映射文件进行开发。</p></li></ol><table><thead><tr><th>注解名称</th><th>说明</th><th>应用举例</th></tr></thead><tbody><tr><td><code>@TableId</code></td><td>主键字段的映射注解，用于标注实体类中主键字段</td><td><code>@TableId(value = &quot;id&quot;, type = IdType.AUTO)</code> 表示将 <code>id</code> 字段设置为自增长主键</td></tr><tr><td><code>@TableField</code></td><td>字段映射注解，在实体类字段上使用，用于设置字段与数据库表中列的映射关系</td><td><code>@TableField(value = &quot;name&quot;, exist = true, update = &quot;false&quot;)</code> 表示将 <code>name</code> 字段映射到数据库表的 <code>name</code> 列上，且为非更新字段</td></tr><tr><td><code>@TableName</code></td><td>表名映射注解，用于标注实体类对应的数据库表名</td><td><code>@TableName(&quot;user&quot;)</code> 表示将实体类 <code>User</code> 映射到数据库表 <code>user</code> 上</td></tr><tr><td><code>@KeySequence</code></td><td>序列映射注解，用于标注主键对应的序列名称</td><td><code>@KeySequence(value = &quot;myseq&quot;, clazz = Integer.class)</code> 表示将主键对应的序列名称设为 <code>myseq</code>，并指定序列类型为 <code>Integer</code></td></tr></tbody></table><h3 id="id生成策略"><a href="#id生成策略" class="headerlink" title="id生成策略"></a>id生成策略</h3><table><thead><tr><th>ID 生成策略</th><th>说明</th></tr></thead><tbody><tr><td><code>ASSIGN_ID</code></td><td>自定义 ID 生成器，需要在代码中自行生成 ID 值</td></tr><tr><td><code>ASSIGN_UUID</code></td><td>UUID 生成器，使用 JDK 自带的 <code>UUID.randomUUID()</code> 方法生成 UUID</td></tr><tr><td><code>ASSIGN_ID_WORKER</code></td><td>雪花算法 ID 生成器，使用 Twitter 的 Snowflake 算法生成全局唯一的 ID</td></tr><tr><td><code>IDENTITY</code></td><td>基于数据库的自增长 ID 生成器，数据库类型需要支持自增长</td></tr><tr><td><code>NONE</code></td><td>未设置 ID 生成器</td></tr><tr><td><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230506120115982.png" alt="image-20230506120115982"></td><td></td></tr></tbody></table><h4 id="雪花算法"><a href="#雪花算法" class="headerlink" title="雪花算法"></a>雪花算法</h4><p>雪花算法（Snowflake）是一种唯一ID生成算法。它由Twitter公司开发，用于生成全局唯一的ID。雪花算法的核心思想是在64位的ID中，对不同的部分按照规定的位数进行位移和组合，并使用timestamp作为序列的一部分，可以保证生成的ID全局唯一，且越小的timestamp的序列号越小。</p><p>雪花算法的ID格式如下：</p><p>其中：</p><p>第1位（最高位）未使用，可以根据需求使用，一般为0；<br>第2<del>42位表示timestamp，精确到毫秒级别，总共可以表示2^41-1个数字，约69年；<br>第43</del>52位是机器ID，用于表示生成ID的机器，最多支持2^10=1024个机器；<br>第53~64位是序列号，用于表示同一毫秒内生成的不同ID，支持每毫秒生成2^12-1个ID。<br>使用雪花算法生成的ID具有很高的性能和稳定性，适合用于分布式系统中，例如分布式ID生成、分布式锁等场景。</p><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230506115329072.png" alt="image-20230506115329072"></p><h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><ol><li>在表中添加版本控制字段</li></ol><p>首先，需要在表中添加一个版本控制字段，例如在 User 表中添加一个 version 字段：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> version <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><ol><li>在实体类中添加版本控制字段</li></ol><p>接下来，在实体类中添加版本控制字段：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableId(type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Version</span> <span class="comment">// 添加版本控制注解</span></span><br><span class="line">    <span class="keyword">private</span> Integer version;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略 getter 和 setter 方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在实体类中，需要添加 <code>@Version</code> 注解，来标识该字段为版本控制字段。</p><ol><li>在 Mapper 文件中使用乐观锁</li></ol><p>在 Mapper 文件中进行更新操作时，可以利用 MyBatisPlus 提供的 <code>@Version</code> 注解自动实现乐观锁功能。以下是一个更新 User 表的简单示例：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.example.entity.User&quot;</span>&gt;</span></span><br><span class="line">    update user</span><br><span class="line">    set name = #&#123;name&#125;,</span><br><span class="line">        age = #&#123;age&#125;,</span><br><span class="line">        email = #&#123;email&#125;,</span><br><span class="line">        version = version + 1</span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line">      and version = #&#123;version&#125; <span class="comment">&lt;!-- 添加乐观锁判断 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="MyBatisPlus代码生成器"><a href="#MyBatisPlus代码生成器" class="headerlink" title="MyBatisPlus代码生成器"></a>MyBatisPlus代码生成器</h3><p>MyBatisPlus 提供了一个便捷的代码生成器，可以通过该生成器自动生成 Entity、Mapper、Service 和 Controller 等基础代码，从而加快开发速度，提高效率。以下是 MyBatisPlus 代码生成器的简要总结：</p><ol><li>配置生成器</li></ol><p>在 <code>pom.xml</code> 文件中，添加以下依赖：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同时，在 <code>application.yml</code> 或 <code>application.properties</code> 配置文件中，添加自己的数据库连接信息：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/db_name?characterEncoding=utf8&amp;useUnicode=true&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure><ol start="2"><li>配置代码生成器参数</li></ol><p>在项目中创建一个 <code>generator</code> 包，并创建一个 <code>CodeGenerator</code> 类，用于配置代码生成器参数：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CodeGenerator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 代码生成器相关配置</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">projectPath</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;user.dir&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">authorName</span> <span class="operator">=</span> <span class="string">&quot;your name&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] tables = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;table_name&quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">packagePath</span> <span class="operator">=</span> <span class="string">&quot;com.example&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据源配置</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/db_name&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">driverName</span> <span class="operator">=</span> <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">AutoGenerator</span> <span class="variable">mpg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AutoGenerator</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 全局配置</span></span><br><span class="line">        <span class="type">GlobalConfig</span> <span class="variable">gc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GlobalConfig</span>();</span><br><span class="line">        gc.setOutputDir(projectPath + <span class="string">&quot;/src/main/java&quot;</span>);</span><br><span class="line">        gc.setAuthor(authorName);</span><br><span class="line">        gc.setOpen(<span class="literal">false</span>);</span><br><span class="line">        gc.setEntityName(<span class="string">&quot;%s&quot;</span>);</span><br><span class="line">        gc.setMapperName(<span class="string">&quot;%sMapper&quot;</span>);</span><br><span class="line">        gc.setXmlName(<span class="string">&quot;%sMapper&quot;</span>);</span><br><span class="line">        gc.setServiceName(<span class="string">&quot;%sService&quot;</span>);</span><br><span class="line">        gc.setServiceImplName(<span class="string">&quot;%sServiceImpl&quot;</span>);</span><br><span class="line">        gc.setControllerName(<span class="string">&quot;%sController&quot;</span>);</span><br><span class="line">        gc.setSwagger2(<span class="literal">false</span>);</span><br><span class="line">        mpg.setGlobalConfig(gc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数据源配置</span></span><br><span class="line">        <span class="type">DataSourceConfig</span> <span class="variable">dsc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceConfig</span>();</span><br><span class="line">        dsc.setUrl(url);</span><br><span class="line">        dsc.setDriverName(driverName);</span><br><span class="line">        dsc.setUsername(username);</span><br><span class="line">        dsc.setPassword(password);</span><br><span class="line">        mpg.setDataSource(dsc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 包配置</span></span><br><span class="line">        <span class="type">PackageConfig</span> <span class="variable">pc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PackageConfig</span>();</span><br><span class="line">        pc.setParent(packagePath);</span><br><span class="line">        pc.setEntity(<span class="string">&quot;entity&quot;</span>);</span><br><span class="line">        pc.setMapper(<span class="string">&quot;mapper&quot;</span>);</span><br><span class="line">        pc.setXml(<span class="string">&quot;mapper.xml&quot;</span>);</span><br><span class="line">        pc.setService(<span class="string">&quot;service&quot;</span>);</span><br><span class="line">        pc.setServiceImpl(<span class="string">&quot;service.impl&quot;</span>);</span><br><span class="line">        pc.setController(<span class="string">&quot;controller&quot;</span>);</span><br><span class="line">        mpg.setPackageInfo(pc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 策略配置</span></span><br><span class="line">        <span class="type">StrategyConfig</span> <span class="variable">strategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StrategyConfig</span>();</span><br><span class="line">        strategy.setNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        strategy.setColumnNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        strategy.setControllerMappingHyphenStyle(<span class="literal">true</span>);</span><br><span class="line">        strategy.setEntityLombokModel(<span class="literal">true</span>);</span><br><span class="line">        strategy.setTablePrefix(<span class="string">&quot;t_&quot;</span>);</span><br><span class="line">        strategy.setInclude(tables);</span><br><span class="line">        strategy.setVersionFieldName(<span class="string">&quot;version&quot;</span>);</span><br><span class="line">        strategy.setRestControllerStyle(<span class="literal">true</span>);</span><br><span class="line">        strategy.setLogicDeleteFieldName(<span class="string">&quot;deleted&quot;</span>);</span><br><span class="line">        mpg.setStrategy(strategy);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行生成</span></span><br><span class="line">        mpg.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在以上代码中，我们可以通过配置相关参数来指定生成器的输出路径、作者名、表名、数据源信息、包路径、策略配置等。在执行 <code>AutoGenerator</code> 对象的 <code>execute()</code> 方法后，MyBatisPlus 就会自动生成相应的 Entity、Mapper、Service 和 Controller 等基础代码，生成的文件都可以在指定的输出路径中找到。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;MyBatis-Plus&quot;&gt;&lt;a href=&quot;#MyBatis-Plus&quot; class=&quot;headerlink&quot; title=&quot;MyBatis Plus&quot;&gt;&lt;/a&gt;MyBatis Plus&lt;/h2&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;</summary>
      
    
    
    
    <category term="Study Note" scheme="https://kalyan-zitiu.github.io/categories/Study-Note/"/>
    
    <category term="开发工具" scheme="https://kalyan-zitiu.github.io/categories/Study-Note/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="开发工具" scheme="https://kalyan-zitiu.github.io/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>2023425</title>
    <link href="https://kalyan-zitiu.github.io/2023/04/25/2023425%E8%BA%AB%E9%AB%98%E6%8E%92%E5%BA%8F/"/>
    <id>https://kalyan-zitiu.github.io/2023/04/25/2023425%E8%BA%AB%E9%AB%98%E6%8E%92%E5%BA%8F/</id>
    <published>2023-04-25T08:50:04.000Z</published>
    <updated>2023-08-12T07:41:43.404Z</updated>
    
    <content type="html"><![CDATA[<h1 id="身高排序"><a href="#身高排序" class="headerlink" title="身高排序"></a>身高排序</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个字符串数组names,和一个由<strong>互不相同</strong> 的正整数组成的数组heights.两个数组的长度均为n.对每个下标 i,name[i]和heights[i] 表示第i个人的名字和身高.降序返回对应的名字数组names.</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>在 HashMap 中存储了身高和人名信息。接下来，利用 entrySet() 方法获取映射关系集合，并将这个集合转换成 List 类型的 entryList。接着调用了 Collections.sort() 方法来对 entryList 进行排序。通过 getKey() 和 getValue() 方法分别获取身高和人名信息，最终按照从小到大排序存储到字符串数组 result 中并返回。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String[] sortPeople(String[] names, <span class="type">int</span>[] heights) &#123;</span><br><span class="line">    HashMap&lt;Integer,String&gt; storage = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer,String&gt;();</span><br><span class="line">    <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> names.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line">        storage.put(Integer.valueOf(heights[i]),names[i]);  <span class="comment">// 将身高和对应的人名信息存储到 HashMap 中</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 排序 HashMap，输出结果</span></span><br><span class="line">    List&lt;Map.Entry&lt;Integer, String&gt;&gt; entryList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Map.Entry&lt;Integer, String&gt;&gt;(storage.entrySet());</span><br><span class="line">    Collections.sort(entryList, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Map.Entry&lt;Integer, String&gt;&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Map.Entry&lt;Integer, String&gt; o1, Map.Entry&lt;Integer, String&gt; o2)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> o2.getKey() - o1.getKey();</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    String[] result = <span class="keyword">new</span> <span class="title class_">String</span>[length];</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;Integer, String&gt; entry : entryList) &#123;</span><br><span class="line">        result[i++] = entry.getValue();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Collections是怎么对List里面的Map进行排序的"><a href="#Collections是怎么对List里面的Map进行排序的" class="headerlink" title="Collections是怎么对List里面的Map进行排序的."></a>Collections是怎么对List里面的Map进行排序的.</h2><ol><li>Collections.sort()方法可以对实现Comparable接口或使用自定义比较器Comparator的类进行排序.由于List中的元素是Map,我们需要使用Comparator来指定排序规则.<br>如:<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Map&lt;String, Object&gt;&gt; listMap = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">Map&lt;String, Object&gt; map1 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map1.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">map1.put(<span class="string">&quot;age&quot;</span>, <span class="number">25</span>);</span><br><span class="line">listMap.add(map1);</span><br><span class="line"></span><br><span class="line">Map&lt;String, Object&gt; map2 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map2.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;李四&quot;</span>);</span><br><span class="line">map2.put(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>);</span><br><span class="line">listMap.add(map2);</span><br><span class="line"></span><br><span class="line">Map&lt;String, Object&gt; map3 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map3.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;王五&quot;</span>);</span><br><span class="line">map3.put(<span class="string">&quot;age&quot;</span>, <span class="number">30</span>);</span><br><span class="line">listMap.add(map3);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用匿名内部类 Comparator 进行排序</span></span><br><span class="line">Collections.sort(listMap, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Map&lt;String, Object&gt;&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Map&lt;String, Object&gt; o1, Map&lt;String, Object&gt; o2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">age1</span> <span class="operator">=</span> (<span class="type">int</span>) o1.get(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">age2</span> <span class="operator">=</span> (<span class="type">int</span>) o2.get(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> age1 - age2; <span class="comment">// 正序排列</span></span><br><span class="line">        <span class="comment">// return age2 - age1; // 倒序排列</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"><span class="keyword">for</span> (Map&lt;String, Object&gt; map : listMap) &#123;</span><br><span class="line">    System.out.println(map.get(<span class="string">&quot;name&quot;</span>) + <span class="string">&quot;：&quot;</span> + map.get(<span class="string">&quot;age&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">Leisure articles about work and life</summary>
    
    
    
    <category term="Exercises" scheme="https://kalyan-zitiu.github.io/categories/Exercises/"/>
    
    
    <category term="算法" scheme="https://kalyan-zitiu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>设计模型-结构型模式</title>
    <link href="https://kalyan-zitiu.github.io/2023/04/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%93%E6%9E%84%E5%9E%8B/"/>
    <id>https://kalyan-zitiu.github.io/2023/04/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%93%E6%9E%84%E5%9E%8B/</id>
    <published>2023-04-24T14:00:00.000Z</published>
    <updated>2023-04-24T14:20:27.418Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式-结构型模式"><a href="#设计模式-结构型模式" class="headerlink" title="设计模式-结构型模式"></a>设计模式-结构型模式</h1><h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul><li>将一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口不匹配而无法在一起工作的两个类能够在一起工作。</li><li>适配器模式，定义一个包装类，用于包装不兼容接口的对象</li><li>把一个类的接口变换成客户端所期待的另一种接口，从而使原本接口不匹配而无法一起工作的两个类能够在一起工作。适配器的模式的形式分别：为类的适配器和对象的适配器<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">包装类=适配器Adapter</span><br><span class="line">被包装类对象 = 适配器Adaptee = 被适配的类</span><br></pre></td></tr></table></figure></li></ul><h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><ul><li>原版由于接口不兼容而不能一起工作的那些类可以一起工作。</li><li>透明简单，客户端可以调用同一个接口，因而对客户端来说是透明的</li><li>复用性，需要实现现有的类，此类的接口不符合系统的需要，那么通过适配器模式可以让这些功能得到更好的复用</li><li>扩展性，实现适配器功能的时候，通过调用自己开发的功能，从而自然的扩展系统的功能</li><li>解耦性，将目标类和适配者类解耦，通过引入一个适配器类重用现有的适配者类，而无需修改源码</li><li>符合开闭原则，同一个适配器可以把适配者类和它的子类都适配到目标接口；可以为不同的目标接口实现不同的适配器，而不需要修改适配类。<h3 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h3></li></ul><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202303272341418.png" alt="img"></p><h3 id="举例实例"><a href="#举例实例" class="headerlink" title="举例实例"></a>举例实例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Target</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//这是源类Adapteee没有的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Request</span><span class="params">()</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Adaptee</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">SpecificRequest</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//适配器Adapter继承自Adaptee，同时又实现了目标(Target)接口。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Adapter</span> <span class="keyword">extends</span> <span class="title class_">Adaptee</span> <span class="keyword">implements</span> <span class="title class_">Target</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//目标接口要求调用Request()这个方法名，但源类Adaptee没有方法Request()</span></span><br><span class="line">    <span class="comment">//因此适配器补充上这个方法名</span></span><br><span class="line">    <span class="comment">//但实际上Request()只是调用源类Adaptee的SpecificRequest()方法的内容</span></span><br><span class="line">    <span class="comment">//所以适配器只是将SpecificRequest()方法作了一层封装，封装成Target可以调用的Request()而已</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Request</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.SpecificRequest();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdapterPattern</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Target</span> <span class="variable">mAdapter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Adapter</span>()；</span><br><span class="line">        mAdapter.Request（）;</span><br><span class="line">     </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul><li>过多的使用适配器会让系统非常凌乱，不易整体进行把握。</li></ul><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ul><li>系统需要复用现有类，而该类接口不符合系统的需求，可以使用适配器模式使得原本由于接口不兼容而不能一起工作的类一起工作。</li><li>多个组件功能类似，接口不统一且可能会经常切换时候，可以使用适配器模式，使得客户端额可以统一的接口使用他们。</li></ul><h2 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><ul><li>抽象部分与它的实现部分分离，使它们都可以独立的变化。</li><li>抽取其中一个维度并使之成为独立的类层次</li><li>在某个类中添加一个指向某一属性对象的引用成员变量。</li></ul><h3 id="模式组成"><a href="#模式组成" class="headerlink" title="模式组成"></a>模式组成</h3><table><thead><tr><th>组成</th><th>作用</th></tr></thead><tbody><tr><td>抽象类</td><td>定义抽象类的接口，定义了一个Implementor实现类接口的对象斌可以维护其对象</td></tr><tr><td>提炼抽象类</td><td>扩充抽象类定义的接口，通常属于具体类，实现抽象类中声明的抽象业务方法，在提炼抽象类中，能够调用在实现类接口的业务方法</td></tr><tr><td>实现类接口</td><td>这个接口不一定要与抽象类的接口完全一致，事实上这两个接口可以完全不同，可以仅仅提供基本操作，而抽象类接口可以实现更多复杂的操作。</td></tr><tr><td>具体实现类</td><td>具体实现实现类接口，在不同的具体实现类中提供基本操作的不同实现，在程序运行时候，具体实现类的对象将会替换其父类对象，提供给抽象类具体的业务操作方法。</td></tr></tbody></table><h3 id="解决问题-1"><a href="#解决问题-1" class="headerlink" title="解决问题"></a>解决问题</h3><ul><li>提高系统的可扩充性，在两个变化维度中任意扩展一个维度，都不需要修改原有系统</li><li>有的时候类似于多继承方案，但是多继承方案违背了类的单一职责原则，复用性比较差，而且多继承的结构类中的个数非常庞大，桥接模式是比多继承方案更好的解决方法。</li></ul><h3 id="UML类图-1"><a href="#UML类图-1" class="headerlink" title="UML类图"></a>UML类图</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202303272227473.png" alt="在这里插入图片描述"></p><h3 id="举例实例-1"><a href="#举例实例-1" class="headerlink" title="举例实例"></a>举例实例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用于画各种颜色的接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ColorAPI</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BlueColorAPI</span> <span class="keyword">implements</span> <span class="title class_">ColorAPI</span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;蓝色&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedColorAPI</span> <span class="keyword">implements</span> <span class="title class_">ColorAPI</span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;红色&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Shape</span>&#123;</span><br><span class="line"><span class="keyword">protected</span> ColorAPI colorAPI;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDrawAPI</span><span class="params">(ColorAPI colorAPI)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.colorAPI = colorAPI;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.print(<span class="string">&quot;圆形&quot;</span>);</span><br><span class="line">colorAPI.paint();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.print(<span class="string">&quot;长方形&quot;</span>);</span><br><span class="line">colorAPI.paint();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[]args)</span>&#123;</span><br><span class="line"><span class="comment">//创建一个圆形</span></span><br><span class="line"><span class="type">Shape</span> <span class="variable">shape</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Circle</span>();</span><br><span class="line"><span class="comment">//给圆形蓝色的颜料</span></span><br><span class="line">shape.setDrawAPI(<span class="keyword">new</span> <span class="title class_">BlueColorAPI</span>());</span><br><span class="line"><span class="comment">//上色</span></span><br><span class="line">shape.draw();</span><br><span class="line"><span class="comment">//创建一个长方形</span></span><br><span class="line"><span class="type">Shape</span> <span class="variable">shape1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Rectangle</span>();</span><br><span class="line"><span class="comment">//给长方形上红色的颜料</span></span><br><span class="line">shape1.setDrawAP(<span class="keyword">new</span> <span class="title class_">RedColorAPI</span>());</span><br><span class="line"><span class="comment">//上色</span></span><br><span class="line">shape1.draw();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果这个时候客户需要一个绿色的三角形那么只需要新增一个三角形类即可。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Triangle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;三角形&quot;</span>);</span><br><span class="line">colorAPI.paint();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GreenColorAPI</span> <span class="keyword">implements</span> <span class="title class_">ColorAPI</span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">()</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;绿色&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span>&#123;</span><br><span class="line"><span class="type">Shape</span> <span class="variable">shape</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Triangle</span>();</span><br><span class="line">shape.setDrawAPI(<span class="keyword">new</span> <span class="title class_">GreenColorAPI</span>());</span><br><span class="line">shape.draw();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h3><ul><li>桥接模式的引入会增加系统的理解与设计的难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计以及编程</li><li>桥接模式要求正确的识别出系统中两个独立变化的维度，因此其使用范围具有一定的局限性。</li></ul><h2 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h2><h3 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h3><ul><li>不改变现有对象结构的情况下，动态地给对象增加一些职责的模式，它属于对象结构型模式</li></ul><h3 id="解决问题-2"><a href="#解决问题-2" class="headerlink" title="解决问题"></a>解决问题</h3><ul><li>装饰器是继承的有力补充，比继承灵活，在不改变原有对象的情况下，动态地给一个对象扩展功能，即插即用。</li><li>通过不用装饰类以及这些装饰类的排列组合，可以实现不同效果</li><li>装饰器模式完全遵守开闭原则</li></ul><h3 id="模式组成-1"><a href="#模式组成-1" class="headerlink" title="模式组成"></a>模式组成</h3><table><thead><tr><th align="left">组成</th><th>作用</th></tr></thead><tbody><tr><td align="left">抽象构件</td><td>定义一个抽象接口以规范准备接收附加责任的对象</td></tr><tr><td align="left">具体构件</td><td>实现抽象构件，通过装饰角色为其添加一些职责</td></tr><tr><td align="left">抽象装饰</td><td>继承抽象构件，并包含具体构件的实例，可以通过其子类扩展具体构件的功能</td></tr><tr><td align="left">具体装饰</td><td>实现抽象装饰的相关方法，并给具体构件对象添加附加责任。</td></tr></tbody></table><h3 id="UML类图-2"><a href="#UML类图-2" class="headerlink" title="UML类图"></a>UML类图</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202303290039331.png" alt="image-20230329003915296"></p><h3 id="举例实例-2"><a href="#举例实例-2" class="headerlink" title="举例实例"></a>举例实例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DecoratorPattern</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Component</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteComponent</span>();</span><br><span class="line">        p.operation();</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------------------&quot;</span>);</span><br><span class="line">        <span class="type">Component</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteDecorator</span>(p);</span><br><span class="line">        d.operation();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//抽象构件角色</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Component</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//具体构件角色</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteComponent</span> <span class="keyword">implements</span> <span class="title class_">Component</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConcreteComponent</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;创建具体构件角色&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用具体构件角色的方法operation()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//抽象装饰角色</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Decorator</span> <span class="keyword">implements</span> <span class="title class_">Component</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Component component;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Decorator</span><span class="params">(Component component)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.component = component;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span> &#123;</span><br><span class="line">        component.operation();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//具体装饰角色</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteDecorator</span> <span class="keyword">extends</span> <span class="title class_">Decorator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConcreteDecorator</span><span class="params">(Component component)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(component);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.operation();</span><br><span class="line">        addedFunction();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addedFunction</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;为具体构件角色增加额外的功能addedFunction()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="问题-2"><a href="#问题-2" class="headerlink" title="问题"></a>问题</h3><ul><li>装饰器模式会增加许多子类，过度使用会增加程序的复杂性。<h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><h3 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h3></li><li>为其他对象提供一种代理以控制这个对象的访问。</li></ul><h3 id="解决问题-3"><a href="#解决问题-3" class="headerlink" title="解决问题"></a>解决问题</h3><ul><li>职责清晰</li><li>高扩展，只要实现了接口，都可以用代理</li><li>智能化，动态代理。</li></ul><h3 id="UML图"><a href="#UML图" class="headerlink" title="UML图"></a>UML图</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202303290100829.png" alt="image-20230329010025796"></p><h3 id="举例实例-3"><a href="#举例实例-3" class="headerlink" title="举例实例"></a>举例实例</h3><h4 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h4><ol><li>以租房为例，我们一般用租房软件、找中介或者找房东。这里的中介就是代理者。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个提供了租房方法的接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IRentHouse</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">rentHouse</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义租房的实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RentHouse</span> <span class="keyword">implements</span> <span class="title class_">IRentHouse</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rentHouse</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;租了一间房子。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//租房找中介</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IntermediaryProxy</span> <span class="keyword">implements</span> <span class="title class_">IRentHouse</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IRentHouse rentHouse;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">IntermediaryProxy</span><span class="params">(IRentHouse irentHouse)</span>&#123;</span><br><span class="line">        rentHouse = irentHouse;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rentHouse</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;交中介费&quot;</span>);</span><br><span class="line">        rentHouse.rentHouse();</span><br><span class="line">        System.out.println(<span class="string">&quot;中介负责维修管理&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//定义租房</span></span><br><span class="line">        <span class="type">IRentHouse</span> <span class="variable">rentHouse</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RentHouse</span>();</span><br><span class="line">        <span class="comment">//定义中介</span></span><br><span class="line">        <span class="type">IRentHouse</span> <span class="variable">intermediary</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IntermediaryProxy</span>(rentHouse);</span><br><span class="line">        <span class="comment">//中介租房</span></span><br><span class="line">        intermediary.rentHouse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h2><h3 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h3>又叫部分整体模式，是用于把一组相似的对象当作一个单一的对象。组合模式依据树形结构来组合对象，用来表示部分以及整体层次，他创建了对象组的树形结构<h3 id="模式组成-2"><a href="#模式组成-2" class="headerlink" title="模式组成"></a>模式组成</h3></li></ol><table><thead><tr><th>角色</th><th>解释</th></tr></thead><tbody><tr><td>抽象构件</td><td>为树叶构件和树枝构件声明公共接口，实现默认行为</td></tr><tr><td>树叶构件</td><td>没有子节点，用于继承或实现抽象构件，是树状结构最底层。</td></tr><tr><td>树枝构件</td><td>有子节点，是组合中的分支节点。</td></tr></tbody></table><h3 id="解决问题-4"><a href="#解决问题-4" class="headerlink" title="解决问题"></a>解决问题</h3><ul><li>一致处理单个对象和组合对象，无须关心处理的是单个对象还是组合对象。</li><li>容易在组合体内加入新的对象，客户端不会因为加入了新的对象而更改源代码。</li></ul><h3 id="问题-3"><a href="#问题-3" class="headerlink" title="问题"></a>问题</h3><ul><li>设计复杂，需要一定时间理清层次关系</li><li>不容易限制容器中的构件</li><li>不容易用继承的方法来增加构件的新功能</li></ul><h3 id="举例实现"><a href="#举例实现" class="headerlink" title="举例实现"></a>举例实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象构件</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这里使用接口或者抽象类都可以的</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Region</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> region</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Region region)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> region</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Region region)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前节点下面的节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">abstract</span> Region <span class="title function_">getChild</span><span class="params">(<span class="type">int</span> i)</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通知，上面下个政策一级一级的传递，一般都有一个动作方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">notice</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 树叶地区</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeafRegion</span> <span class="keyword">extends</span> <span class="title class_">Region</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>  String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LeafRegion</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Region region)</span> &#123;</span><br><span class="line"><span class="comment">//叶子节点没有下级</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Region region)</span> &#123;</span><br><span class="line"><span class="comment">//叶子节点没有下级</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    Region <span class="title function_">getChild</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">    <span class="comment">//叶子节点没有下级</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">notice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 最底层的接到了通知</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 树枝地区</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CompositeRegion</span> <span class="keyword">extends</span> <span class="title class_">Region</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用来盛放子节点</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Region&gt; children = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Region region)</span> &#123;</span><br><span class="line">        children.add(region);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Region region)</span> &#123;</span><br><span class="line">        children.remove(region);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    Region <span class="title function_">getChild</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">notice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">/*通知下级所有的部门，下级如果是树枝的话继续通知，这是个递归操作*/</span></span><br><span class="line">        <span class="keyword">for</span> (Region child : children) &#123;</span><br><span class="line">            child.notice();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h2><h3 id="简介-5"><a href="#简介-5" class="headerlink" title="简介"></a>简介</h3><ul><li>为子系统的一组接口提供一个一致的界面，定义了一个高层接口，这个接口使得这一子系统更加容易使用</li></ul><h3 id="模式组成-3"><a href="#模式组成-3" class="headerlink" title="模式组成"></a>模式组成</h3><table><thead><tr><th>角色类型</th><th>作用解释</th></tr></thead><tbody><tr><td>外观(Facade)</td><td>封装系统底层功能，为客户端提供简单易用的接口</td></tr><tr><td>子系统类(SubSystem)</td><td>提供系统底层的具体实现细节</td></tr><tr><td>客户端(Client)</td><td>调用外观对象提供的简单接口，使用系统底层功能而无需了解其具体实现</td></tr></tbody></table><h3 id="解决问题-5"><a href="#解决问题-5" class="headerlink" title="解决问题"></a>解决问题</h3><ul><li>降低访问复杂系统的内部子系统时的复杂度，简化个护短之间的接口。</li><li>减少系统的互相依赖，提高灵活性，提高安全性。<h3 id="问题-4"><a href="#问题-4" class="headerlink" title="问题"></a>问题</h3></li><li>不符合开闭原则</li></ul><h3 id="举例实现-1"><a href="#举例实现-1" class="headerlink" title="举例实现"></a>举例实现</h3><ol><li>假设你现在需要购买一台电脑，在购买这个过程中，有很多不同的步骤需要完成，如选择操作系统、购买CPU、选择显示屏尺寸等等。然而，如果你并不关心电脑内部如何工作，而只关注它的整体性能和使用方式，那么外观模式就可以被用来简化这个过程。</li></ol><p>具体地说，一个电脑厂商可能会实现一个电脑购买外观(Facade)，它将 CPU 购买、内存配置、显示器选择、操作系统安装等操作封装在一起，提供一个简单易用的接口让用户来购买电脑。对于客户端而言，只需要调用外观对象提供的购买接口就可以了，而不必了解具体的硬件和软件实现细节，大大简化了购买电脑的流程。当内部实现发生变化时，只需修改外观类即可，对客户端代码没有影响。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ComputerPurchaseFacade</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CPU cpu;</span><br><span class="line">    <span class="keyword">private</span> Memory memory;</span><br><span class="line">    <span class="keyword">private</span> Display display;</span><br><span class="line">    <span class="keyword">private</span> OS os;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ComputerPurchaseFacade</span><span class="params">()</span> &#123;</span><br><span class="line">        cpu = <span class="keyword">new</span> <span class="title class_">CPU</span>();</span><br><span class="line">        memory = <span class="keyword">new</span> <span class="title class_">Memory</span>();</span><br><span class="line">        display = <span class="keyword">new</span> <span class="title class_">Display</span>();</span><br><span class="line">        os = <span class="keyword">new</span> <span class="title class_">OS</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyComputer</span><span class="params">(<span class="type">int</span> cpuType, <span class="type">int</span> memorySize, <span class="type">int</span> displaySize, <span class="type">int</span> osType)</span> &#123;</span><br><span class="line">        cpu.selectCPU(cpuType);</span><br><span class="line">        memory.setMemorySize(memorySize);</span><br><span class="line">        display.selectDisplay(displaySize);</span><br><span class="line">        os.installOS(osType);</span><br><span class="line">        System.out.println(<span class="string">&quot;Your computer has been purchased!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CPU</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectCPU</span><span class="params">(<span class="type">int</span> type)</span> &#123;</span><br><span class="line">        <span class="comment">// 选择不同种类的CPU</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Memory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMemorySize</span><span class="params">(<span class="type">int</span> size)</span> &#123;</span><br><span class="line">        <span class="comment">// 配置内存大小</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Display</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectDisplay</span><span class="params">(<span class="type">int</span> size)</span> &#123;</span><br><span class="line">        <span class="comment">// 选择不同尺寸的显示器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OS</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">installOS</span><span class="params">(<span class="type">int</span> type)</span> &#123;</span><br><span class="line">        <span class="comment">// 安装不同类型的操作系统</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ComputerPurchaseFacade</span> <span class="variable">facade</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComputerPurchaseFacade</span>();</span><br><span class="line">        facade.buyComputer(<span class="number">1</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ol><li>为一个复杂的子系统提高逻辑支持</li><li>调用多个子系统完成逻辑</li></ol><h2 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h2><h3 id="简介-6"><a href="#简介-6" class="headerlink" title="简介"></a>简介</h3><ul><li>有两类对象：共享的享元对象和非共享的外部状态对象。享元对象包含内部状态和外部状态两部分，其中内部状态是不变的，可以被多个享元对象共享；外部状态是变化的，不能被共享，每个对象都需要单独维护。</li><li>将原本需要大量创建的相似对象合并为较少的共享对象，这样可以节省内存空间，并提高程序的运行效率。</li></ul><h3 id="解决问题-6"><a href="#解决问题-6" class="headerlink" title="解决问题"></a>解决问题</h3><ul><li>减少系统内部资源开销，通过对象共享，减少系统创建对象的数量，降低内存的开销</li><li>提高系统性能，减少垃圾回收机制的次数</li></ul><h3 id="问题-5"><a href="#问题-5" class="headerlink" title="问题"></a>问题</h3><ul><li>对象共享会导致程序逻辑复杂化。原来对象自己拥有的内部状态和外部状态现在需要从外部导入。</li><li>对象共享是有限制的，即那些可以共享的对象需要满足一定的条件，否则无法实现对象的共享。</li></ul><h3 id="模式组成-4"><a href="#模式组成-4" class="headerlink" title="模式组成"></a>模式组成</h3><table><thead><tr><th>角色类型</th><th>作用解释</th></tr></thead><tbody><tr><td>抽象享元角色（Flyweight）</td><td>定义享元对象的接口及需要缓存的数据，充当所有具体享元类的基类。</td></tr><tr><td>具体享元角色（ConcreteFlyweight）</td><td>实现抽象享元角色所定义的接口，同时需要为内部状态增加存储空间。并且可以接受外部状态（容易变化的状态），并根据外部状态进行相应的业务逻辑处理。</td></tr><tr><td>非共享具体享元角色（UnsharedConcreteFlyweight）</td><td>通常不会出现单独的非共享具体享元角色，因为非共享具体享元角色与单纯的享元模式没有什么区别。</td></tr><tr><td>享元工厂角色（FlyweightFactory）</td><td>提供一个用于管理享元对象的工厂类。主要用于享元对象的创建和缓存，实现对象的复用，减少对象的创建次数，节省内存空间。</td></tr><tr><td>客户端角色（Client）</td><td>通过享元工厂角色获取具体的享元角色，并访问具体享元角色中的相关业务方法。</td></tr></tbody></table><h3 id="举例实现-2"><a href="#举例实现-2" class="headerlink" title="举例实现"></a>举例实现</h3><ol><li>我们正在开发一个棋类游戏，游戏中有大量的棋子需要被使用。不同的棋子有不同的颜色和形状，但是棋子的功能（如移动、吃子等）都是一样的。我们可以复用相同颜色和形状的棋子对象，避免重复创建棋子导致内存资源的浪费，提高系统的性能。</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//棋子的共享接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ChessPiece</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setPosition</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//维护了颜色和形状的内部状态，位置等可变状态外部传入</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteChessPiece</span> <span class="keyword">implements</span> <span class="title class_">ChessPiece</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line">    <span class="keyword">private</span> String shape;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConcreteChessPiece</span><span class="params">(String color, String shape)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">        <span class="built_in">this</span>.shape = shape;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPosition</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        System.out.println(String.format(<span class="string">&quot;Set position for %s %s chess to (%d,%d)&quot;</span>, color, shape, x, y));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(String.format(<span class="string">&quot;Draw %s %s chess&quot;</span>, color, shape));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//管理棋子对象并进行复用。</span></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChessPieceFactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, ChessPiece&gt; chessPieces = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ChessPiece <span class="title function_">getChessPiece</span><span class="params">(String color, String shape)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> color + shape;</span><br><span class="line">        <span class="keyword">if</span> (chessPieces.containsKey(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span> chessPieces.get(key);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">ChessPiece</span> <span class="variable">piece</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteChessPiece</span>(color, shape);</span><br><span class="line">            chessPieces.put(key, piece);</span><br><span class="line">            <span class="keyword">return</span> piece;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//客户端</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="type">ChessPiece</span> <span class="variable">piece</span> <span class="operator">=</span> ChessPieceFactory.getChessPiece(<span class="string">&quot;red&quot;</span>, <span class="string">&quot;circle&quot;</span>);</span><br><span class="line">    piece.setPosition(i, <span class="number">0</span>);</span><br><span class="line">    piece.draw();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设计模式-结构型模式&quot;&gt;&lt;a href=&quot;#设计模式-结构型模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式-结构型模式&quot;&gt;&lt;/a&gt;设计模式-结构型模式&lt;/h1&gt;&lt;h2 id=&quot;适配器模式&quot;&gt;&lt;a href=&quot;#适配器模式&quot; class=&quot;he</summary>
      
    
    
    
    <category term="设计模式" scheme="https://kalyan-zitiu.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="https://kalyan-zitiu.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Kalyan的训练计划</title>
    <link href="https://kalyan-zitiu.github.io/2023/04/20/Kalyan%E7%9A%84%E5%81%A5%E8%BA%AB%E7%AC%94%E8%AE%B0/"/>
    <id>https://kalyan-zitiu.github.io/2023/04/20/Kalyan%E7%9A%84%E5%81%A5%E8%BA%AB%E7%AC%94%E8%AE%B0/</id>
    <published>2023-04-20T04:30:34.000Z</published>
    <updated>2023-04-23T13:49:57.878Z</updated>
    
    <content type="html"><![CDATA[<h2 id="胸"><a href="#胸" class="headerlink" title="胸"></a>胸</h2><h3 id="训练计划"><a href="#训练计划" class="headerlink" title="训练计划"></a>训练计划</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423210444548.png" alt="image-20230423210444548"></p><h3 id="蝴蝶肌夹胸"><a href="#蝴蝶肌夹胸" class="headerlink" title="蝴蝶肌夹胸"></a>蝴蝶肌夹胸</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423002229315.png" alt="image-20230423002229315"></p><h3 id="平板卧推"><a href="#平板卧推" class="headerlink" title="平板卧推"></a>平板卧推</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423002522177.png" alt="image-20230423002522177"></p><h3 id="上斜哑铃飞鸟"><a href="#上斜哑铃飞鸟" class="headerlink" title="上斜哑铃飞鸟"></a>上斜哑铃飞鸟</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423002305022.png" alt="image-20230423002305022"></p><h3 id="杠铃上斜卧推"><a href="#杠铃上斜卧推" class="headerlink" title="杠铃上斜卧推"></a>杠铃上斜卧推</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423002830127.png" alt="image-20230423002830127"></p><h3 id="龙门架夹下胸"><a href="#龙门架夹下胸" class="headerlink" title="龙门架夹下胸"></a>龙门架夹下胸</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423003136604.png" alt="image-20230423003136604"></p><h3 id="双杠臂屈伸"><a href="#双杠臂屈伸" class="headerlink" title="双杠臂屈伸"></a>双杠臂屈伸</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423003029827.png" alt="image-20230423003029827"></p><h2 id="背"><a href="#背" class="headerlink" title="背"></a>背</h2><h3 id="训练计划-1"><a href="#训练计划-1" class="headerlink" title="训练计划"></a>训练计划</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423210334836.png" alt="image-20230423210334836"></p><h3 id="高位下拉"><a href="#高位下拉" class="headerlink" title="高位下拉"></a>高位下拉</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423164327463.png" alt="image-20230423164327463"></p><h3 id="坐姿划船"><a href="#坐姿划船" class="headerlink" title="坐姿划船"></a>坐姿划船</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423205735398.png" alt="image-20230423205735398"></p><h3 id="直臂下拉"><a href="#直臂下拉" class="headerlink" title="直臂下拉"></a>直臂下拉</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423205851519.png" alt="image-20230423205851519"></p><h3 id="窄距高位下拉"><a href="#窄距高位下拉" class="headerlink" title="窄距高位下拉"></a>窄距高位下拉</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423205942885.png" alt="image-20230423205942885"></p><h3 id="俯身划船"><a href="#俯身划船" class="headerlink" title="俯身划船"></a>俯身划船</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423210151270.png" alt="image-20230423210151270"></p><h3 id="宽距坐姿划船"><a href="#宽距坐姿划船" class="headerlink" title="宽距坐姿划船"></a>宽距坐姿划船</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423210236422.png" alt="image-20230423210236422"></p><h2 id="腿"><a href="#腿" class="headerlink" title="腿"></a>腿</h2><h3 id="训练计划-2"><a href="#训练计划-2" class="headerlink" title="训练计划"></a>训练计划</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423211817734.png" alt="image-20230423211817734"></p><h3 id="坐姿腿屈伸"><a href="#坐姿腿屈伸" class="headerlink" title="坐姿腿屈伸"></a>坐姿腿屈伸</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423210829948.png" alt="image-20230423210829948"></p><h3 id="深蹲"><a href="#深蹲" class="headerlink" title="深蹲"></a>深蹲</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423210950628.png" alt="image-20230423210950628"></p><h3 id="倒蹬机腿举"><a href="#倒蹬机腿举" class="headerlink" title="倒蹬机腿举"></a>倒蹬机腿举</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423211530323.png" alt="image-20230423211530323"></p><h3 id="俯卧腿弯举（腰部不用力，屁股不撅）"><a href="#俯卧腿弯举（腰部不用力，屁股不撅）" class="headerlink" title="俯卧腿弯举（腰部不用力，屁股不撅）"></a>俯卧腿弯举（腰部不用力，屁股不撅）</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423211715526.png" alt="image-20230423211715526"></p><h2 id="肩"><a href="#肩" class="headerlink" title="肩"></a>肩</h2><h3 id="训练计划-3"><a href="#训练计划-3" class="headerlink" title="训练计划"></a>训练计划</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423212631090.png" alt="image-20230423212631090"></p><h3 id="史密斯推肩"><a href="#史密斯推肩" class="headerlink" title="史密斯推肩"></a>史密斯推肩</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423212110581.png" alt="image-20230423212110581"></p><h3 id="哑铃侧平举"><a href="#哑铃侧平举" class="headerlink" title="哑铃侧平举"></a>哑铃侧平举</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423212222249.png" alt="image-20230423212222249"></p><h3 id="蝴蝶机反向飞鸟"><a href="#蝴蝶机反向飞鸟" class="headerlink" title="蝴蝶机反向飞鸟"></a>蝴蝶机反向飞鸟</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423212320016.png" alt="image-20230423212320016"></p><h3 id="绳索前平举"><a href="#绳索前平举" class="headerlink" title="绳索前平举"></a>绳索前平举</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423212411999.png" alt="image-20230423212411999"></p><h3 id="绳索面拉"><a href="#绳索面拉" class="headerlink" title="绳索面拉"></a>绳索面拉</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423212537833.png" alt="image-20230423212537833"></p><h2 id="小臂"><a href="#小臂" class="headerlink" title="小臂"></a>小臂</h2><h3 id="训练计划-4"><a href="#训练计划-4" class="headerlink" title="训练计划"></a>训练计划</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423213030936.png" alt="image-20230423213030936"></p><h3 id="哑铃手腕弯举"><a href="#哑铃手腕弯举" class="headerlink" title="哑铃手腕弯举"></a>哑铃手腕弯举</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423212818644.png" alt="image-20230423212818644"></p><h3 id="反向哑铃手腕弯举"><a href="#反向哑铃手腕弯举" class="headerlink" title="反向哑铃手腕弯举"></a>反向哑铃手腕弯举</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423212903715.png" alt="image-20230423212903715"></p><h3 id="站姿体后杠铃手腕弯举"><a href="#站姿体后杠铃手腕弯举" class="headerlink" title="站姿体后杠铃手腕弯举"></a>站姿体后杠铃手腕弯举</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423212958122.png" alt="image-20230423212958122"></p><h2 id="二三头"><a href="#二三头" class="headerlink" title="二三头"></a>二三头</h2><h3 id="训练计划-5"><a href="#训练计划-5" class="headerlink" title="训练计划"></a>训练计划</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423214003078.png" alt="image-20230423214003078"></p><h3 id="杠铃弯举"><a href="#杠铃弯举" class="headerlink" title="杠铃弯举"></a>杠铃弯举</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423213308228.png" alt="image-20230423213308228"></p><h3 id="直杠臂屈伸"><a href="#直杠臂屈伸" class="headerlink" title="直杠臂屈伸"></a>直杠臂屈伸</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423213746793.png" alt="image-20230423213746793"></p><h3 id="哑铃颈后臂屈伸"><a href="#哑铃颈后臂屈伸" class="headerlink" title="哑铃颈后臂屈伸"></a>哑铃颈后臂屈伸</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423213730391.png" alt="image-20230423213730391"></p><h3 id="牧师椅杠铃弯举"><a href="#牧师椅杠铃弯举" class="headerlink" title="牧师椅杠铃弯举"></a>牧师椅杠铃弯举</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423213700395.png" alt="image-20230423213700395"></p><h3 id="绳索颈后臂屈伸"><a href="#绳索颈后臂屈伸" class="headerlink" title="绳索颈后臂屈伸"></a>绳索颈后臂屈伸</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423213846270.png" alt="image-20230423213846270"></p><h3 id="练前篇"><a href="#练前篇" class="headerlink" title="练前篇"></a>练前篇</h3><ul><li>训练前一小时,一勺蛋白粉</li><li>训练前半小时上氮泵和肌酸</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;胸&quot;&gt;&lt;a href=&quot;#胸&quot; class=&quot;headerlink&quot; title=&quot;胸&quot;&gt;&lt;/a&gt;胸&lt;/h2&gt;&lt;h3 id=&quot;训练计划&quot;&gt;&lt;a href=&quot;#训练计划&quot; class=&quot;headerlink&quot; title=&quot;训练计划&quot;&gt;&lt;/a&gt;训练计划&lt;/h3&gt;&lt;p</summary>
      
    
    
    
    <category term="分享" scheme="https://kalyan-zitiu.github.io/categories/%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="训练" scheme="https://kalyan-zitiu.github.io/tags/%E8%AE%AD%E7%BB%83/"/>
    
  </entry>
  
  <entry>
    <title>JDBC</title>
    <link href="https://kalyan-zitiu.github.io/2023/04/18/JDBC/"/>
    <id>https://kalyan-zitiu.github.io/2023/04/18/JDBC/</id>
    <published>2023-04-18T11:00:00.000Z</published>
    <updated>2023-08-12T07:42:03.944Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JDBC学习笔记"><a href="#JDBC学习笔记" class="headerlink" title="JDBC学习笔记"></a>JDBC学习笔记</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>JDBC(Java DataBase Connectivity)是Java编程语言中连接数据库的一种标准规范, 其提供了访问许多不同类型数据库的标准化方法，使得Java程序员能够很容易地使用数据库和执行SQL查询，从而方便地与任何数据库进行交互。</p><ul><li>本质上JDBC就是用来操作关系型数据库的一套API。</li></ul><p>JDBC API包含两个级别：</p><ul><li><p>JDBC API：Java应用程序通过这个API与JDBC管理器通信。</p></li><li><p>JDBC 驱动程序API：这个API定义了Java应用程序和JDBC驱动程序之间的协议。</p></li><li><p>JDBC可以为所有主流数据库提供统一的访问方式，从而有助于加快Java开发者的工作效率。</p></li></ul><p>下面是个使用java语言操作关系型数据库的一套API</p><h3 id="导入jar"><a href="#导入jar" class="headerlink" title="导入jar"></a>导入jar</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202304172257201.png" alt="image-20230417225731159"></p><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202304172258423.png" alt="image-20230417225839387"></p><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">            conn = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/jdbc&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;12345678&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;Connected to database successfully!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Error: unable to load driver class!&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Error: failed to connect to database!&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (conn != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202304172301062.png" alt="image-20230417230155033"></p><h2 id="API详解"><a href="#API详解" class="headerlink" title="API详解"></a>API详解</h2><h3 id="DriverManager"><a href="#DriverManager" class="headerlink" title="DriverManager"></a>DriverManager</h3><ul><li>驱动管理类1.注册驱动2.获取数据库连接</li><li>与各种关系型数据库进行通信。</li></ul><p>以下部分方法：</p><table><thead><tr><th>方法</th><th>解释</th></tr></thead><tbody><tr><td>getConnection()</td><td>连接到指定的数据库，并返回一个连接对象</td></tr><tr><td>getDriver()</td><td>返回一个具体的驱动</td></tr><tr><td>setLogWriter()</td><td>设置当前应用程序的日志Writer对象</td></tr><tr><td>getLogWriter()</td><td>获取当前应用程序的日志Writer对象</td></tr></tbody></table><h3 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a>Connection</h3><ul><li>表示与特定的数据库进行连接。</li><li>一旦获得一个Connection对象，就可以使用它来执行SQL语句。</li></ul><table><thead><tr><th align="left">方法</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">createStatement()</td><td align="left">创建一个 Statement 对象，用于执行静态 SQL 语句并返回其生成的结果。</td></tr><tr><td align="left">prepareStatement(String sql)</td><td align="left">创建一个 PreparedStatement 对象，用于将参数化的 SQL 语句发送到数据库。</td></tr><tr><td align="left">setAutoCommit(boolean autoCommit)</td><td align="left">设置是否启用自动提交模式。如果启用，每个 SQL 语句默认作为事务处理。</td></tr><tr><td align="left">commit()</td><td align="left">使自上次提交以来所做的所有更改成为永久性更改，并释放 Transaction 对象当前持有的所有锁。</td></tr><tr><td align="left">rollback()</td><td align="left">撤销自上次提交以来所做的所有更改，并释放 Transaction 对象当前持有的所有锁。</td></tr><tr><td align="left">close()</td><td align="left">关闭此 Connection 对象并释放与之关联的所有资源。</td></tr></tbody></table><h3 id="Statement"><a href="#Statement" class="headerlink" title="Statement"></a>Statement</h3><ul><li>能够执行静态的SQL语句，并返回产生结果。</li><li>代表在数据库上执行的SQL语句的接口</li></ul><table><thead><tr><th align="left">方法名</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">executeQuery(String sql)</td><td align="left">执行给定的 SQL 语句，它返回一个 ResultSet 对象。</td></tr><tr><td align="left">executeUpdate(String sql)</td><td align="left">执行给定的 SQL 语句，它可能会影响数据库中的任何数据。executeUpdate() 方法返回受影响的行数。</td></tr><tr><td align="left">execute(String sql)</td><td align="left">执行给定的 SQL 语句，该语句可能会返回多个结果。execute() 方法返回一个 boolean 值，指示第一个结果是否是 ResultSet 类型。</td></tr><tr><td align="left">addBatch(String sql)</td><td align="left">将给定的 SQL 语句添加到当前对象的批处理命令列表中。</td></tr><tr><td align="left">clearBatch()</td><td align="left">从此 Statement 对象的当前命令列表中删除所有命令。</td></tr><tr><td align="left">executeBatch()</td><td align="left">提交一批更新命令到数据库。executeBatch() 方法返回一个 int 数组，它表示批处理中每个命令影响的行数。</td></tr><tr><td align="left">close()</td><td align="left">释放此 Statement 对象使用的所有资源。</td></tr></tbody></table><h3 id="ResultSet"><a href="#ResultSet" class="headerlink" title="ResultSet"></a>ResultSet</h3><ul><li>执行查询后返回的对数据库的结果集表示。ResultSet是一个接口，它包含了一个表的所有行以及每个行的各个列的值</li></ul><table><thead><tr><th align="left">方法名</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">next()</td><td align="left">将结果集中的光标移到下一行。</td></tr><tr><td align="left">getInt(int columnIndex) 和 getInt(String columnName)</td><td align="left">获取指定列的 int 类型的值。</td></tr><tr><td align="left">getDouble(int columnIndex) 和 getDouble(String columnName)</td><td align="left">获取指定列的 double 类型的值。</td></tr><tr><td align="left">getString(int columnIndex) 和 getString(String columnName)</td><td align="left">获取指定列的 String 类型的值。</td></tr><tr><td align="left">getDate(int columnIndex) 和 getDate(String columnName)</td><td align="left">获取指定列的 java.sql.Date 类型的值。</td></tr><tr><td align="left">getTime(int columnIndex) 和 getTime(String columnName)</td><td align="left">获取指定列的 java.sql.Time 类型的值。</td></tr><tr><td align="left">getTimestamp(int columnIndex) 和 getTimestamp(String columnName)</td><td align="left">获取指定列的 java.sql.Timestamp 类型的值。</td></tr><tr><td align="left">getObject(int columnIndex) 和 getObject(String columnName)</td><td align="left">获取指定列的 java.lang.Object 类型的值。</td></tr><tr><td align="left">wasNull()</td><td align="left">如果上一次获取的值为空，返回 true。</td></tr><tr><td align="left">close()</td><td align="left">释放资源，关闭 ResultSet 对象。</td></tr></tbody></table><h3 id="PreparedStatement"><a href="#PreparedStatement" class="headerlink" title="PreparedStatement"></a>PreparedStatement</h3><ul><li>继承Statement接口，但能够提供高程序的性能和安全性，对SQL语句进行了预编译处理，并且可以通过参数化查询来防止SQL注入攻击。</li></ul><table><thead><tr><th align="left">方法名</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">setString(int parameterIndex, String x)</td><td align="left">给指定的参数设置 String 类型的值。</td></tr><tr><td align="left">setInt(int parameterIndex, int x)</td><td align="left">给指定的参数设置 int 类型的值。</td></tr><tr><td align="left">setDouble(int parameterIndex, double x)</td><td align="left">给指定的参数设置 double 类型的值。</td></tr><tr><td align="left">setFloat(int parameterIndex, float x)</td><td align="left">给指定的参数设置 float 类型的值。</td></tr><tr><td align="left">setLong(int parameterIndex, long x)</td><td align="left">给指定的参数设置 long 类型的值。</td></tr><tr><td align="left">setDate( int parameterIndex, Date x )</td><td align="left">给指定的参数设置 java.sql.Date 类型的值。</td></tr><tr><td align="left">setTime(int parameterIndex, Time x)</td><td align="left">给指定的参数设置 java.sql.Time 类型的值。</td></tr><tr><td align="left">setTimestamp(int parameterIndex, Timestamp x)</td><td align="left">给指定的参数设置 java.sql.Timestamp 类型的值。</td></tr><tr><td align="left">setObject(int parameterIndex, Object x)</td><td align="left">给指定的参数设置 Object 类型的值。</td></tr><tr><td align="left">setNull(int parameterIndex, int sqlType)</td><td align="left">给指定的参数设置 null 值。</td></tr><tr><td align="left">executeQuery()</td><td align="left">执行带参数的查询并返回 ResultSet 对象。</td></tr><tr><td align="left">executeUpdate()</td><td align="left">执行带参数的更新语句。</td></tr><tr><td align="left">addBatch()</td><td align="left">添加一个批处理命令。</td></tr><tr><td align="left">clearBatch()</td><td align="left">清除所有之前添加的批处理命令。</td></tr><tr><td align="left">executeBatch()</td><td align="left">执行所有添加的批处理命令。</td></tr><tr><td align="left">close()</td><td align="left">释放资源，关闭 PreparedStatement 对象。</td></tr></tbody></table><h3 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h3><ul><li>常见的数据库漏洞，攻击者利用应用程序对输入数据的过滤和验证不严格，将恶意代码插入SQL语句中，获取到未授权的数据或者执行恶意操作。</li><li>SQL注入是一种比较隐蔽的攻击方式，因为它可以绕过应用程序的认证和访问控制，进而直接利用存在漏洞的SQL语句进行数据库操作。</li></ul><h2 id="数据源"><a href="#数据源" class="headerlink" title="数据源"></a>数据源</h2><ul><li>在实际开发，为了管理连接池和数据源，可以用一些第三方连接池框架，比如C3P0和Druid等</li><li>DataSource作为一个轻量级的数据库连接池，可以大大提高系统的性能，扩展和维护性。使用DataSource时，需要先配置驱动类名，URL，用户名，密码，初始化连接数量，最大连接数量，超时时间等。当应用程序需要连接数据库时候，可以从数据源中获取连接来执行相应操作。</li></ul><h3 id="DataSource的获取与释放"><a href="#DataSource的获取与释放" class="headerlink" title="DataSource的获取与释放"></a>DataSource的获取与释放</h3><ul><li>通过JNDI获取DataSource对象时，通常需要进行初始化，创建一个InitialContext对象，将相关的参数信息放入Context中然后查找数据源。使用后，需要将连接释放会连接池。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化Context对象。</span></span><br><span class="line"><span class="type">Context</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialConrext</span>();、</span><br><span class="line"><span class="comment">//根据JNDI名称查找DataSource对象。</span></span><br><span class="line"><span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> (DataSource)ctx.lookup(<span class="string">&quot;java:comp/env/jdbc/mydb&quot;</span>);</span><br><span class="line"><span class="comment">//从数据源中获取连接</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line"><span class="comment">//使用连接进行数据操作</span></span><br><span class="line"><span class="comment">// ..........</span></span><br><span class="line"><span class="comment">//释放连接</span></span><br><span class="line">conn.close();</span><br></pre></td></tr></table></figure></li></ul><h3 id="数据源的配置方式"><a href="#数据源的配置方式" class="headerlink" title="数据源的配置方式"></a>数据源的配置方式</h3><ul><li>DataSource 可以通过XML或Properties文件进行配置。对Spring框架等，也支持java代码的配置方式来获取数据源</li></ul><h3 id="线程安全性"><a href="#线程安全性" class="headerlink" title="线程安全性"></a>线程安全性</h3><ol><li>为每个线程创建单独的Connection对象。可以使用ThreadLocal对象来保证每个线程都有自己的对象</li><li>连接池管理连接资源，能够对连接对象进行有效的监控和管理，从而避免了多个线程竞争同一个Connection对象的问题。允许线程取走，但是使用后归还连接池，供其他复用。</li><li>确保事务的独立性，每个线程会开启事物，提交或回滚事物，可以保证多个线程之间不会干扰彼此。</li></ol><h2 id="批处理"><a href="#批处理" class="headerlink" title="批处理"></a>批处理</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><ul><li>将多个命令按照顺序集成在一个文件中，批量执行的技术。通过一系列脚本或命令来完成。</li></ul><h3 id="Statement处理"><a href="#Statement处理" class="headerlink" title="Statement处理"></a>Statement处理</h3><ol><li>使用Statement对象进行批处理，通过addBatch()将多个SQL命令添加到一个批处理中去，并使用executeBatch()方法来执行批处理。</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line">statement.addBatch(<span class="string">&quot;INSERT INTO user(name,age) values(&#x27;Lily&#x27;,18)&quot;</span>);</span><br><span class="line">statement.addBatch(<span class="string">&quot;INSERT INTO user(name,age) values(&#x27;Tom&#x27;,20)&quot;</span>);</span><br><span class="line">statement.addBatch(<span class="string">&quot;UPDATE user SET age=&#x27;19&#x27; WHERE id=&#x27;1&#x27;&quot;</span>);</span><br><span class="line"><span class="type">int</span>[] count = statement.executeBatch(); <span class="comment">//批量执行SQL语句</span></span><br><span class="line">connection.commit();<span class="comment">// 提交事务</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="PreparedStatement处理"><a href="#PreparedStatement处理" class="headerlink" title="PreparedStatement处理"></a>PreparedStatement处理</h3><p>同上</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">INSERT_SQL</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO user(name,age) values(?,?)&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> con.prepareStatement(INSERT_SQL);</span><br><span class="line">pstmt.setString(<span class="number">1</span>, <span class="string">&quot;Lily&quot;</span>);</span><br><span class="line">pstmt.setInt(<span class="number">2</span>, <span class="number">18</span>);</span><br><span class="line">pstmt.addBatch();</span><br><span class="line">pstmt.setString(<span class="number">1</span>, <span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">pstmt.setInt(<span class="number">2</span>, <span class="number">20</span>);</span><br><span class="line">pstmt.addBatch();</span><br><span class="line"><span class="type">int</span>[] count = pstmt.executeBatch();</span><br><span class="line">connection.commit();<span class="comment">// 提交事务</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Spring批处理实现大规模数据库操作"><a href="#Spring批处理实现大规模数据库操作" class="headerlink" title="Spring批处理实现大规模数据库操作"></a>Spring批处理实现大规模数据库操作</h3><ol><li>一般要创建Job，Step，ItemReader,ItemProcessor,ItemWriter</li></ol><p>Job：批处理的最顶层组件，表示一个或多个并行 Step 的顺序运行。可以将其视为一个顶级容器，可包含多个 Step。</p><p>Step：是 Batch 处理的主要单位，表示一个任务步骤。可以对每一个步骤进行配置，比如设置读取文件、处理逻辑、验证等。</p><p>ItemReader：用于读取数据，通常从文件或数据库中读取数据。每次读取一条数据进行处理。</p><p>ItemProcessor：对 ItemReader 返回的数据进行进一步处理，可以对数据进行过滤、转换等操作，比如将一定格式的文本转化成 Java 对象。</p><p>ItemWriter：根据需要将读取到的数据写入到指定位置，如写入到数据库、写入到文件等。</p><ol start="2"><li><p>配置Job和Step<br>需要创建job和step的配置类，这些将负责配置Batch的核心组件，数据源，事务和监听器，通过XML文件或Java Config 进行配置，实现Batch批处理</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableBatchProcessing</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BatchConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobBuilderFactory jobs;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StepBuilderFactory steps;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Step <span class="title function_">step1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> steps.get(<span class="string">&quot;step1&quot;</span>)</span><br><span class="line">            .&lt;String, String&gt;chunk(<span class="number">10</span>)</span><br><span class="line">            .reader(reader())</span><br><span class="line">            .processor(processor())</span><br><span class="line">            .writer(writer())</span><br><span class="line">            .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Job <span class="title function_">job</span><span class="params">(Step step1)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> jobs.get(<span class="string">&quot;job&quot;</span>)</span><br><span class="line">            .incrementer(<span class="keyword">new</span> <span class="title class_">RunIdIncrementer</span>())</span><br><span class="line">            .flow(step1)</span><br><span class="line">            .end()</span><br><span class="line">            .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义具体的 Reader、Processor、Writer</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>定义 ItemProcessor、ItemReader 和 ItemWriter<br>Batch 模块提供了大量优秀的处理器和读写器，这些对象可以快速地实现批处理任务。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JDBC学习笔记&quot;&gt;&lt;a href=&quot;#JDBC学习笔记&quot; class=&quot;headerlink&quot; title=&quot;JDBC学习笔记&quot;&gt;&lt;/a&gt;JDBC学习笔记&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="java" scheme="https://kalyan-zitiu.github.io/categories/java/"/>
    
    <category term="Study Note" scheme="https://kalyan-zitiu.github.io/categories/java/Study-Note/"/>
    
    
    <category term="基础知识" scheme="https://kalyan-zitiu.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>网络管理员</title>
    <link href="https://kalyan-zitiu.github.io/2023/04/15/%E5%88%9D%E7%BA%A7%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%91%98/"/>
    <id>https://kalyan-zitiu.github.io/2023/04/15/%E5%88%9D%E7%BA%A7%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%91%98/</id>
    <published>2023-04-15T13:32:00.000Z</published>
    <updated>2023-08-12T07:41:03.441Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="ccf35bf09b0b55d6ca9e165c47ef22fbae1915021c4ae5c17b2c2d97c4797a08"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="网络管理" scheme="https://kalyan-zitiu.github.io/categories/%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86/"/>
    
    <category term="Study Note" scheme="https://kalyan-zitiu.github.io/categories/%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86/Study-Note/"/>
    
    
    <category term="基础知识" scheme="https://kalyan-zitiu.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>动态规划</title>
    <link href="https://kalyan-zitiu.github.io/2023/04/02/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <id>https://kalyan-zitiu.github.io/2023/04/02/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</id>
    <published>2023-04-02T14:00:00.000Z</published>
    <updated>2023-08-12T07:42:22.004Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Dynamic programming，简称DP。通过把原问题分解为相对简单得子问题得方式求解复杂问题的方法。动态规划常常适用于有重叠子问题喝最优子结构性质的问题。一般这些子问题很相似，可以通过函数关系递推出来，然后动态规划致力于解决每一个子问题一次。减少重复计算，如斐波那契数列可以看做入门级的经典动态规划。主要大的基本思想就是一个记住过去，来就现在求值。</p><h2 id="动态规划的青蛙跳阶问题。"><a href="#动态规划的青蛙跳阶问题。" class="headerlink" title="动态规划的青蛙跳阶问题。"></a>动态规划的青蛙跳阶问题。</h2><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级台阶。求该青蛙跳上一个 10 级的台阶总共有多少种跳法。</p><p>具体思路就是，在跳上n格的时候，你必须柯一是跳上n-1格子的次数，然后再跳上n格。<br>所以说需要的是记住之前的所有值来计算最新的值。从而达到在计算第n个格时候，能够以较快的速度知道。跳到n个的次数。</p><p>那么就有了斐波那契数列的应用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f(10) = f(9) + f(8)</span><br><span class="line">f(9) = f(8) + f(7)</span><br><span class="line">f(8) = f(7) + f(6)</span><br><span class="line">f(7) = f(6) + f(5)</span><br><span class="line">f(6) = f(5) + f(4)</span><br><span class="line">···</span><br><span class="line">f(3) = f(2) + f(1)</span><br><span class="line"></span><br><span class="line">通用的公式为f(n) = f(n-1) + f(n-2)</span><br></pre></td></tr></table></figure><p>然后就可以用递归来解决这个问题。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class Solution&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numWays</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n&lt;=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> numWays(n-<span class="number">1</span>) + numWays(n-<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是用递归的方法，耗时就很大，但计算f(10)的时候，就需要先计算出子问题f(9)和f(8)然后计算f(9),又要先算出子问题f(8) 和 f(7),以此类推。一直到f(2)和f(1),递归树才结束。所以就有有了：</p><ul><li>递归复杂度 = 解决一个子问题时间* 子问题个数</li><li>一个人子问题时间 = f（n-1）+f（n-2），所以复杂度是O（1）；</li><li>问题个数 = 递归树节点的总数，递归树的总节点 = 2^n-1，所以复杂度是O（2 ^ n）</li></ul><p>因此青蛙跳阶的递归解法的时间复杂度 = O(1)*O(2 ^ n) = O(2 ^ n) ,然后你会发现回过头来，有大量的重复计算，比如f(8) 被计算了两次，f（7）被重复计算了3次…..所以这个递归算法低效就是这样的原因。</p><h3 id="带备忘录的递归解法"><a href="#带备忘录的递归解法" class="headerlink" title="带备忘录的递归解法"></a>带备忘录的递归解法</h3><p>既然发现了存在大量的重复计算，那么就有了一个思想，我们能把重复计算的值给记录下来，当到了可以使用的时候就可以把它重新取出来使用，这样就不用有重复的计算了。所以这里又引出了一个新的问题，用什么的数据类型或者数据结构去记录这个重复的值。</p><ul><li>一般都会想到使用一个数组或者一个哈希Map充当这个备忘录。</li></ul><p>子问题个数 = 树节点数=n，解决一个子问题还是O（1）,所以带备忘录的递归算法的时间复杂度是O（n）。接下来呢，就用备忘录的递归算法去些代码。来解决青蛙的超时问题。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line"><span class="comment">//使用哈希map，充当备忘录的作用</span></span><br><span class="line">Map&lt;Integer,Integer&gt; tempMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numways</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line"><span class="comment">// n = 0 也算一种</span></span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n&lt;=<span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//先判断有没有计算过，即看看备忘录有没有</span></span><br><span class="line"><span class="keyword">if</span>(tempMap.containsKey(n))&#123;</span><br><span class="line"><span class="comment">//备忘录有，计算过，直接返回</span></span><br><span class="line"><span class="keyword">return</span> tempMap.get(n);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//备忘录没有，即没有计算过，执行递归计算，并且把结果保存到备忘录map中，对100000007取余</span></span><br><span class="line">tempMap.put(n,(numWays(n-<span class="number">1</span>)+numWays(n-<span class="number">2</span>)) % <span class="number">1000000007</span>);</span><br><span class="line"><span class="keyword">return</span> tempMap.get(n);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态规划-1"><a href="#动态规划-1" class="headerlink" title="动态规划"></a>动态规划</h3><p>思路上基本和带着备忘录的递归解法是一致的，都是减少重复计算，时间复杂度也都是差不多，但是：</p><ul><li>备忘录的递归，是从f(10)往f(1)方向延伸求解的，所以称为<strong>自顶向下</strong>的解法。</li><li>动态规划从较小问题的解，有交叠性质，逐步决策出较大问题的解，它是从f(1)往f(10)方向往上推求解，所以称为<strong>自底向上</strong>的解法。</li><li>动态规划有几个典型得特征，最优子结构，状态转移方程，边界，重叠子问题。</li></ul><p>例如：</p><ul><li>f(n-1)和f(n-2) 称为 f(n) 的最优子结构</li><li>f(n)= f（n-1）+f（n-2）就称为状态转移方程</li><li>f(1) = 1, f(2) = 2 就是边界啦</li><li>比如f(10)= f(9)+f(8),f(9) = f(8) + f(7) ,f(8)就是重叠子问题。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numWays</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            temp = (a + b)% <span class="number">1000000007</span>;</span><br><span class="line">            a = b;</span><br><span class="line">            b = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="动态规划解题思路"><a href="#动态规划解题思路" class="headerlink" title="动态规划解题思路"></a>动态规划解题思路</h2><ol><li><p>在问题中，可以把所有可能穷举出来，发现有重叠子问题得存在，就可以考虑动态规划。</p></li><li><p>一些求最值得场景，比如最长递增子序列，最小编辑距离，背包问题，凑零钱问题等，都是经典得动态规划的经典应用场景</p></li><li><p>核心就是拆分子问题，记住过往，减少重量计算，总结思路就是：</p><ul><li>穷举分析</li><li>确认边界</li><li>找出规律，确定最优子结构</li><li>写出状态转移方程</li></ul><ol><li><p>穷举分析</p></li><li><p>确定边界<br>通过穷举分析，我们发现，当台阶数是1的时候或者2的时候，可以明确知道青蛙跳法。f（1） =1，f(2) = 2，当台阶n&gt;=3时，已经呈现出规律f(3) = f(2) + f(1) =3，因此f（1） =1，f(2) = 2就是青蛙跳阶的边界。</p></li><li><p>确定最优子结构<br>n&gt;=3时，已经呈现出规律 f(n) = f(n-1) + f(n-2) ，因此，f(n-1)和f(n-2) 称为 f(n) 的最优子结构。什么是最优子结构？有这么一个解释：一道动态规划问题，其实就是递推问题。假设当前决策结果是f(n),则最优子结构就是要让f(n-k)最优，最优子结构性质就是能让转移到n的状态最优的，并且与后面的决策没有关系，即让后面的决策安心的使用前面的局部最优解的一种性质.</p></li><li><p>写出状态转移方程<br>通过前面3步，穷举分析，确定边界，最优子结构，得出状态转移方程：</p></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>][...] = 边界值</span><br><span class="line"><span class="keyword">for</span>(状态<span class="number">1</span> ：所有状态<span class="number">1</span>的值)&#123;</span><br><span class="line"> <span class="keyword">for</span>(状态<span class="number">2</span> ：所有状态<span class="number">2</span>的值)&#123;</span><br><span class="line">     <span class="keyword">for</span>(...)&#123;</span><br><span class="line">       <span class="comment">//状态转移方程</span></span><br><span class="line">       dp[状态<span class="number">1</span>][状态<span class="number">2</span>][...] = 求最值</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h2><p>给你一个整数数组nums，找到其中最长严格递增子序列的长度。<br>输入：nums=[10,9,2,5,3,7,101,18];<br>输出：4<br>解释：最长递增子序列是[2,3,7,101],因此长度为</p><h3 id="穷举分析"><a href="#穷举分析" class="headerlink" title="穷举分析"></a>穷举分析</h3><p>这里观察规律，显然是有关系的，我们还是遵循动态规划自底向上的原则，基于示例1的数据，从数组只有一个元素开始分析。</p><ul><li>当nums只有一个元素10时，最长递增子序列是[10],长度是1.</li><li>当nums需要加入一个元素9时，最长递增子序列是[10]或者[9],长度是1。</li><li>当nums再加入一个元素2时，最长递增子序列是[10]或者[9]或者[2],长度是1。</li><li>当nums再加入一个元素5时，最长递增子序列是[2,5],长度是2。</li><li>当nums再加入一个元素3时，最长递增子序列是[2,5]或者[2,3],长度是2。</li><li>当nums再加入一个元素7时，,最长递增子序列是[2,5,7]或者[2,3,7],长度是3。</li><li>当nums再加入一个元素101时，最长递增子序列是[2,5,7,101]或者[2,3,7,101],长度是4。</li><li>当nums再加入一个元素18时，最长递增子序列是[2,5,7,101]或者[2,3,7,101]或者[2,5,7,18]或者[2,3,7,18],长度是4。</li><li>当nums再加入一个元素7时,最长递增子序列是[2,5,7,101]或者[2,3,7,101]或者[2,5,7,18]或者[2,3,7,18],长度是4.</li></ul><h3 id="分析找规律，拆分子问题。"><a href="#分析找规律，拆分子问题。" class="headerlink" title="分析找规律，拆分子问题。"></a>分析找规律，拆分子问题。</h3><p>如果新加入一个元素nums[i], 最长递增子序列要么是以nums[i]结尾的递增子序列，要么就是nums[i-1]的最长递增子序列。nums[i]的最长递增子序列，不就是从以数组num[i]每个元素结尾的最长子序列集合，取元素最多（也就是长度最长）。可以用dp[i]表示以num[i]这个数结尾的最长递增子序列的长度</p><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230422155700534.png" alt="image-20230422155700534"></p><p>nums[i]结尾的自增子序列，只要找到比nums[i]小的子序列，加上nums[i] </p><h3 id="最简单边界情况"><a href="#最简单边界情况" class="headerlink" title="最简单边界情况"></a>最简单边界情况</h3><p>当nums数组只有一个元素时候，最长递增子序列的长度dp(1) = 1,当nums数组有两个元素时，dp(2) =2或者1， 因此边界就是dp(1)=1。</p><h3 id="确定最优子结构"><a href="#确定最优子结构" class="headerlink" title="确定最优子结构"></a>确定最优子结构</h3><p>max(dp(j)) 就是最优子结构。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dp(i) =max(dp(j))+<span class="number">1</span>，存在j属于区间[<span class="number">0</span>，i-<span class="number">1</span>],并且num[i]&gt;num[j]。</span><br></pre></td></tr></table></figure><h3 id="状态转移方程"><a href="#状态转移方程" class="headerlink" title="状态转移方程"></a>状态转移方程</h3><p>通过前面分析，我们就可以得出</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">最长递增子序列 =max(dp[i])</span><br></pre></td></tr></table></figure><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLIS</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">        <span class="comment">//初始化就是边界情况</span></span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxans</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//自底向上遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            dp[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="comment">//从下标0到i遍历</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="comment">//找到前面比nums[i]小的数nums[j],即有dp[i]= dp[j]+1</span></span><br><span class="line">                <span class="keyword">if</span> (nums[j] &lt; nums[i]) &#123;</span><br><span class="line">                    <span class="comment">//因为会有多个小于nums[i]的数，也就是会存在多种组合了嘛，我们就取最大放到dp[i]</span></span><br><span class="line">                    dp[i] = Math.max(dp[i], dp[j] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//求出dp[i]后，dp最大那个就是nums的最长递增子序列啦</span></span><br><span class="line">            maxans = Math.max(maxans, dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;动态规划&quot;&gt;&lt;a href=&quot;#动态规划&quot; class=&quot;headerlink&quot; title=&quot;动态规划&quot;&gt;&lt;/a&gt;动态规划&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h</summary>
      
    
    
    
    <category term="算法" scheme="https://kalyan-zitiu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="Study Note" scheme="https://kalyan-zitiu.github.io/categories/%E7%AE%97%E6%B3%95/Study-Note/"/>
    
    
    <category term="基础知识" scheme="https://kalyan-zitiu.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-创新型模式</title>
    <link href="https://kalyan-zitiu.github.io/2023/03/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://kalyan-zitiu.github.io/2023/03/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2023-03-21T14:00:00.000Z</published>
    <updated>2023-03-27T03:06:06.999Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式-创新型模式"><a href="#设计模式-创新型模式" class="headerlink" title="设计模式-创新型模式"></a>设计模式-创新型模式</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>设计模式是软件开发中的一种通用解决方案，它们是经过实践证明的、被广泛接受的最佳实践。设计模式提供了一种可重用的设计思想，可以帮助开发人员解决常见的设计问题，提高代码质量和可维护性。</p><p>设计模式通常包含以下元素：</p><ol><li><p>模式名称：用于描述模式的名称。</p></li><li><p>问题描述：描述模式所解决的问题，包括场景和限制条件。</p></li><li><p>解决方案：描述模式的解决方案，包括结构、参与者、协作方式和责任。</p></li><li><p>优点和缺点：描述模式的优点和缺点，包括可维护性、可扩展性、可重用性等方面。</p></li><li><p>适用性：描述模式适用的场景和限制条件。</p></li><li><p>实现方式：描述模式的实现方式，包括代码示例和实现细节。</p></li></ol><h2 id="创新型模式"><a href="#创新型模式" class="headerlink" title="创新型模式"></a>创新型模式</h2><h3 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h3><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><ul><li>简单工厂模式又叫静态方法模式（因为工厂类定义了一个静态方法）<br>现实生活中，工厂是负责生产产品的；</li><li>同样在设计模式中，简单工厂模式我们可以理解为负责生产对象的一个类，称为“工厂类”。</li></ul><h4 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h4><ul><li>将“类实例化的操作”与“使用对象的操作”分开，让使用者不用知道具体参数就可以实例化出所需要的“产品”类，从而避免了在客户端代码中显式指定，实现了解耦。即使用者可直接消费产品而不需要知道其生产的细节。</li><li>将创建实例的工作与使用实例的工作分开，使用者不必关心类对象如何创建，实现了解耦；</li><li>把初始化实例时的工作放到工厂里进行，使代码更容易维护。 更符合面向对象的原则 &amp; 面向接口编程，而不是面向实现编程。</li></ul><h4 id="模式原理"><a href="#模式原理" class="headerlink" title="模式原理"></a>模式原理</h4><table><thead><tr><th>组成</th><th>关系</th><th>作用</th></tr></thead><tbody><tr><td>抽象产品</td><td>具体产品的父类</td><td>描述产品的公共接口</td></tr><tr><td>具体产品</td><td>抽象产品的子类；工厂类创建的目标类</td><td>描述生产的具体产品</td></tr><tr><td>工厂</td><td>被外界调用</td><td>根据传入不同参数从而创建不同具体产品类的实例</td></tr></tbody></table><h4 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h4><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202303261441166.png" alt="img"></p><h4 id="举例实现"><a href="#举例实现" class="headerlink" title="举例实现"></a>举例实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Product</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">Show</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//具体产品类A</span></span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">ProductA</span> <span class="keyword">extends</span>  <span class="title class_">Product</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生产出了产品A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体产品类B</span></span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">ProductB</span> <span class="keyword">extends</span>  <span class="title class_">Product</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生产出了产品C&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体产品类C</span></span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">ProductC</span> <span class="keyword">extends</span>  <span class="title class_">Product</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生产出了产品C&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span>  <span class="title class_">Factory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Product <span class="title function_">Manufacture</span><span class="params">(String ProductName)</span>&#123;</span><br><span class="line"><span class="comment">//工厂类里用switch语句控制生产哪种商品；</span></span><br><span class="line"><span class="comment">//使用者只需要调用工厂类的静态方法就可以实现产品类的实例化。</span></span><br><span class="line">        <span class="keyword">switch</span> (ProductName)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;A&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProductA</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;B&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProductB</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;C&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProductC</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//工厂产品生产流程</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleFactoryPattern</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Factory</span> <span class="variable">mFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Factory</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//客户要产品A</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//调用工厂类的静态方法 &amp; 传入不同参数从而创建产品实例</span></span><br><span class="line">            mFactory.Manufacture(<span class="string">&quot;A&quot;</span>).Show();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (NullPointerException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;没有这一类产品&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//客户要产品B</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mFactory.Manufacture(<span class="string">&quot;B&quot;</span>).Show();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (NullPointerException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;没有这一类产品&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//客户要产品C</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mFactory.Manufacture(<span class="string">&quot;C&quot;</span>).Show();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (NullPointerException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;没有这一类产品&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//客户要产品D</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mFactory.Manufacture(<span class="string">&quot;D&quot;</span>).Show();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (NullPointerException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;没有这一类产品&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">生产出了产品A</span><br><span class="line">生产出了产品C</span><br><span class="line">生产出了产品C</span><br><span class="line">没有这一类产品</span><br></pre></td></tr></table></figure><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><ul><li>工厂类集中了所有实例（产品）的创建逻辑，一旦这个工厂不能正常工作，整个系统都会受到影响；</li><li>违背“开放 - 关闭原则”，一旦添加新产品就不得不修改工厂类的逻辑，这样就会造成工厂逻辑过于复杂。</li><li>简单工厂模式由于使用了静态工厂方法，静态方法不能被继承和重写，会造成工厂角色无法形成基于继承的等级结构。</li></ul><h3 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h3><h4 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h4><ul><li>工厂方法模式，又称工厂模式、多态工厂模式和虚拟构造器模式，通过定义工厂父类负责定义创建对象的公共接口，而子类则负责生成具体的对象。</li><li>将类的实例化（具体产品的创建）延迟到工厂类的子类（具体工厂）中完成，即由子类来决定应该实例化（创建）哪一个类。</li></ul><h4 id="解决问题-1"><a href="#解决问题-1" class="headerlink" title="解决问题"></a>解决问题</h4><ul><li>具体产品的创建推迟到工厂类的子类（具体工厂）中，此时工厂类不再负责所有产品的创建，而只是给出具体工厂必须实现的接口，这样工厂方法模式在添加新产品的时候就不修改工厂类逻辑而是添加新的工厂子类，符合开放封闭原则，克服了简单工厂模式中缺点</li><li>新增一种产品时，只需要增加相应的具体产品类和相应的工厂子类即可</li><li>符合单一职责原则,每个具体工厂类只负责创建对应的产品</li><li>不使用静态工厂方法，可以形成基于继承的等级结构。简单工厂模式的工厂类使用静态工厂方法</li></ul><h4 id="模式组成"><a href="#模式组成" class="headerlink" title="模式组成"></a>模式组成</h4><table><thead><tr><th>组成</th><th>关系</th><th>作用</th></tr></thead><tbody><tr><td>抽象产品</td><td>具体产品的父类</td><td>描述具体产品的公共接口</td></tr><tr><td>具体产品</td><td>抽象产品的子类；工厂类创建的目标类</td><td>描述生产的具体产品</td></tr><tr><td>抽象工厂</td><td>具体工厂的父类</td><td>描述具体工厂的公共接口</td></tr><tr><td>具体工厂</td><td>抽象工厂的子类；被外界调用</td><td>描述具体工厂；实现FactoryMethod工厂方法创建产品的实例</td></tr></tbody></table><h4 id="UML类图-1"><a href="#UML类图-1" class="headerlink" title="UML类图"></a>UML类图</h4><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202303261447429.png" alt="image-20230326144728389"></p><h4 id="实例举例"><a href="#实例举例" class="headerlink" title="实例举例"></a>实例举例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Factory</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> Product <span class="title function_">Manufacture</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Product</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">Show</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//具体产品A类</span></span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">ProductA</span> <span class="keyword">extends</span>  <span class="title class_">Product</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生产出了产品A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体产品B类</span></span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">ProductB</span> <span class="keyword">extends</span>  <span class="title class_">Product</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生产出了产品B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//工厂A类 - 生产A类产品</span></span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">FactoryA</span> <span class="keyword">extends</span> <span class="title class_">Factory</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">Manufacture</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProductA</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//工厂B类 - 生产B类产品</span></span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">FactoryB</span> <span class="keyword">extends</span> <span class="title class_">Factory</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">Manufacture</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProductB</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//生产工作流程</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FactoryPattern</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//客户要产品A</span></span><br><span class="line">        <span class="type">FactoryA</span> <span class="variable">mFactoryA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FactoryA</span>();</span><br><span class="line">        mFactoryA.Manufacture().Show();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//客户要产品B</span></span><br><span class="line">        <span class="type">FactoryB</span> <span class="variable">mFactoryB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FactoryB</span>();</span><br><span class="line">        mFactoryB.Manufacture().Show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">生产出了产品A</span><br><span class="line">生产出了产品C</span><br></pre></td></tr></table></figure><h4 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h4><ul><li>添加新产品时，除了增加新产品类外，还要提供与之对应的具体工厂类，系统类的个数将成对增加，在一定程度上增加了系统的复杂度；同时，有更多的类需要编译和运行，会给系统带来一些额外的开销；</li><li>由于考虑到系统的可扩展性，需要引入抽象层，在客户端代码中均使用抽象层进行定义，增加了系统的抽象性和理解难度，且在实现时可能需要用到DOM、反射等技术，增加了系统的实现难度</li><li>虽然保证了工厂方法内的对修改关闭，但对于使用工厂方法的类，如果要更换另外一种产品，仍然需要修改实例化的具体工厂类；</li></ul><h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><ul><li>当一个类不知道它所需要的对象的类时，在工厂方法模式中，客户端不需要知道具体产品类的类名，只需要知道所对应的工厂即可；</li><li>当一个类希望通过其子类来指定创建对象时，在工厂方法模式中，对于抽象工厂类只需要提供一个创建产品的接口，而由其子类来确定具体要创建的对象，利用面向对象的多态性和里氏代换原则，在程序运行时，子类对象将覆盖父类对象，从而使得系统更容易扩展。</li><li>将创建对象的任务委托给多个工厂子类中的某一个，客户端在使用时可以无须关心是哪一个工厂子类创建产品子类，需要时再动态指定，可将具体工厂类的类名存储在配置文件或数据库中。</li></ul><h3 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h3><h4 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h4><ul><li>抽象工厂模式，提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类；具体的工厂负责实现具体的产品实例。</li><li>抽象工厂模式与工厂方法模式最大的区别：抽象工厂中每个工厂可以创建多种类的产品；而工厂方法每个工厂只能创建一类</li><li>允许使用抽象的接口来创建一组相关产品，而不需要知道或关心实际生产出的具体产品是什么，这样就可以从具体产品中被解耦。</li></ul><h4 id="解决问题-2"><a href="#解决问题-2" class="headerlink" title="解决问题"></a>解决问题</h4><ul><li>降低耦合，抽象工厂模式将具体产品的创建延迟到具体工厂的子类中，这样将对象的创建封装起来，可以减少客户端与具体产品类之间的依赖，从而使系统耦合度低，这样更有利于后期的维护和扩展；</li><li>更符合开-闭原则，新增一种产品类时，只需要增加相应的具体产品类和相应的工厂子类即可</li></ul><h4 id="模式组成-1"><a href="#模式组成-1" class="headerlink" title="模式组成"></a>模式组成</h4><table><thead><tr><th>组成</th><th>关系</th><th>作用</th></tr></thead><tbody><tr><td>抽象产品族</td><td>抽象产品的父类</td><td>描述抽象产品的公共接口</td></tr><tr><td>抽象产品</td><td>具体产品的父类</td><td>描述具体产品的公共接口</td></tr><tr><td>具体产品</td><td>抽象产品的子类；工厂类创建的目标类</td><td>描述生产的具体产品</td></tr><tr><td>抽象工厂</td><td>具体工厂的父类</td><td>描述具体工厂的公共接口</td></tr><tr><td>具体工厂</td><td>抽象工厂的子类；被外界调用</td><td>描述具体工厂；实现工厂方法创建产品的实例</td></tr></tbody></table><h4 id="UML类图-2"><a href="#UML类图-2" class="headerlink" title="UML类图"></a>UML类图</h4><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202303261459666.png" alt="img"></p><h4 id="举例实例"><a href="#举例实例" class="headerlink" title="举例实例"></a>举例实例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Factory</span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">abstract</span> Product <span class="title function_">ManufactureContainer</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> Product <span class="title function_">ManufactureMould</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractProduct</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">Show</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//容器产品抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">ContainerProduct</span> <span class="keyword">extends</span> <span class="title class_">AbstractProduct</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">Show</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//模具产品抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">MouldProduct</span> <span class="keyword">extends</span> <span class="title class_">AbstractProduct</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">Show</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//容器产品A类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ContainerProductA</span> <span class="keyword">extends</span> <span class="title class_">ContainerProduct</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生产出了容器产品A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//容器产品B类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ContainerProductB</span> <span class="keyword">extends</span> <span class="title class_">ContainerProduct</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生产出了容器产品B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//模具产品A类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MouldProductA</span> <span class="keyword">extends</span> <span class="title class_">MouldProduct</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生产出了模具产品A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//模具产品B类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MouldProductB</span> <span class="keyword">extends</span> <span class="title class_">MouldProduct</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生产出了模具产品B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//A厂 - 生产模具+容器产品</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FactoryA</span> <span class="keyword">extends</span> <span class="title class_">Factory</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">ManufactureContainer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ContainerProductA</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">ManufactureMould</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MouldProductA</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//B厂 - 生产模具+容器产品</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FactoryB</span> <span class="keyword">extends</span> <span class="title class_">Factory</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">ManufactureContainer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ContainerProductB</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">ManufactureMould</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MouldProductB</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//生产工作流程</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AbstractFactoryPattern</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">FactoryA</span> <span class="variable">mFactoryA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FactoryA</span>();</span><br><span class="line">        <span class="type">FactoryB</span> <span class="variable">mFactoryB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FactoryB</span>();</span><br><span class="line">        <span class="comment">//A厂当地客户需要容器产品A</span></span><br><span class="line">        mFactoryA.ManufactureContainer().Show();</span><br><span class="line">        <span class="comment">//A厂当地客户需要模具产品A</span></span><br><span class="line">        mFactoryA.ManufactureMould().Show();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//B厂当地客户需要容器产品B</span></span><br><span class="line">        mFactoryB.ManufactureContainer().Show();</span><br><span class="line">        <span class="comment">//B厂当地客户需要模具产品B</span></span><br><span class="line">        mFactoryB.ManufactureMould().Show();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">生产出了容器产品A</span><br><span class="line">生产出了容器产品B</span><br><span class="line">生产出了模具产品A</span><br><span class="line">生产出了模具产品B</span><br></pre></td></tr></table></figure><h4 id="问题-2"><a href="#问题-2" class="headerlink" title="问题"></a>问题</h4><ul><li>抽象工厂模式很难支持新种类产品的变化</li></ul><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><h4 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h4><ul><li>实现1个类只有1个实例化对象 &amp; 提供一个全局访问点</li><li>从上面可看出：工人类操作的明显不是同一个仓库实例，而全部工人希望操作的是同一个仓库实例，即只有1个实例</li></ul><h4 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h4><ul><li>在Java中，我们通过使用对象（类实例化后）来操作这些类，类实例化是通过它的构造方法进行的，要是想实现一个类只有一个实例化对象。</li></ul><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202303261501938.png" alt="img"></p><h4 id="举例实现-1"><a href="#举例实现-1" class="headerlink" title="举例实现"></a>举例实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"><span class="comment">//1. 创建私有变量 ourInstance（用以记录 Singleton 的唯一实例）</span></span><br><span class="line"><span class="comment">//2. 内部进行实例化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">ourInstance</span>  <span class="operator">=</span> <span class="keyword">new</span>  <span class="title class_">Singleton</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 把类的构造方法私有化，不让外部调用构造方法实例化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//4. 定义公有方法提供该类的全局唯一访问点</span></span><br><span class="line"><span class="comment">//5. 外部通过调用getInstance()方法来返回唯一的实例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  Singleton <span class="title function_">newInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ourInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="情景代入"><a href="#情景代入" class="headerlink" title="情景代入"></a>情景代入</h4><p>背景：小成有一个塑料生产厂，但里面只有一个仓库。<br>目的：想用代码来实现仓库的管理<br>现有做法： 建立仓库类和工人类     其中，仓库类里的quantity=商品数量；工人类里有搬运方法MoveIn(int i)和MoveOut(int i)。</p><h5 id="一般实现"><a href="#一般实现" class="headerlink" title="一般实现"></a>一般实现</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//仓库类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StoreHouse</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">quantity</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setQuantity</span><span class="params">(<span class="type">int</span> quantity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.quantity = quantity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getQuantity</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> quantity;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//搬货工人类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Carrier</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> StoreHouse mStoreHouse;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Carrier</span><span class="params">(StoreHouse storeHouse)</span>&#123;</span><br><span class="line">        mStoreHouse = storeHouse;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//搬货进仓库</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">MoveIn</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">        mStoreHouse.setQuantity(mStoreHouse.getQuantity()+i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//搬货出仓库</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">MoveOut</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">        mStoreHouse.setQuantity(mStoreHouse.getQuantity()-i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//工人搬运测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SinglePattern</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">StoreHouse</span> <span class="variable">mStoreHouse1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StoreHouse</span>();</span><br><span class="line">        <span class="type">StoreHouse</span> <span class="variable">mStoreHouse2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StoreHouse</span>();</span><br><span class="line">        <span class="type">Carrier</span> <span class="variable">Carrier1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Carrier</span>(mStoreHouse1);</span><br><span class="line">        <span class="type">Carrier</span> <span class="variable">Carrier2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Carrier</span>(mStoreHouse2);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;两个是不是同一个？&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(mStoreHouse1.equals(mStoreHouse2))&#123;<span class="comment">//这里用equals而不是用 == 符号，因为 == 符号只是比较两个对象的地址</span></span><br><span class="line">            System.out.println(<span class="string">&quot;是同一个&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;不是同一个&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//搬运工搬完货物之后出来汇报仓库商品数量</span></span><br><span class="line">        Carrier1.MoveIn(<span class="number">30</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;仓库商品余量：&quot;</span>+Carrier1.mStoreHouse.getQuantity());</span><br><span class="line">        Carrier2.MoveOut(<span class="number">50</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;仓库商品余量：&quot;</span>+Carrier2.mStoreHouse.getQuantity());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="单例实现"><a href="#单例实现" class="headerlink" title="单例实现"></a>单例实现</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> scut.designmodel.SingletonPattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">//单例仓库类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StoreHouse</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//仓库商品数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">quantity</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="comment">//自己在内部实例化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">StoreHouse</span> <span class="variable">ourInstance</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StoreHouse</span>();;</span><br><span class="line">    <span class="comment">//让外部通过调用getInstance()方法来返回唯一的实例。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> StoreHouse <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ourInstance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//封闭构造函数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">StoreHouse</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setQuantity</span><span class="params">(<span class="type">int</span> quantity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.quantity = quantity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getQuantity</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> quantity;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//搬货工人类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Carrier</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> StoreHouse mStoreHouse;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Carrier</span><span class="params">(StoreHouse storeHouse)</span>&#123;</span><br><span class="line">        mStoreHouse = storeHouse;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//搬货进仓库</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">MoveIn</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">        mStoreHouse.setQuantity(mStoreHouse.getQuantity()+i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//搬货出仓库</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">MoveOut</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">        mStoreHouse.setQuantity(mStoreHouse.getQuantity()-i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//工人搬运测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SinglePattern</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">StoreHouse</span> <span class="variable">mStoreHouse1</span> <span class="operator">=</span> StoreHouse.getInstance();</span><br><span class="line">        <span class="type">StoreHouse</span> <span class="variable">mStoreHouse2</span> <span class="operator">=</span> StoreHouse.getInstance();</span><br><span class="line">        <span class="type">Carrier</span> <span class="variable">Carrier1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Carrier</span>(mStoreHouse1);</span><br><span class="line">        <span class="type">Carrier</span> <span class="variable">Carrier2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Carrier</span>(mStoreHouse2);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;两个是不是同一个？&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(mStoreHouse1.equals(mStoreHouse2))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;是同一个&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;不是同一个&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//搬运工搬完货物之后出来汇报仓库商品数量</span></span><br><span class="line">        Carrier1.MoveIn(<span class="number">30</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;仓库商品余量：&quot;</span>+Carrier1.mStoreHouse.getQuantity());</span><br><span class="line">        Carrier2.MoveOut(<span class="number">50</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;仓库商品余量：&quot;</span>+Carrier2.mStoreHouse.getQuantity());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="多种单例模式实现方式"><a href="#多种单例模式实现方式" class="headerlink" title="多种单例模式实现方式"></a>多种单例模式实现方式</h4><h5 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h5><ul><li>依赖JVM类加载机制，保证单例只会被创建一次，即线程安全</li><li>JVM在类的初始化阶段，会执行类的初始化</li><li>在执行类的初始化的时候，JVM会去获取一个锁，这个所可以同步多个线程对同一个类的初始化<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 加载该类时，单例就会自动被创建</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  <span class="type">Singleton</span> <span class="variable">ourInstance</span>  <span class="operator">=</span> <span class="keyword">new</span>  <span class="title class_">Singleton</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2. 构造函数 设置为 私有权限</span></span><br><span class="line">    <span class="comment">// 原因：禁止他人创建实例 </span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3. 通过调用静态方法获得创建的单例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  Singleton <span class="title function_">newInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ourInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h5></li><li>根据枚举类型的下述特点，满足单例模式所需的创建单例，线程安全，实现简介的需求</li><li><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202303261509469.jpeg" alt="img"></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义1个枚举的元素，即为单例类的1个实例</span></span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 隐藏了1个空的、私有的 构造方法</span></span><br><span class="line">    <span class="comment">// private Singleton () &#123;&#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取单例的方式：</span></span><br><span class="line"><span class="type">Singleton</span> <span class="variable">singleton</span> <span class="operator">=</span> Singleton.INSTANCE;</span><br></pre></td></tr></table></figure><h5 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h5><ul><li>单例创建时机可控，有需要的时候才手动创建单例</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 类加载时，先不自动创建单例</span></span><br><span class="line">   <span class="comment">//  即，将单例的引用先赋值为 Null</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  <span class="type">Singleton</span> <span class="variable">ourInstance</span>  <span class="operator">=</span> <span class="literal">null</span>；</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 构造函数 设置为 私有权限</span></span><br><span class="line">    <span class="comment">// 原因：禁止他人创建实例 </span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3. 需要时才手动调用 newInstance（） 创建 单例   </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  Singleton <span class="title function_">newInstance</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 先判断单例是否为空，以避免重复创建</span></span><br><span class="line">    <span class="keyword">if</span>( ourInstance == <span class="literal">null</span>)&#123;</span><br><span class="line">        ourInstance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ourInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="问题-3"><a href="#问题-3" class="headerlink" title="问题"></a>问题</h4><ul><li>对于懒汉会存在线程不安全的时候，特别是在多线程时候会出现以下问题</li><li><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202303261512668.png" alt="img"></li></ul><h4 id="同步锁"><a href="#同步锁" class="headerlink" title="同步锁"></a>同步锁</h4><ul><li>使用同步锁synchronized，锁住创建单例的方法，防止多个线程同时调用，从而避免造成单例被多次创建</li><li>getInstance（）方法块只能运行在一个线程中</li><li>倘若此段代码已在一个线程中运行，则另外一个线程试图运行该块代码，则会被一直阻塞二一直等待。<h5 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 写法1</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 类加载时，先不自动创建单例</span></span><br><span class="line">    <span class="comment">//  即，将单例的引用先赋值为 Null</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  <span class="type">Singleton</span> <span class="variable">ourInstance</span>  <span class="operator">=</span> <span class="literal">null</span>；</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2. 构造函数 设置为 私有权限</span></span><br><span class="line">    <span class="comment">// 原因：禁止他人创建实例 </span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 3. 加入同步锁</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 先判断单例是否为空，以避免重复创建</span></span><br><span class="line">        <span class="keyword">if</span> ( ourInstance == <span class="literal">null</span> )</span><br><span class="line">            ourInstance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">        <span class="keyword">return</span> ourInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法2</span></span><br><span class="line"><span class="comment">// 该写法的作用与上述写法作用相同，只是写法有所区别</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>&#123; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 加入同步锁</span></span><br><span class="line">        <span class="keyword">synchronized</span>(Singleton.class) &#123;</span><br><span class="line">            <span class="keyword">if</span> (instance == <span class="literal">null</span>)</span><br><span class="line">                instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="双重校验锁"><a href="#双重校验锁" class="headerlink" title="双重校验锁"></a>双重校验锁</h4><ul><li>在同步锁的基础上，添加多一层if判断，若单例已经创建，则不需要执行加锁操作就可以获取实例，从而提高性能</li></ul><h5 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  <span class="type">Singleton</span> <span class="variable">ourInstance</span>  <span class="operator">=</span> <span class="literal">null</span>；</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  Singleton <span class="title function_">newInstance</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="comment">// 加入双重校验锁</span></span><br><span class="line">    <span class="comment">// 校验锁1：第1个if</span></span><br><span class="line">    <span class="keyword">if</span>( ourInstance == <span class="literal">null</span>)&#123;  <span class="comment">// ①</span></span><br><span class="line">     <span class="keyword">synchronized</span> (Singleton.class)&#123; <span class="comment">// ②</span></span><br><span class="line">      <span class="comment">// 校验锁2：第2个 if</span></span><br><span class="line">      <span class="keyword">if</span>( ourInstance == <span class="literal">null</span>)&#123;</span><br><span class="line">          ourInstance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">        <span class="keyword">return</span> ourInstance;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 说明</span></span><br><span class="line"><span class="comment">// 校验锁1：第1个if</span></span><br><span class="line"><span class="comment">// 作用：若单例已创建，则直接返回已创建的单例，无需再执行加锁操作</span></span><br><span class="line"><span class="comment">// 即直接跳到执行 return ourInstance</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 校验锁2：第2个 if </span></span><br><span class="line"><span class="comment">// 作用：防止多次创建单例问题</span></span><br><span class="line"><span class="comment">// 原理</span></span><br><span class="line">  <span class="comment">// 1. 线程A调用newInstance()，当运行到②位置时，此时线程B也调用了newInstance()</span></span><br><span class="line">  <span class="comment">// 2. 因线程A并没有执行instance = new Singleton();，此时instance仍为空，因此线程B能突破第1层 if 判断，运行到①位置等待synchronized中的A线程执行完毕</span></span><br><span class="line">  <span class="comment">// 3. 当线程A释放同步锁时，单例已创建，即instance已非空</span></span><br><span class="line">  <span class="comment">// 4. 此时线程B 从①开始执行到位置②。此时第2层 if 判断 = 为空（单例已创建），因此也不会创建多余的实例</span></span><br></pre></td></tr></table></figure><h4 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h4><ul><li>更具静态内部类的特性，同步解决按需加载，线程安全的问题，同时实现简洁</li><li>在静态内部类中创建单例，在装载该内部类的时候才会去创建单例</li><li>线程安全：类是由JVM加载，而JVM只会加载一遍，保证只有一个单例</li></ul><h5 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 1. 创建静态内部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Singleton2</span> &#123;</span><br><span class="line">       <span class="comment">// 在静态内部类里创建单例</span></span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">static</span>  <span class="type">Singleton</span> <span class="variable">ourInstance</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>()；</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有构造函数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 延迟加载、按需创建</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  Singleton <span class="title function_">newInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Singleton2.ourInstance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用过程说明：</span></span><br><span class="line">      <span class="comment">// 1. 外部调用类的newInstance() </span></span><br><span class="line">      <span class="comment">// 2. 自动调用Singleton2.ourInstance</span></span><br><span class="line">       <span class="comment">// 2.1 此时单例类Singleton2得到初始化</span></span><br><span class="line">       <span class="comment">// 2.2 而该类在装载 &amp; 被初始化时，会初始化它的静态域，从而创建单例；</span></span><br><span class="line">       <span class="comment">// 2.3 由于是静态域，因此只会JVM只会加载1遍，Java虚拟机保证了线程安全性</span></span><br><span class="line">      <span class="comment">// 3. 最终只创建1个单</span></span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202303261537777.png" alt="img"></p><h3 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h3><h4 id="简介-5"><a href="#简介-5" class="headerlink" title="简介"></a>简介</h4><ul><li>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示</li><li>在用户不知道对象的建造过程和细节的情况下就可以直接创建复杂的对象。</li><li>建造者模式负责按照是顺序创建复杂对象（把内部的建造过程和细节隐藏藏匿起来）</li></ul><h4 id="解决问题-3"><a href="#解决问题-3" class="headerlink" title="解决问题"></a>解决问题</h4><ul><li>方便用户创建复杂的对象</li><li>代码复用性以及封装性（将对象构建过程和细节进行封装以及复用）</li><li>方便解耦，方便控制对象的创建，方便于拓展。</li></ul><h4 id="UML类图-3"><a href="#UML类图-3" class="headerlink" title="UML类图"></a>UML类图</h4><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202303270853304.png" alt="img"></p><h4 id="模式讲解"><a href="#模式讲解" class="headerlink" title="模式讲解"></a>模式讲解</h4><ol><li>指挥者直接和客户进行需求沟通</li><li>沟通后指挥者将客户创建产品的需求划分为各个部件的建造请求</li><li>将各个部件的建造请求委派到具体的建造者</li><li>各个具体建造者负责进行产品部件的构建</li><li>最终构建成具体产品。</li></ol><h4 id="情景代入-1"><a href="#情景代入-1" class="headerlink" title="情景代入"></a>情景代入</h4><ul><li>背景：小成希望去电脑城买一台组装的台式主机</li><li>过程：   </li></ul><ol><li>电脑城老板（Diretor）和小成（Client）进行需求沟通（买来打游戏？学习？看片？）</li><li>了解需求后，电脑城老板将小成需要的主机划分为各个部件（Builder）的建造请求（CPU、主板blabla）</li><li>指挥装机人员（ConcreteBuilder）去构建组件；</li><li>将组件组装起来成小成需要的电脑（Product）；</li></ol><h5 id="举例实例-1"><a href="#举例实例-1" class="headerlink" title="举例实例"></a>举例实例</h5><ol><li>定义组装的过程：组装电脑的过程<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Builder</span>&#123;</span><br><span class="line"><span class="comment">//第一步：CPU</span></span><br><span class="line"><span class="comment">//声明为抽象方法，具体由子类实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">BuildCPU</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//第二步：装主板</span></span><br><span class="line"><span class="comment">//声明为抽象方法，具体由子类实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">BuildMainboard</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//第三步：装硬盘</span></span><br><span class="line"><span class="comment">//声明为抽象方法，具体由子类实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">BuildHD</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//返回产品的方法：获得组装好的电脑</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> Computer <span class="title function_">GetCompputer</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>电脑城老板委派任务给装机人员<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Director</span>&#123;</span><br><span class="line"><span class="comment">//指挥装机人员组装的电脑</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Construct</span><span class="params">(Builder builder)</span>&#123;</span><br><span class="line">builder.BuildCPU();</span><br><span class="line">builder.BuildMainboard();</span><br><span class="line">builder.BuuildHD();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>创建具体的建造者：装机人员<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteBuilder</span> <span class="keyword">extends</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line">    <span class="comment">//创建产品实例</span></span><br><span class="line">    <span class="type">Computer</span> <span class="variable">computer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Computer</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//组装产品</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">BuildCPU</span><span class="params">()</span>&#123;</span><br><span class="line">        computer.Add(<span class="string">&quot;组装CPU&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">BuilMainboard</span><span class="params">()</span>&#123;</span><br><span class="line">        computer.Add(<span class="string">&quot;组装主板&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">BuildHD</span><span class="params">()</span>&#123;</span><br><span class="line">        computer.Add(<span class="string">&quot;组装硬盘&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回组装成功的电脑</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Computer <span class="title function_">GetComputer</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> computer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>定义具体产品类：电脑<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Computer</span>&#123;</span><br><span class="line"><span class="comment">//电脑组件的集合</span></span><br><span class="line"><span class="keyword">private</span> List&lt;String&gt; parts = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"><span class="comment">//用于将组件组装到电脑</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Add</span><span class="params">(String part)</span>&#123;</span><br><span class="line">part.add (part);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Show</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>;&lt;part.size();i++)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;组件&quot;</span>+part.get(i)+<span class="string">&quot;装好了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;电脑组装完成，请验收&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>客户端调用-小成到电脑找了老板买电脑</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Builder</span> Pattern&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//逛了很久终于发现一家合适的电脑店</span></span><br><span class="line"><span class="comment">//找到该店的老板和装机人员</span></span><br><span class="line">  <span class="type">Director</span> <span class="variable">director</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Director</span>();</span><br><span class="line">  <span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteBuilder</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//沟通需求后，老板叫装机人员去装电脑</span></span><br><span class="line">director.Construct(builder);</span><br><span class="line"></span><br><span class="line"><span class="comment">//装完后，组装人员搬来组装好的电脑</span></span><br><span class="line"><span class="type">Computer</span> <span class="variable">computer</span> <span class="operator">=</span> builder.GetComputer();</span><br><span class="line"><span class="comment">//组装人员展示电脑给小成看</span></span><br><span class="line">computer.Show()；</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="问题-4"><a href="#问题-4" class="headerlink" title="问题"></a>问题</h4><ul><li>建造者模式所创建的产品一般具有较多的共同点，其组成部分相似；如果产品之间的差异性很大，则不适合使用建造者模式，因此其使用范围受到一定的限制。</li><li>如果产品的内部变化复杂，可能会导致需要定义很多具体建造者类来实现这种变化，导致系统变得很庞大。</li></ul><h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><h4 id="简介-6"><a href="#简介-6" class="headerlink" title="简介"></a>简介</h4><ul><li>它允许通过复制现有的对象来创建新的对象，而不是通过创建新的实例并初始化它们来创建对象。这种模式通常用于创建具有相同属性的多个对象，以避免重复的初始化过程。在原型模式中，原型对象是创建新对象的模板，新对象是通过复制原型对象来创建的。原型模式的实现通常需要实现 Cloneable 接口或者使用序列化和反序列化来实现对象的复制。</li></ul><h4 id="UML类图-4"><a href="#UML类图-4" class="headerlink" title="UML类图"></a>UML类图</h4><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202303271043974.png" alt="image-20230327104312924"></p><h4 id="解决问题-4"><a href="#解决问题-4" class="headerlink" title="解决问题"></a>解决问题</h4><ul><li>逃避构造函数的约束。</li></ul><h4 id="举例实例-2"><a href="#举例实例-2" class="headerlink" title="举例实例"></a>举例实例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Shape</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span> &#123;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> String id;</span><br><span class="line">   <span class="keyword">protected</span> String type;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getType</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> type;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> id;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.id = id;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> Object <span class="title function_">clone</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="type">Object</span> <span class="variable">clone</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         clone = <span class="built_in">super</span>.clone();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> clone;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Rectangle</span><span class="params">()</span>&#123;</span><br><span class="line">     type = <span class="string">&quot;Rectangle&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Inside Rectangle::draw() method.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Square</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Square</span><span class="params">()</span>&#123;</span><br><span class="line">     type = <span class="string">&quot;Square&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Inside Square::draw() method.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">()</span>&#123;</span><br><span class="line">     type = <span class="string">&quot;Circle&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Inside Circle::draw() method.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShapeCache</span> &#123;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> Hashtable&lt;String, Shape&gt; shapeMap </span><br><span class="line">      = <span class="keyword">new</span> <span class="title class_">Hashtable</span>&lt;String, Shape&gt;();</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> Shape <span class="title function_">getShape</span><span class="params">(String shapeId)</span> &#123;</span><br><span class="line">      <span class="type">Shape</span> <span class="variable">cachedShape</span> <span class="operator">=</span> shapeMap.get(shapeId);</span><br><span class="line">      <span class="keyword">return</span> (Shape) cachedShape.clone();</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 对每种形状都运行数据库查询，并创建该形状</span></span><br><span class="line">   <span class="comment">// shapeMap.put(shapeKey, shape);</span></span><br><span class="line">   <span class="comment">// 例如，我们要添加三种形状</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">loadCache</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="type">Circle</span> <span class="variable">circle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Circle</span>();</span><br><span class="line">      circle.setId(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">      shapeMap.put(circle.getId(),circle);</span><br><span class="line"> </span><br><span class="line">      <span class="type">Square</span> <span class="variable">square</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Square</span>();</span><br><span class="line">      square.setId(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">      shapeMap.put(square.getId(),square);</span><br><span class="line"> </span><br><span class="line">      <span class="type">Rectangle</span> <span class="variable">rectangle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Rectangle</span>();</span><br><span class="line">      rectangle.setId(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">      shapeMap.put(rectangle.getId(),rectangle);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrototypePatternDemo</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      ShapeCache.loadCache();</span><br><span class="line"> </span><br><span class="line">      <span class="type">Shape</span> <span class="variable">clonedShape</span> <span class="operator">=</span> (Shape) ShapeCache.getShape(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;Shape : &quot;</span> + clonedShape.getType());        </span><br><span class="line"> </span><br><span class="line">      <span class="type">Shape</span> <span class="variable">clonedShape2</span> <span class="operator">=</span> (Shape) ShapeCache.getShape(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;Shape : &quot;</span> + clonedShape2.getType());        </span><br><span class="line"> </span><br><span class="line">      <span class="type">Shape</span> <span class="variable">clonedShape3</span> <span class="operator">=</span> (Shape) ShapeCache.getShape(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;Shape : &quot;</span> + clonedShape3.getType());        </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="问题-5"><a href="#问题-5" class="headerlink" title="问题"></a>问题</h4><ul><li>配备克隆方法需要对类的功能进行通盘考虑，这对于全新的类不是很男</li><li>必须实现Cloneable接口</li></ul><h4 id="应用-1"><a href="#应用-1" class="headerlink" title="应用"></a>应用</h4><ul><li>资源优化</li><li>类初始化需要消化很多资源</li><li>一个对象多个修改者</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设计模式-创新型模式&quot;&gt;&lt;a href=&quot;#设计模式-创新型模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式-创新型模式&quot;&gt;&lt;/a&gt;设计模式-创新型模式&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="设计模式" scheme="https://kalyan-zitiu.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="基础知识" scheme="https://kalyan-zitiu.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Goal解析以及进阶练习</title>
    <link href="https://kalyan-zitiu.github.io/2023/01/06/IC-%E7%BB%83%E4%B9%A0%E9%A2%98%E8%A7%A33/"/>
    <id>https://kalyan-zitiu.github.io/2023/01/06/IC-%E7%BB%83%E4%B9%A0%E9%A2%98%E8%A7%A33/</id>
    <published>2023-01-06T07:00:04.000Z</published>
    <updated>2023-01-06T07:33:07.147Z</updated>
    
    <content type="html"><![CDATA[<h1 id="goal解析"><a href="#goal解析" class="headerlink" title="goal解析"></a>goal解析</h1><p>请你设计一个可以解释字符串 command 的 Goal 解析器 。</p><ul><li>command 由 “G”、”()” 和/或 “(al)” 按某种顺序组成。</li><li>Goal 解析器会将 “G” 解释为字符串 “G”、”()” 解释为字符串 “o” ，”(al)” 解释为字符串 “al” 。然后，按原顺序将经解释得到的字符串连接成一个字符串。</li><li>给你字符串 command ，返回 Goal 解析器 对 command 的解释结果。</li></ul><h2 id="P-题解"><a href="#P-题解" class="headerlink" title="P-题解"></a>P-题解</h2><p>又是偷懒的一天，直接用库函数了</p><ol><li>需要注意的是下面的括号是要转义的，不然会识别成null。</li><li>此方法的时间复杂度会较大，个人猜测是函数内部的循环或条件语句分析相对O-题解比较复杂。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">interpret</span><span class="params">(String command)</span> &#123;</span><br><span class="line">    command = command.replace(<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;G&#x27;</span>);</span><br><span class="line">    command = command.replaceAll(<span class="string">&quot;\\(\\)&quot;</span>,<span class="string">&quot;o&quot;</span>);</span><br><span class="line">    command = command.replaceAll(<span class="string">&quot;\\(al\\)&quot;</span>,<span class="string">&quot;al&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> command;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="O-题解"><a href="#O-题解" class="headerlink" title="O-题解"></a>O-题解</h2><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><ol><li>本题只会出现”G”,”()”以及”(al)”所以不符合”（）”与”G”的条件一律可以按照”（al）”处理。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">interpret</span><span class="params">(String command)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">res</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; command.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (command.charAt(i) == <span class="string">&#x27;G&#x27;</span>) &#123;</span><br><span class="line">                res.append(<span class="string">&quot;G&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (command.charAt(i) == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (command.charAt(i + <span class="number">1</span>) == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">                    res.append(<span class="string">&quot;o&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    res.append(<span class="string">&quot;al&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">来源：力扣（LeetCode）</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;goal解析&quot;&gt;&lt;a href=&quot;#goal解析&quot; class=&quot;headerlink&quot; title=&quot;goal解析&quot;&gt;&lt;/a&gt;goal解析&lt;/h1&gt;&lt;p&gt;请你设计一个可以解释字符串 command 的 Goal 解析器 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;comman</summary>
      
    
    
    
    <category term="leetccode" scheme="https://kalyan-zitiu.github.io/categories/leetccode/"/>
    
    
    <category term="练习" scheme="https://kalyan-zitiu.github.io/tags/%E7%BB%83%E4%B9%A0/"/>
    
  </entry>
  
</feed>
