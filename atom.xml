<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kalyan的小书房</title>
  <icon>https://www.gravatar.com/avatar/26add54e467101c6779c59a0ed4ee504</icon>
  <subtitle>Kalyan is working hard</subtitle>
  <link href="https://kalyan-zitiu.github.io/atom.xml" rel="self"/>
  
  <link href="https://kalyan-zitiu.github.io/"/>
  <updated>2023-07-24T08:41:39.992Z</updated>
  <id>https://kalyan-zitiu.github.io/</id>
  
  <author>
    <name>Kalyan</name>
    <email>3148862192@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>OceanBase</title>
    <link href="https://kalyan-zitiu.github.io/2023/07/15/OceanBase/"/>
    <id>https://kalyan-zitiu.github.io/2023/07/15/OceanBase/</id>
    <published>2023-07-15T14:00:00.000Z</published>
    <updated>2023-07-24T08:41:39.992Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OceanBase"><a href="#OceanBase" class="headerlink" title="OceanBase"></a>OceanBase</h1><h2 id="传统集中式数据库面临的挑战"><a href="#传统集中式数据库面临的挑战" class="headerlink" title="传统集中式数据库面临的挑战"></a>传统集中式数据库面临的挑战</h2><h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230718091134287.png" alt="image-20230718091134287"></p><ul><li>可扩展性方面：传统集中式数据库的扩展性有限，当数据量增加或者并发访问量增大时，集中式数据库可能无法提供足够的性能和吞吐量</li><li>单点故障：由于集中式数据库只有一个中心节点，一旦该节点发生故障，整个系统将无法正常工作。这种单点故障可能导致系统可用性和数据的丢失</li><li>数据库安全：传统型集中式数据库存储所有数据的中心节点成为攻击者的目标，一旦该节点被入侵或者遭受到其他安全威胁，整个数据库的数据会面临泄露和篡改的风险</li><li>数据一致性：由于集中式数据库的数据存储都在一个节点上，当多个用户同时对数据库进行操作时，可能会出现数据一致性的问题。例如，当一个用户在修改某个数据时，另一个用户可能正在读取该数据，导致读取的数据不一致</li><li>高延迟：远程用户在访问数据库时，可能会出现高延迟，这对于要低延迟响应的应用场景是不可接受的。</li></ul><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230718094411164.png" alt="image-20230718094411164"></p><h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><ul><li>使用通用数据库，可以实现数据库线性的扩容</li><li>数据库是单点数据库，数据库之间没有联系，不知道其他数据库的存在，依靠中间件完成需要跨库的事务</li><li>数据库中间件连接各个数据库，实现分库分表</li></ul><h4 id="非短板"><a href="#非短板" class="headerlink" title="非短板"></a>非短板</h4><ul><li>能过通过线性扩展来达到分库分表，可以快速实现数据库的水平扩展；</li><li>技术成本较低，不需要改造核心数据库引擎，或者只需要做很少的改造；</li></ul><h4 id="短板"><a href="#短板" class="headerlink" title="短板"></a>短板</h4><ul><li>跨库分布式事物，数据库核心引擎没有分布式能力，只能通过中间件来完成分布式处理，但中间件很难做到RPO = 0，因此在遇到异常和故障时无法100%保证分布式事务的ACID能力</li><li>全局一致性，由于多个数据库服务器的时间戳不一致，因此很难保证多个库之间数据版本号的全局性一致</li><li>负载均衡，在扩容和缩容时候，底层数据库引擎无法在线调整数据分布规则，因此需要暂停业务并重新导数据，对业务和运维挑战很大；</li><li>跨库复杂SQL，跨库的复杂SQL运算，只能要求中间件能够完成，而中间件不具备分布式并行计算能力，最终会限制应用对SQL的使用，产生业务侵入性。</li></ul><h2 id="OceanBase-1"><a href="#OceanBase-1" class="headerlink" title="OceanBase"></a>OceanBase</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><h4 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h4><ul><li><p>OceanBase是蚂蚁金服完全自主研发的通用的分布式关系型数据库。OceanBase以集群的形式存在，至少三个节点分布在三个区域（Zone），每个节点上运行一个单进程程序，进程名observer。每个observer进程都包含连个模块：SQL引擎和存储引擎，所以每个节点地位基本是平等的。稍微特殊的是每个Zone里会有一个节点的observer内还会运行总控服务，三个总控服务内容一样，角色上会有一个Leader和Follower，只有Leader提供服务。</p></li><li><p>OceanBase集群还支持多租户管理</p><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230719094326659.png" alt="image-20230719094326659"></p></li></ul><h4 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h4><p>OceanBase的数据存在每个节点上，observer通过分区管理数据。分区是数据的子集，一个非分区就是一个分区，一个分区表包含多个分区，一个分区不能跨节点，分区表的不同分区可以跨节点。所以分区表可以做水平跨节点扩展。分区是数据的子集，是高可用的最小粒度。分析OceanBase是否丢数据，只要分析分区的数据写是否会丢。</p><h4 id="读写模式"><a href="#读写模式" class="headerlink" title="读写模式"></a>读写模式</h4><ul><li>OceanBase在初次读入一行数据时会将该行所在块读入到内存的Block Cache中，后面修改的时候并不是直接修改这个block，而是在另外一块内存中分配少量空间记录这笔修改，并且只记录变化部分，这称为增量数据（Memtable）。前面在Block Cache里的数据称为基线数据。同一记录如果反复修改多次，多个增量会议链表形式挂在该记录下</li></ul><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230719095139281.png" alt="image-20230719095139281"></p><p>OceanBase的这种方式能够比传统数据库产生的脏块要小得多，所以OceanBase会把这些Memtable一直保存在缓存中或者推迟写入磁盘。当最后落盘的时候，Memtable会冻结成历史版本，然后和对应的基线数据在内存中进行合并，生成SSTable格式写入磁盘数据文件。合并的操作对资源有较大的影响，所以会在尽可能推迟合并操作到低峰期。若专门用户Memtable的内存利用率达到了一定的阈值，它会将Memtable直接以SSTable格式临时写入磁盘中。这就是转储的操作，相对对资源消耗比较小。</p><h4 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h4><p>OceanBase的Memtable一天只落盘一次，但是记录Memtable的时候OceanBase会遵循WAL机制，生成相关的事务日志保存在日志缓冲区里。和Oracle不同的是OceanBase的这些事务日志在事务提交之前会一直在日志缓冲区里，若节点宕机，没提交的事务日志对业务来说也没有数据丢失，当提交后，OceanBase会做事务日志的持久化动作。所以可能对于一些大事务会占用不少的内存空间。而且OceanBase是没有Undo，假设业务事务回滚了，它只会有一些清理逻辑。</p><h4 id="宕机恢复"><a href="#宕机恢复" class="headerlink" title="宕机恢复"></a>宕机恢复</h4><p>OceanBase的节点宕机后，节点上部分分区的访问会受影响，但OceanBase集群会很快恢复这些分区访问，这是OceanBase的可用性特性。和传统数据库一样，宕机后恢复，它会读取事务日志，重做事务，但在不同在于observer不需要再次读入基线数据，只需要在事务日志在增量内存中构建相关分区的Memtable。相关分区被业务读取时，对应的基线数据所在块才会被再次读入Block Cache中。</p><h4 id="副本复制"><a href="#副本复制" class="headerlink" title="副本复制"></a>副本复制</h4><ul><li>Oracle一样，光支持WAL是不足以保障数据安全，OceanBase还要设法保障事务日志的可靠性。除了使用DirectIO持久化到本节点磁盘外，也需要持久化到其他节点上。</li><li>跟传统关系数据库主备两副本架构不一样，OceanBase选择了多副本架构，是如果副本数是偶数，会有传统双机房容灾的脑裂问题。脑裂问题的本质就是全体成员在局部通信中断故障时无法就哪个节点接管服务作出一致性决议。成员数是奇数，才有可能形成多数派。</li></ul><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230719104329304.png" alt="image-20230719104329304"></p><p>副本就是分区的别称，一个分区有三份数据，每份是一个副本。副本的内容除了数据还有事务日志。在这里我们只关心事务日志部分。三个副本在角色上是1个Leader（类似于主副本）2个Follower（类似于备副本）。只有Leader副本才会对外提供读写服务，这样就规避了单个分区多个节点同时写入的问题。但是注意每个分区只能单点写入跟OceanBase集群多个节点写入并不矛盾。因为Leader副本是可以分散到所有节点（OBServer）上。跟传统关系数据库一样，OceanBase维持三副本数据的同步是靠传输事务日志（Redo）机制实现的。</p><p>所以，为了保障事务日志的可靠性，OceanBase要把Leader副本上的事务日志持久化到本机和其他两个Follower副本上。宏观上表现就是可能存在各个节点彼此互相传输事务日志。这个跟MySQL的Master-Master架构里双向复制并不完全一样。 我们重点看看OceanBase如何认定事务日志可靠了。</p><p>使用Paxos协议，各个副本成员就事务日志持久化到磁盘进行表决。只要一半以上成员投票OK，Leader副本上的事务就可以继续提交了，Follower副本才开始应用Redo。这个协议是强制性约束，不够一半成员就会表决失败，Leader副本上事务就会回滚。这里没有类似Oracle或者MySQL的同步降级的做法。此外，剩余少数派成员最终也是要表决成功的，否则就是一个异常状态。</p><p>OceanBase会尽力自动去保障三副本成员状态的正常，否则就会告警等运维处理。这点也是强制性的约束，也是跟传统关系数据库不一样的地方。</p><h3 id="核心特性"><a href="#核心特性" class="headerlink" title="核心特性"></a>核心特性</h3><h4 id="分布性"><a href="#分布性" class="headerlink" title="分布性"></a>分布性</h4><ul><li>集群形式部署，支持水平扩展</li><li>在线扩容/缩容，自动负载均衡</li><li>跨机房/城市部署，容灾/多活</li></ul><h4 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用</h4><ul><li>基于Paxos协议，强一致性同步</li><li>少数副本故障，数据不丢，服务自动回复</li></ul><h4 id="多租户"><a href="#多租户" class="headerlink" title="多租户"></a>多租户</h4><ul><li>按需分配实例，即时创建和销毁</li><li>在线扩容/缩容</li><li>租户之间资源隔离</li></ul><h4 id="高兼容"><a href="#高兼容" class="headerlink" title="高兼容"></a>高兼容</h4><ul><li>Oracle/MySQL两种兼容模式</li><li>数据平滑迁移</li><li>原生的SQL和事物引擎</li></ul><h2 id="集群技术架构"><a href="#集群技术架构" class="headerlink" title="集群技术架构"></a>集群技术架构</h2><h3 id="Paxos协议与负载均衡"><a href="#Paxos协议与负载均衡" class="headerlink" title="Paxos协议与负载均衡"></a>Paxos协议与负载均衡</h3><h4 id="分区-1"><a href="#分区-1" class="headerlink" title="分区"></a>分区</h4><ul><li>当一个表很大，能够水平拆分为若干分区，每个分区包含表的若干记录。根据行数据到分区的映射关系不同，分为hash分区，List分区，range分区</li><li>每个分区还能过通过不同维度再分，称为二级分区</li><li>分区是OceanBase数据架构的基本单元，传统数据库的分区表在分布式系统上实现</li></ul><h4 id="副本"><a href="#副本" class="headerlink" title="副本"></a>副本</h4><ul><li>为数据安全和高可用的数据服务，分区的数据在物理层面上会存储多份，每一份叫做分区的一个副本</li><li>副本根据负载和特定的策略，由系统自动调度分散在多个Server上。副本支持迁移，复制，增删，类型转换等管理操作</li></ul><h5 id="副本构成"><a href="#副本构成" class="headerlink" title="副本构成"></a>副本构成</h5><p>副本构成由记录事务的日志，存储再内存的Memtable，磁盘上的静态数据SSTable</p><h5 id="副本类型"><a href="#副本类型" class="headerlink" title="副本类型"></a>副本类型</h5><ul><li>一个分区在一个zone中最多由一个全功能或日志型副本</li><li>只读型副本在同一个zone可以有多个<h6 id="全能型副本"><a href="#全能型副本" class="headerlink" title="全能型副本"></a>全能型副本</h6>拥有事务日志，MemTable和SSTable等全部完整的数据和功能，它可以随时快速切换为leader对外提供服务。<h6 id="日志型副本"><a href="#日志型副本" class="headerlink" title="日志型副本"></a>日志型副本</h6>只包含日志的副本，没有Memtable和SSTable。它参与日志投票并对外提供日志服务，可以参与其他副本的恢复，但子集不能变为主提供数据库服务。因为日志型副本所消耗的物理资源更少，它可以有效降低最后副本机器的成本，降低集群的总体成本<h6 id="只读型副本"><a href="#只读型副本" class="headerlink" title="只读型副本"></a>只读型副本</h6>包含完整的日志，MemTable和SSTable等，但是它的日志比较特殊。它不作为paxos成员参与日志的投票，而是作为一个观察者实时追赶paxos成员的日志，并在本地回放。可以在业务读取数据的一致性要求不高的时候，提供只读服务。因其不加入paxos成员组，又不会造成投票成员增加导致事务提交延时的增加</li></ul><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230721195400362.png" alt="image-20230721195400362"></p><p>如上图，按照ID分为三个hash分区，每个分区再按照交易时间分为四个二级的range分区，然后会生成多份副本，副本数量会因集群数量而变化，一般来说会每个zone内只会包含一个副本</p><h4 id="多副本一致性协议"><a href="#多副本一致性协议" class="headerlink" title="多副本一致性协议"></a>多副本一致性协议</h4><h5 id="以分区为单位组建Paxos协议组"><a href="#以分区为单位组建Paxos协议组" class="headerlink" title="以分区为单位组建Paxos协议组"></a>以分区为单位组建Paxos协议组</h5><p>每个分区都有多份副本（Replica），自动建立Paxos组，在分区级用多副本保证数据可靠性和服务高可用，数据管理更加灵活方便</p><h5 id="自动选举主副本"><a href="#自动选举主副本" class="headerlink" title="自动选举主副本"></a>自动选举主副本</h5><p>OB自动生成多份副本，多副本自动选举主副本，主副本提供服务</p><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230721224526185.png" alt="image-20230721224526185"></p><h4 id="自动负载均衡与智能路由"><a href="#自动负载均衡与智能路由" class="headerlink" title="自动负载均衡与智能路由"></a>自动负载均衡与智能路由</h4><h5 id="自动负载均衡"><a href="#自动负载均衡" class="headerlink" title="自动负载均衡"></a>自动负载均衡</h5><p>主副本均匀打散到各个服务器中，使得各个服务器都能承载业务流量</p><h5 id="OB-Server相互独立"><a href="#OB-Server相互独立" class="headerlink" title="OB Server相互独立"></a>OB Server相互独立</h5><p>每台OB Server均可以独立执行SQL，如果应用需要访问的数据不同机器上，OB Server自动将请求路由至数据所在机器，对业务完全透明。</p><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230721225131923.png" alt="image-20230721225131923"></p><h4 id="多副本同步Redo-Log-确保数据持久化"><a href="#多副本同步Redo-Log-确保数据持久化" class="headerlink" title="多副本同步Redo Log 确保数据持久化"></a>多副本同步Redo Log 确保数据持久化</h4><ul><li>Paxos组成员通过Redo-Log的多数派强同步确保数据的持久化</li><li>Leader无需等待所有Follower的反馈，多数派完成同步即可向应用反馈成功</li></ul><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230724153630019.png" alt="image-20230724153630019"></p><ol><li>应用写数据到P2分区。Zone2-OB Server1的P2为主副本（Leader），承接业务需求。</li><li>将Redo-Log同步请求发送到Zone1-OB Server1和Zone3-OB Server1中的P2从副本（Follower）；</li><li>任何一个Follower完成Redo-Log落盘并将响应返回给Leader后，Leader即认为Redo-Log完成强同步，无需再等待其他Follower的反馈；</li><li>Leader反馈应用操作完成。</li></ol><h4 id="智能路由服务，应用透明访问"><a href="#智能路由服务，应用透明访问" class="headerlink" title="智能路由服务，应用透明访问"></a>智能路由服务，应用透明访问</h4><h5 id="高效路由转发"><a href="#高效路由转发" class="headerlink" title="高效路由转发"></a>高效路由转发</h5><ul><li>对SQL做基本解析，确定对应Leader所在机器；</li><li>反向代理，将请求路由至对应Leader；Leader位置无法确定时随机选择OB Server；</li><li>轻量SQL解析 + 快速转发，保证高性能，单OB Proxy每秒转发百万次请求。</li></ul><h5 id="“非”计算节点，无状态"><a href="#“非”计算节点，无状态" class="headerlink" title="“非”计算节点，无状态"></a>“非”计算节点，无状态</h5><ul><li>每个OB Proxy是一个“无状态”的服务进程，不做数据持久化，对部署位置无要求；</li><li>OB Proxy不参与数据库引擎的计算任务，不参与事务处理；</li><li>多个OB Proxy之间无联系，可通过F5/SLB组成负载均衡集群；</li><li>不需要独立服务器，可以与OB Server共用一台服务器，如果应用对实时性要求高，也可以将OB Proxy部署到应用服务器中。</li></ul><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230724160743540.png" alt="image-20230724160743540"></p><p>OB Proxy的故障是不会影响事务的功能，事务，持久化，落盘基本是由OB Server来完成。</p><h4 id="设置Primary-Zone，业务汇聚到特定Zone"><a href="#设置Primary-Zone，业务汇聚到特定Zone" class="headerlink" title="设置Primary Zone，业务汇聚到特定Zone"></a>设置Primary Zone，业务汇聚到特定Zone</h4><p>通过为不同的租户配置不同的Primary Zone，可以将业务流量集中到若干Zone中，减少跨Zone以及服务器的操作。Zone List，逗号两侧优先级相同，分号左侧优先级高于右侧</p><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230724161140837.png" alt="image-20230724161140837"></p><h4 id="Primary-Zone有租户，数据库和表不同的级别。"><a href="#Primary-Zone有租户，数据库和表不同的级别。" class="headerlink" title="Primary Zone有租户，数据库和表不同的级别。"></a>Primary Zone有租户，数据库和表不同的级别。</h4><ul><li>如无特殊指定，自动继承上级对象的Primary_zone:database继承租户的primary_zone设置，table继承database的primary_zone设置。</li><li>database和table可以指定各自的primary_zone，不必和上一级对象的设置保持一致；提供更加灵活的负载均衡策略。</li></ul><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230724162242300.png" alt="image-20230724162242300"></p><h4 id="Table-Group-将多个表的相同分区ID的主副本聚集在一个OB-Server中，减少分布式事务引入的开销"><a href="#Table-Group-将多个表的相同分区ID的主副本聚集在一个OB-Server中，减少分布式事务引入的开销" class="headerlink" title="Table Group,将多个表的相同分区ID的主副本聚集在一个OB Server中，减少分布式事务引入的开销"></a>Table Group,将多个表的相同分区ID的主副本聚集在一个OB Server中，减少分布式事务引入的开销</h4><ul><li>如果多个表的分区方式完全相同（分区类型，分区键个数，分区数量等），可以在逻辑上将这些表归属到同一个Table Group中，以影响动态负载均衡的策略</li><li>同一个Table Group中的所有表，分区ID（partition_id） 相同的所有分区，他们的leader在同一个observer上：在不影响全局负载均衡的前提下，可有效减少分布式事务引入的跨机访问开销。</li><li>如果负载均衡被打破（服务器故障后，扩容缩容等），Table Group中的所有表会作为一个整体来调整分区分布和Leader分布</li><li>动态创建和删除，并且对上层应用完全透明。</li><li>如果租户的unit_num=1 且 primary_zone只有一个zone，不需要tablegroup。</li></ul><p>RDS实例，mysql扩容主备切换，ELR提前解行锁.。。。。。持续更新学习中………</p><h2 id="感谢OceanBase"><a href="#感谢OceanBase" class="headerlink" title="感谢OceanBase"></a>感谢OceanBase</h2><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230724163848260.png" alt="image-20230724163848260"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;OceanBase&quot;&gt;&lt;a href=&quot;#OceanBase&quot; class=&quot;headerlink&quot; title=&quot;OceanBase&quot;&gt;&lt;/a&gt;OceanBase&lt;/h1&gt;&lt;h2 id=&quot;传统集中式数据库面临的挑战&quot;&gt;&lt;a href=&quot;#传统集中式数据库面临的挑</summary>
      
    
    
    
    <category term="数据库" scheme="https://kalyan-zitiu.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="OceanBase" scheme="https://kalyan-zitiu.github.io/tags/OceanBase/"/>
    
  </entry>
  
  <entry>
    <title>Basic Cryptography</title>
    <link href="https://kalyan-zitiu.github.io/2023/06/29/Sercet/"/>
    <id>https://kalyan-zitiu.github.io/2023/06/29/Sercet/</id>
    <published>2023-06-29T08:50:04.000Z</published>
    <updated>2023-07-02T16:05:03.029Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础密码学"><a href="#基础密码学" class="headerlink" title="基础密码学"></a>基础密码学</h1><p>密码学是研究信息的保密性、完整性和认证性的学科。它在现代通信和计算机系统中起着关键作用，保护着敏感数据的安全。</p><h2 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h2><p>对称加密是一种加密方法，其中使用相同的密钥进行加密和解密。以下是一些常见的对称加密算法和特点：</p><table><thead><tr><th>算法</th><th>特点</th></tr></thead><tbody><tr><td>DES</td><td>数据加密标准，使用56位密钥</td></tr><tr><td>AES</td><td>高级加密标准，使用128、192或256位密钥</td></tr><tr><td>3DES</td><td>三重数据加密标准，对数据进行三次加密</td></tr><tr><td>RC4</td><td>流密码算法，适用于嵌入式设备</td></tr></tbody></table><h2 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h2><p>非对称加密使用不同的密钥进行加密和解密。它包括公钥和私钥，其中公钥用于加密，私钥用于解密。以下是一些常见的非对称加密算法和特点：</p><table><thead><tr><th>算法</th><th>特点</th></tr></thead><tbody><tr><td>RSA</td><td>基于大素数分解的加密算法</td></tr><tr><td>Diffie-Hellman</td><td>密钥交换算法，用于安全地共享密钥</td></tr><tr><td>ECC</td><td>椭圆曲线密码学，使用较短的密钥提供相同的安全性</td></tr></tbody></table><h2 id="哈希函数"><a href="#哈希函数" class="headerlink" title="哈希函数"></a>哈希函数</h2><p>哈希函数将输入数据转换为固定长度的哈希值。它的主要特点是输入的任何小改变都会导致输出值的巨大改变。以下是一些常见的哈希函数和特点：</p><table><thead><tr><th>函数</th><th>特点</th></tr></thead><tbody><tr><td>MD5</td><td>128位哈希值，易于碰撞攻击</td></tr><tr><td>SHA-1</td><td>160位哈希值，被认为不够安全</td></tr><tr><td>SHA-256</td><td>256位哈希值，广泛用于数字签名和认证</td></tr></tbody></table><h2 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h2><p>数字签名用于验证消息的完整性和来源。它使用私钥对消息进行签名，然后使用公钥进行验证。以下是一些常见的数字签名算法和特点：</p><table><thead><tr><th>算法</th><th>特点</th></tr></thead><tbody><tr><td>RSA</td><td>基于大素数分解的加密算法</td></tr><tr><td>DSA</td><td>数字签名算法，用于确保消息的完整性和认证</td></tr><tr><td>ECDSA</td><td>椭圆曲线数字签名算法，提供相同安全性下较短的密钥长度</td></tr></tbody></table><h2 id="密钥交换"><a href="#密钥交换" class="headerlink" title="密钥交换"></a>密钥交换</h2><p>密钥交换是在通信双方之间安全地共享密钥的过程。以下是一些常见的密钥交换协议和特点：</p><table><thead><tr><th>协议</th><th>特点</th></tr></thead><tbody><tr><td>Diffie-Hellman</td><td>公钥密码学协议，双方通过交换信息生成共享密钥</td></tr><tr><td>RSA 密钥交换</td><td>基于RSA算法的密钥交换协议</td></tr><tr><td>ECDH</td><td>基于椭圆曲线密码学的密钥交换协议，提供较短的密钥长度</td></tr></tbody></table><h2 id="消息认证码"><a href="#消息认证码" class="headerlink" title="消息认证码"></a>消息认证码</h2><p>消息认证码（Message Authentication Code，MAC）用于验证消息的完整性和真实性，以防止消息被篡改。以下是一些常见的消息认证码算法和特点：</p><table><thead><tr><th>算法</th><th>特点</th></tr></thead><tbody><tr><td>HMAC</td><td>基于散列函数和密钥的消息认证码算法</td></tr><tr><td>CMAC</td><td>基于块密码的消息认证码算法</td></tr><tr><td>Poly1305</td><td>使用特殊的多项式计算的消息认证码算法</td></tr></tbody></table><h2 id="数字证书"><a href="#数字证书" class="headerlink" title="数字证书"></a>数字证书</h2><p>数字证书用于验证实体的身份和确保通信的安全。它包含了实体的公钥和其他身份信息，并由数字证书颁发机构（Certificate Authority，CA）签名。以下是一些与数字证书相关的概念和术语：</p><table><thead><tr><th>术语</th><th>解释</th></tr></thead><tbody><tr><td>公钥证书（Public Key Certificate）</td><td>包含公钥和实体身份信息的数字证书</td></tr><tr><td>数字签名（Digital Signature）</td><td>用于验证数字证书的完整性和真实性的签名</td></tr><tr><td>证书链（Certificate Chain）</td><td>由一系列数字证书组成的链，用于验证数字证书的信任链条</td></tr></tbody></table><h2 id="密码协议"><a href="#密码协议" class="headerlink" title="密码协议"></a>密码协议</h2><p>密码协议用于在不安全的通信环境中实现安全通信。它们定义了通信双方之间的消息格式、加密算法、密钥交换协议等。以下是一些常见的密码协议：</p><table><thead><tr><th>协议</th><th>特点</th></tr></thead><tbody><tr><td>SSL/TLS</td><td>安全套接层/传输层安全协议，用于保护Web通信</td></tr><tr><td>IPSec</td><td>用于保护IP网络通信的协议</td></tr><tr><td>SSH</td><td>安全外壳协议，用于远程登录和安全文件传输</td></tr></tbody></table><h2 id="抗量子密码学"><a href="#抗量子密码学" class="headerlink" title="抗量子密码学"></a>抗量子密码学</h2><p>随着量子计算机的发展，传统密码学算法的安全性受到了挑战。抗量子密码学致力于设计抵抗量子计算攻击的密码算法。以下是一些抗量子密码学的概念和算法：</p><table><thead><tr><th>概念/算法</th><th>解释</th></tr></thead><tbody><tr><td>Post-Quantum Cryptography（PQC）</td><td>用于抵抗量子计算攻击的密码学算法</td></tr><tr><td>Lattice-Based Cryptography</td><td>基于格的密码学，利用数学问题的困难性提供安全性</td></tr><tr><td>Code-Based Cryptography</td><td>基于编码的密码学，利用编码理论提供安全性</td></tr></tbody></table><h2 id="密码学应用"><a href="#密码学应用" class="headerlink" title="密码学应用"></a>密码学应用</h2><p>密码学在各个领域有广泛的应用。以下是一些常见的密码学应用和场景：</p><table><thead><tr><th>应用</th><th>描述</th></tr></thead><tbody><tr><td>数据加密</td><td>用于保护敏感数据的机密性，例如在存储和传输过程中进行加密</td></tr><tr><td>身份认证</td><td>用于验证用户的身份，例如使用密码、数字证书或生物特征识别</td></tr><tr><td>虚拟私人网络</td><td>通过加密和隧道技术实现安全的远程访问和通信</td></tr><tr><td>数字版权保护</td><td>用于保护数字内容的版权和防止非法复制和分发</td></tr><tr><td>安全电子支付</td><td>用于保护在线交易的机密性和完整性，例如使用加密货币和数字签名</td></tr></tbody></table><h2 id="密码破解与密码强度"><a href="#密码破解与密码强度" class="headerlink" title="密码破解与密码强度"></a>密码破解与密码强度</h2><p>密码破解是试图通过暴力猜测或使用各种技术手段来获取密码的过程。密码强度是衡量密码抵御密码破解攻击的程度。以下是一些与密码破解和密码强度相关的概念：</p><table><thead><tr><th>概念</th><th>解释</th></tr></thead><tbody><tr><td>字典攻击</td><td>使用预先生成的密码列表进行猜测的攻击方式</td></tr><tr><td>彩虹表攻击</td><td>使用预先计算的哈希值与密码对应表进行猜测的攻击方式</td></tr><tr><td>密码策略</td><td>设定密码要求和规则的策略，如密码长度、复杂性和更改频率等</td></tr><tr><td>双因素认证</td><td>使用两个或多个不同的身份验证因素来增强安全性，如密码+OTP令牌</td></tr></tbody></table><h2 id="密码学应用-1"><a href="#密码学应用-1" class="headerlink" title="密码学应用"></a>密码学应用</h2><p>密码学在各个领域有广泛的应用。以下是一些常见的密码学应用和场景：</p><table><thead><tr><th>应用</th><th>描述</th></tr></thead><tbody><tr><td>数据加密</td><td>用于保护敏感数据的机密性，例如在存储和传输过程中进行加密</td></tr><tr><td>身份认证</td><td>用于验证用户的身份，例如使用密码、数字证书或生物特征识别</td></tr><tr><td>虚拟私人网络</td><td>通过加密和隧道技术实现安全的远程访问和通信</td></tr><tr><td>数字版权保护</td><td>用于保护数字内容的版权和防止非法复制和分发</td></tr><tr><td>安全电子支付</td><td>用于保护在线交易的机密性和完整性，例如使用加密货币和数字签名</td></tr></tbody></table><h2 id="密码破解与密码强度-1"><a href="#密码破解与密码强度-1" class="headerlink" title="密码破解与密码强度"></a>密码破解与密码强度</h2><p>密码破解是试图通过暴力猜测或使用各种技术手段来获取密码的过程。密码强度是衡量密码抵御密码破解攻击的程度。以下是一些与密码破解和密码强度相关的概念：</p><table><thead><tr><th>概念</th><th>解释</th></tr></thead><tbody><tr><td>字典攻击</td><td>使用预先生成的密码列表进行猜测的攻击方式</td></tr><tr><td>彩虹表攻击</td><td>使用预先计算的哈希值与密码对应表进行猜测的攻击方式</td></tr><tr><td>密码策略</td><td>设定密码要求和规则的策略，如密码长度、复杂性和更改频率等</td></tr><tr><td>双因素认证</td><td>使用两个或多个不同的身份验证因素来增强安全性，如密码+OTP令牌</td></tr></tbody></table><h2 id="密码管理"><a href="#密码管理" class="headerlink" title="密码管理"></a>密码管理</h2><p>密码管理是指有效管理和保护个人或组织的密码。以下是一些常见的密码管理实践和工具：</p><table><thead><tr><th>实践/工具</th><th>描述</th></tr></thead><tbody><tr><td>密码管理器</td><td>用于安全存储和生成密码的应用程序，如LastPass和1Password等</td></tr><tr><td>多因素身份验证</td><td>在登录过程中要求提供多个验证因素，增加账户安全性</td></tr><tr><td>定期更改密码</td><td>定期更改密码以减少密码泄露和破解的风险</td></tr><tr><td>强密码生成</td><td>使用随机字符、数字和符号生成强密码，避免使用弱密码</td></tr><tr><td>社会工程学防范</td><td>提高对社会工程学攻击的意识，避免将密码泄露给不信任的来源</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">code</summary>
    
    
    
    <category term="密码学" scheme="https://kalyan-zitiu.github.io/categories/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
    <category term="密码学" scheme="https://kalyan-zitiu.github.io/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>设计模型-行为型模式</title>
    <link href="https://kalyan-zitiu.github.io/2023/06/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A1%8C%E4%B8%BA/"/>
    <id>https://kalyan-zitiu.github.io/2023/06/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A1%8C%E4%B8%BA/</id>
    <published>2023-06-15T14:00:00.000Z</published>
    <updated>2023-07-02T15:50:03.467Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式-行为型"><a href="#设计模式-行为型" class="headerlink" title="设计模式-行为型"></a>设计模式-行为型</h1><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul><li>定义了对象之间一对多依赖，让多个观察者对象同时监听某一个主题对象，当主题对象发生变化时，它的所有依赖者都会收到通知并更新</li></ul><h3 id="模式组合"><a href="#模式组合" class="headerlink" title="模式组合"></a>模式组合</h3><table><thead><tr><th>角色</th><th>描述</th></tr></thead><tbody><tr><td>Subject</td><td>被观察者接口，定义了注册、移除和通知观察者的方法</td></tr><tr><td>Observer</td><td>观察者接口，定义了接收被观察者通知并进行更新的方法</td></tr><tr><td>ConcreteSubject</td><td>具体的被观察者类，实现Subject接口，维护观察者列表，当状态变化时通知观察者</td></tr><tr><td>ConcreteObserver</td><td>具体的观察者类，实现Observer接口，定义了接收通知后进行更新操作的方法</td></tr></tbody></table><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><h4 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h4><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230626152258117.png" alt="image-20230626152258117"></p><h4 id="code"><a href="#code" class="headerlink" title="code"></a>code</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 被观察者接口</span><br><span class="line">interface Subject &#123;</span><br><span class="line">    void registerObserver(Observer observer);</span><br><span class="line">    void removeObserver(Observer observer);</span><br><span class="line">    void notifyObservers();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 观察者接口</span><br><span class="line">interface Observer &#123;</span><br><span class="line">    void update(float temperature, float humidity, float pressure);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 具体的被观察者类</span><br><span class="line">class WeatherData implements Subject &#123;</span><br><span class="line">    private List&lt;Observer&gt; observers;</span><br><span class="line">    private float temperature;</span><br><span class="line">    private float humidity;</span><br><span class="line">    private float pressure;</span><br><span class="line">    </span><br><span class="line">    public WeatherData() &#123;</span><br><span class="line">        observers = new ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void registerObserver(Observer observer) &#123;</span><br><span class="line">        observers.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void removeObserver(Observer observer) &#123;</span><br><span class="line">        observers.remove(observer);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void notifyObservers() &#123;</span><br><span class="line">        for (Observer observer : observers) &#123;</span><br><span class="line">            observer.update(temperature, humidity, pressure);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void measurementsChanged() &#123;</span><br><span class="line">        // 当天气数据发生变化时调用该方法</span><br><span class="line">        notifyObservers();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void setMeasurements(float temperature, float humidity, float pressure) &#123;</span><br><span class="line">        this.temperature = temperature;</span><br><span class="line">        this.humidity = humidity;</span><br><span class="line">        this.pressure = pressure;</span><br><span class="line">        measurementsChanged();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 具体的观察者类</span><br><span class="line">class WeatherDisplay implements Observer &#123;</span><br><span class="line">    private float temperature;</span><br><span class="line">    private float humidity;</span><br><span class="line">    private float pressure;</span><br><span class="line">    </span><br><span class="line">    public void update(float temperature, float humidity, float pressure) &#123;</span><br><span class="line">        this.temperature = temperature;</span><br><span class="line">        this.humidity = humidity;</span><br><span class="line">        this.pressure = pressure;</span><br><span class="line">        display();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void display() &#123;</span><br><span class="line">        // 更新天气展示板上的数据显示</span><br><span class="line">        System.out.println(&quot;当前天气情况：温度 &quot; + temperature + &quot;℃，湿度 &quot; + humidity + &quot;%，气压 &quot; + pressure + &quot;Pa&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 测试代码</span><br><span class="line">public class ObserverPatternExample &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        WeatherData weatherData = new WeatherData();</span><br><span class="line">        </span><br><span class="line">        WeatherDisplay display1 = new WeatherDisplay();</span><br><span class="line">        WeatherDisplay display2 = new WeatherDisplay();</span><br><span class="line">        </span><br><span class="line">        weatherData.registerObserver(display1);</span><br><span class="line">        weatherData.registerObserver(display2);</span><br><span class="line">        </span><br><span class="line">        // 模拟天气数据变化</span><br><span class="line">        weatherData.setMeasurements(28.5f, 70.2f, 1013.2f);</span><br><span class="line">        </span><br><span class="line">        // 移除一个观察者</span><br><span class="line">        weatherData.removeObserver(display2);</span><br><span class="line">        </span><br><span class="line">        // 再次模拟天气数据变化</span><br><span class="line">        weatherData.setMeasurements(30.2f, 65.8f, 1012.5f);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="模式特征"><a href="#模式特征" class="headerlink" title="模式特征"></a>模式特征</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>松耦合：被观察者和观察者之间是松耦合的关系，它们之间相互独立，可以独立地进行扩展和修改，一方的变化不会影响到另一方。 </li><li>可扩展性：可以轻松地增加新的观察者和被观察者，使系统具有更好的可扩展性。</li><li>随时通知：被观察者状态发生变化时，会立即通知所有观察者，观察者可以及时作出响应。</li><li>解耦：观察者模式将观察者和被观察者解耦，使它们之间的依赖关系降低，符合面向对象设计的原则。</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>增加了复杂性：在使用观察者模式时，需要维护观察者列表并确保正确的通知顺序，这增加了系统的复杂性。</li><li>更新通知顺序：观察者的更新通知顺序是不确定的，这可能导致观察者之间的依赖关系问题。</li><li>观察者数量过多：当观察者数量过多时，被观察者通知所有观察者的时间和性能开销会增加。</li></ul><h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><ul><li>定义了一组算法类，将每个算法封装到单独的类中，并使他们可以相互替换，而不影响客户端的代码</li></ul><h3 id="模式组成"><a href="#模式组成" class="headerlink" title="模式组成"></a>模式组成</h3><table><thead><tr><th>角色</th><th>描述</th></tr></thead><tbody><tr><td>环境类（Context）</td><td>包含对策略的引用，可在运行时切换不同的策略。将具体的算法委托给策略对象执行。</td></tr><tr><td>抽象策略类（Strategy）</td><td>定义了通用的策略接口，所有具体策略类都必须实现该接口。通常是抽象类或接口，包含一个或多个用于执行策略的方法。</td></tr><tr><td>具体策略类（Concrete Strategy）</td><td>实现策略接口，提供具体的算法实现。每个具体策略类封装了一种特定的算法，可根据需要添加、删除或替换。</td></tr></tbody></table><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><h4 id="类图-1"><a href="#类图-1" class="headerlink" title="类图"></a>类图</h4><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/%E5%8C%85%20Strategy.png" alt="包 Strategy"></p><h4 id="code-1"><a href="#code-1" class="headerlink" title="code"></a>code</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 环境类（Context）</span><br><span class="line">class Context &#123;</span><br><span class="line">    private Strategy strategy;</span><br><span class="line"></span><br><span class="line">    public void setStrategy(Strategy strategy) &#123;</span><br><span class="line">        this.strategy = strategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void executeStrategy(int num1, int num2) &#123;</span><br><span class="line">        int result = strategy.doOperation(num1, num2);</span><br><span class="line">        System.out.println(&quot;Result: &quot; + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 抽象策略类（Strategy）</span><br><span class="line">interface Strategy &#123;</span><br><span class="line">    int doOperation(int num1, int num2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 具体策略类（Concrete Strategy）</span><br><span class="line">class AddStrategy implements Strategy &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public int doOperation(int num1, int num2) &#123;</span><br><span class="line">        return num1 + num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 具体策略类（Concrete Strategy）</span><br><span class="line">class SubtractStrategy implements Strategy &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public int doOperation(int num1, int num2) &#123;</span><br><span class="line">        return num1 - num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 具体策略类（Concrete Strategy）</span><br><span class="line">class MultiplyStrategy implements Strategy &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public int doOperation(int num1, int num2) &#123;</span><br><span class="line">        return num1 * num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Context context = new Context();</span><br><span class="line"></span><br><span class="line">        // 使用加法策略</span><br><span class="line">        context.setStrategy(new AddStrategy());</span><br><span class="line">        context.executeStrategy(5, 3); // Output: Result: 8</span><br><span class="line"></span><br><span class="line">        // 使用减法策略</span><br><span class="line">        context.setStrategy(new SubtractStrategy());</span><br><span class="line">        context.executeStrategy(5, 3); // Output: Result: 2</span><br><span class="line"></span><br><span class="line">        // 使用乘法策略</span><br><span class="line">        context.setStrategy(new MultiplyStrategy());</span><br><span class="line">        context.executeStrategy(5, 3); // Output: Result: 15</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="模式特征-1"><a href="#模式特征-1" class="headerlink" title="模式特征"></a>模式特征</h4><h5 id="策略模式的优点："><a href="#策略模式的优点：" class="headerlink" title="策略模式的优点："></a>策略模式的优点：</h5><p>可扩展性：策略模式使得新增或修改算法变得简单，通过添加新的具体策略类，可以轻松地扩展系统的功能。</p><p>灵活性：客户端可以根据需要在运行时选择不同的策略，无需修改原有的代码，提供了更高的灵活性和可定制性。</p><p>代码复用：策略模式利用了面向对象的多态特性，可以让多个具体策略类共享相同的接口或抽象类，提高了代码的复用性。</p><p>解耦合：策略模式将算法的选择与使用算法的客户端代码解耦，客户端只需要关注如何使用策略，而无需关注具体的算法实现细节，降低了代码的耦合度。</p><h6 id="策略模式的缺点："><a href="#策略模式的缺点：" class="headerlink" title="策略模式的缺点："></a>策略模式的缺点：</h6><p>增加类的数量：每个具体策略类都需要一个对应的类，当策略较多时，会增加类的数量，导致代码结构复杂。</p><p>客户端需要了解不同策略的区别：客户端在选择具体策略时需要了解不同策略的特点和适用场景，增加了客户端的理解和学习成本。</p><p>策略的切换开销：在运行时切换策略时，可能需要重新设置环境类的策略，会带来一定的切换开销，尤其是在需要频繁切换策略时。</p><h2 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h2><h3 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h3><ul><li>允许多个对象依次处理请求，形成一个处理请求的链条，每个对象都有机会处理请求，但具体是哪个对象处理请求由运行时决定。<h3 id="模式组成-1"><a href="#模式组成-1" class="headerlink" title="模式组成"></a>模式组成</h3></li></ul><table><thead><tr><th>组成部分</th><th>描述</th></tr></thead><tbody><tr><td>抽象处理者（Abstract Handler）</td><td>定义处理请求的接口，包含一个指向下一个处理者的引用。</td></tr><tr><td>具体处理者（Concrete Handler）</td><td>实现抽象处理者接口，并决定自己能处理的请求类型，如果可以处理就进行处理，否则将请求传递给下一个处理者。</td></tr><tr><td>客户端（Client）</td><td>发起请求的对象，将请求发送给第一个处理者。</td></tr></tbody></table><h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><h4 id="类图-2"><a href="#类图-2" class="headerlink" title="类图"></a>类图</h4><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230626161056453.png" alt="image-20230626161056453"></p><h4 id="code-2"><a href="#code-2" class="headerlink" title="code"></a>code</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 抽象处理者</span><br><span class="line">abstract class Handler &#123;</span><br><span class="line">    protected Handler successor; // 下一个处理者</span><br><span class="line"></span><br><span class="line">    public void setSuccessor(Handler successor) &#123;</span><br><span class="line">        this.successor = successor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public abstract void handleRequest(int request);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 具体处理者A</span><br><span class="line">class ConcreteHandlerA extends Handler &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void handleRequest(int request) &#123;</span><br><span class="line">        if (request &gt;= 0 &amp;&amp; request &lt; 10) &#123;</span><br><span class="line">            System.out.println(&quot;ConcreteHandlerA 处理请求：&quot; + request);</span><br><span class="line">        &#125; else if (successor != null) &#123;</span><br><span class="line">            successor.handleRequest(request); // 传递给下一个处理者</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 具体处理者B</span><br><span class="line">class ConcreteHandlerB extends Handler &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void handleRequest(int request) &#123;</span><br><span class="line">        if (request &gt;= 10 &amp;&amp; request &lt; 20) &#123;</span><br><span class="line">            System.out.println(&quot;ConcreteHandlerB 处理请求：&quot; + request);</span><br><span class="line">        &#125; else if (successor != null) &#123;</span><br><span class="line">            successor.handleRequest(request); // 传递给下一个处理者</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 具体处理者C</span><br><span class="line">class ConcreteHandlerC extends Handler &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void handleRequest(int request) &#123;</span><br><span class="line">        if (request &gt;= 20 &amp;&amp; request &lt; 30) &#123;</span><br><span class="line">            System.out.println(&quot;ConcreteHandlerC 处理请求：&quot; + request);</span><br><span class="line">        &#125; else if (successor != null) &#123;</span><br><span class="line">            successor.handleRequest(request); // 传递给下一个处理者</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 客户端</span><br><span class="line">public class Client &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Handler handlerA = new ConcreteHandlerA();</span><br><span class="line">        Handler handlerB = new ConcreteHandlerB();</span><br><span class="line">        Handler handlerC = new ConcreteHandlerC();</span><br><span class="line"></span><br><span class="line">        handlerA.setSuccessor(handlerB);</span><br><span class="line">        handlerB.setSuccessor(handlerC);</span><br><span class="line"></span><br><span class="line">        int[] requests = &#123; 2, 12, 25, 30 &#125;;</span><br><span class="line"></span><br><span class="line">        for (int request : requests) &#123;</span><br><span class="line">            handlerA.handleRequest(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="模式特征-2"><a href="#模式特征-2" class="headerlink" title="模式特征"></a>模式特征</h4><h5 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h5><p>责任链模式将发送者和接收者解耦，发送者无需知道具体的接收者，只需将请求发送给责任链的起始点即可，由责任链负责将请求传递给合适的接收者进行处理。<br>灵活性和可扩展性：责任链模式允许动态地添加、移除或重新排列处理者，可以根据需求对责任链进行灵活的组织和调整，而无需修改客户端代码。<br>可以确保请求被处理：由于责任链中的每个处理者都有机会处理请求，可以确保请求最终会被处理，而不会被忽略或丢失。</p><h5 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h5><p>性能问题：如果责任链过长或者处理者的判断逻辑过于复杂，可能会导致性能下降，因为每个请求都要依次经过链中的所有处理者。<br>请求的处理不一定成功：由于责任链模式并不保证请求一定会被处理，如果没有合适的处理者或者处理者链配置错误，请求可能会被忽略或丢失。<br>可能导致调试困难：责任链模式中请求的处理路径是动态确定的，可能会导致在调试时难以确定请求的具体处理路径。</p><h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><h3 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h3><ul><li>将请求封装成一个对象，该对象会包含了执行操作的方法，发送者将命令对象传递给调用者，并在需要执行操作的时候触发命令并执行相应操作。</li></ul><h3 id="模式组成-2"><a href="#模式组成-2" class="headerlink" title="模式组成"></a>模式组成</h3><table><thead><tr><th>模式组成</th><th>描述</th></tr></thead><tbody><tr><td>命令接口</td><td>定义命令的执行方法，通常包括一个执行操作的方法。</td></tr><tr><td>具体命令</td><td>实现命令接口，持有一个接收者对象，并将请求委托给接收者执行具体的操作。</td></tr><tr><td>接收者</td><td>知道如何实施与执行一个请求相关的操作。</td></tr><tr><td>调用者</td><td>将命令对象传递给调用者，并可选择性地触发命令执行。</td></tr></tbody></table><h3 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h3><h4 id="code-3"><a href="#code-3" class="headerlink" title="code"></a>code</h4><p>当然，以下是一个简单的 Java 实例来演示命令模式：</p><p>首先，我们定义一个命令接口 <code>Command</code>，它包含了一个执行操作的方法 <code>execute()</code>：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Command</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，我们创建一个具体命令类 <code>ConcreteCommand</code>，它实现了 <code>Command</code> 接口，并持有一个接收者对象，用于执行具体的操作：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteCommand</span> <span class="keyword">implements</span> <span class="title class_">Command</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Receiver receiver;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConcreteCommand</span><span class="params">(Receiver receiver)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.receiver = receiver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        receiver.performAction();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，我们定义一个接收者类 <code>Receiver</code>，它知道如何实施与执行请求相关的操作：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Receiver</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">performAction</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Receiver: Performing action...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，我们创建一个调用者类 <code>Invoker</code>，它将接收到的命令对象传递给调用者，并在需要的时候触发命令的执行：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Invoker</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Command command;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCommand</span><span class="params">(Command command)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.command = command;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">executeCommand</span><span class="params">()</span> &#123;</span><br><span class="line">        command.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，我们可以在客户端代码中配置和使用命令模式：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建接收者对象</span></span><br><span class="line">        <span class="type">Receiver</span> <span class="variable">receiver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Receiver</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建具体命令对象并设置接收者</span></span><br><span class="line">        <span class="type">Command</span> <span class="variable">command</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteCommand</span>(receiver);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建调用者对象并设置命令</span></span><br><span class="line">        <span class="type">Invoker</span> <span class="variable">invoker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Invoker</span>();</span><br><span class="line">        invoker.setCommand(command);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行命令</span></span><br><span class="line">        invoker.executeCommand();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类图-3"><a href="#类图-3" class="headerlink" title="类图"></a>类图</h4><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230702220522678.png" alt="image-20230702220522678"></p><h3 id="模式特征-3"><a href="#模式特征-3" class="headerlink" title="模式特征"></a>模式特征</h3><h4 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h4><ol><li>解耦发送者和接收者：命令模式将请求封装成对象，使得发送者和接收者之间解耦。发送者不需要知道接收者的具体实现细节，只需通过命令对象来执行请求。</li><li>容易扩展和修改：由于命令模式将请求封装成独立的对象，因此可以很容易地添加新的命令或修改现有命令，而不会对其他部分产生影响。这种可扩展性使得系统更加灵活和可维护。</li><li>支持撤销和重做：命令模式可以记录命令的历史，从而支持撤销和重做操作。通过保存命令的执行历史，可以在需要时回溯执行，实现撤销操作。</li><li>支持命令的排队和调度：命令模式可以将命令对象进行排队或者调度，从而实现更高级的控制和管理。可以按照特定的顺序执行命令，或者延迟执行命令。</li></ol><h4 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h4><ol><li>类的增加：在使用命令模式时，每个具体命令都需要一个独立的类，这可能会导致类的数量增加，增加了系统的复杂性。</li><li>可能导致系统过于细粒度：如果系统中有大量的命令对象，每个对象都只封装了一个操作，可能会导致系统过于细粒度，增加了管理和维护的成本。</li><li>可能引入额外的开销：命令模式需要创建额外的对象来封装请求，可能会引入一定的开销。但在大多数情况下，这种开销是可以接受的。</li></ol><h2 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h2><h3 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h3><ul><li>通过将不同状态抽象为独立的类，并将其与主对象关联，实现状态之间的切换和行为的动态变化。</li></ul><h3 id="模式组成-3"><a href="#模式组成-3" class="headerlink" title="模式组成"></a>模式组成</h3><table><thead><tr><th>组成要素</th><th>描述</th></tr></thead><tbody><tr><td>环境（Context）</td><td>环境类持有一个状态对象的引用，可以定义和维护对象的内部状态。它将状态相关的操作委托给当前状态对象，并在状态发生改变时更新当前状态对象。</td></tr><tr><td>抽象状态（State）</td><td>定义一个接口或抽象类，声明各个具体状态类共同的方法，这些方法可以是环境在某个特定状态下要执行的行为。</td></tr><tr><td>具体状态（Concrete State）</td><td>实现抽象状态接口或继承抽象状态类，具体状态类封装了特定状态下的行为。每个具体状态类负责处理与其状态相关的操作，并在必要时切换到其他状态。</td></tr></tbody></table><h3 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h3><h4 id="code-4"><a href="#code-4" class="headerlink" title="code"></a>code</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 抽象状态类</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">OrderState</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">processOrder</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体状态类：新订单状态</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NewOrderState</span> <span class="keyword">implements</span> <span class="title class_">OrderState</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;处理新订单...&quot;</span>);</span><br><span class="line">        <span class="comment">// 执行新订单状态下的业务逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体状态类：已支付状态</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PaidOrderState</span> <span class="keyword">implements</span> <span class="title class_">OrderState</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;处理已支付订单...&quot;</span>);</span><br><span class="line">        <span class="comment">// 执行已支付订单状态下的业务逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体状态类：已发货状态</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ShippedOrderState</span> <span class="keyword">implements</span> <span class="title class_">OrderState</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;处理已发货订单...&quot;</span>);</span><br><span class="line">        <span class="comment">// 执行已发货订单状态下的业务逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 环境类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Order</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> OrderState currentState;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Order</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 默认初始状态为新订单状态</span></span><br><span class="line">        currentState = <span class="keyword">new</span> <span class="title class_">NewOrderState</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setState</span><span class="params">(OrderState state)</span> &#123;</span><br><span class="line">        currentState = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        currentState.processOrder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StatePatternExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 处理新订单</span></span><br><span class="line">        order.processOrder();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 切换为已支付状态</span></span><br><span class="line">        order.setState(<span class="keyword">new</span> <span class="title class_">PaidOrderState</span>());</span><br><span class="line">        order.processOrder();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 切换为已发货状态</span></span><br><span class="line">        order.setState(<span class="keyword">new</span> <span class="title class_">ShippedOrderState</span>());</span><br><span class="line">        order.processOrder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述示例中，抽象状态类<code>OrderState</code>定义了一个<code>processOrder()</code>方法，具体状态类<code>NewOrderState</code>、<code>PaidOrderState</code>和<code>ShippedOrderState</code>分别实现了这个方法，封装了不同状态下的具体行为逻辑。<code>Order</code>类作为环境类，维护了当前状态对象的引用，并在<code>processOrder()</code>方法中委托给当前状态对象执行相应的行为。</p><p>客户端代码创建了一个订单对象<code>order</code>，初始状态为新订单状态，然后依次处理订单并切换状态，观察不同状态下的行为执行情况。</p><h4 id="类图-4"><a href="#类图-4" class="headerlink" title="类图"></a>类图</h4><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230702225657156.png" alt="image-20230702225657156"></p><h3 id="模式特征-4"><a href="#模式特征-4" class="headerlink" title="模式特征"></a>模式特征</h3><h4 id="优点-3"><a href="#优点-3" class="headerlink" title="优点"></a>优点</h4><ol><li>状态模式将对象的状态和行为进行了解耦，使得状态的变化可以独立于对象的行为变化。这提高了代码的可维护性和扩展性。</li><li>状态模式遵循开闭原则，可以通过添加新的具体状态类来增加新的状态，而无需修改现有的代码。</li><li>状态模式使得状态转换变得更加明确和可控。状态的切换逻辑集中在具体状态类中，不会分散在对象的各个方法中，使得代码更易理解和调试。</li><li>状态模式使得对象的状态变化可见，可以方便地观察和记录对象的状态变化历史。</li></ol><h4 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a>缺点</h4><ol><li>状态模式增加了系统中类的数量，特别是在具体状态类较多的情况下，可能会导致类的数量增加，增加了系统的复杂性。</li><li>如果状态转换较为复杂，可能会导致状态模式的实现变得复杂，需要维护大量的状态类和状态转换逻辑。</li><li>当状态较少且简单时，引入状态模式可能会带来不必要的复杂性，增加了代码的理解和维护成本。</li></ol><h2 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h2><h3 id="简介-5"><a href="#简介-5" class="headerlink" title="简介"></a>简介</h3><ul><li>用于将数据结构和对数据结构的操作分离开来，允许定义新的操作而无需修改已有的数据结构。</li></ul><h3 id="模式组成-4"><a href="#模式组成-4" class="headerlink" title="模式组成"></a>模式组成</h3><table><thead><tr><th>组成部分</th><th>描述</th></tr></thead><tbody><tr><td>元素（Element）</td><td>表示数据结构中的对象。它定义了一个接受访问者对象的方法，让访问者可以对自身进行操作。</td></tr><tr><td>具体元素（Concrete Element）</td><td>实现了元素接口的具体类。每个具体元素类都会实现自己的接受访问者的方法，并在其中调用访问者对象的操作方法。</td></tr><tr><td>访问者（Visitor）</td><td>定义了对元素进行操作的接口，其中包含了为每个具体元素类定义的操作方法。</td></tr><tr><td>具体访问者（Concrete Visitor）</td><td>实现了访问者接口的具体类。每个具体访问者类都会实现对应的操作方法，以便对具体元素进行相应的操作。</td></tr><tr><td>对象结构（Object Structure）</td><td>存储元素对象并提供访问者访问的接口。它可以是一个集合、列表、树或其他数据结构。</td></tr></tbody></table><h3 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h3><h4 id="code-5"><a href="#code-5" class="headerlink" title="code"></a>code</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 元素接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Element</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Visitor visitor)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体元素类A</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteElementA</span> <span class="keyword">implements</span> <span class="title class_">Element</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Visitor visitor)</span> &#123;</span><br><span class="line">        visitor.visitConcreteElementA(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operationA</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ConcreteElementA operation&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体元素类B</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteElementB</span> <span class="keyword">implements</span> <span class="title class_">Element</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Visitor visitor)</span> &#123;</span><br><span class="line">        visitor.visitConcreteElementB(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operationB</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ConcreteElementB operation&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问者接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Visitor</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">visitConcreteElementA</span><span class="params">(ConcreteElementA elementA)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">visitConcreteElementB</span><span class="params">(ConcreteElementB elementB)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体访问者类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteVisitor</span> <span class="keyword">implements</span> <span class="title class_">Visitor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visitConcreteElementA</span><span class="params">(ConcreteElementA elementA)</span> &#123;</span><br><span class="line">        elementA.operationA();</span><br><span class="line">        System.out.println(<span class="string">&quot;ConcreteVisitor visits ConcreteElementA&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visitConcreteElementB</span><span class="params">(ConcreteElementB elementB)</span> &#123;</span><br><span class="line">        elementB.operationB();</span><br><span class="line">        System.out.println(<span class="string">&quot;ConcreteVisitor visits ConcreteElementB&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象结构类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ObjectStructure</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Element&gt; elements = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addElement</span><span class="params">(Element element)</span> &#123;</span><br><span class="line">        elements.add(element);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Visitor visitor)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Element element : elements) &#123;</span><br><span class="line">            element.accept(visitor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建具体元素对象</span></span><br><span class="line">        <span class="type">ConcreteElementA</span> <span class="variable">elementA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteElementA</span>();</span><br><span class="line">        <span class="type">ConcreteElementB</span> <span class="variable">elementB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteElementB</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建对象结构并添加元素</span></span><br><span class="line">        <span class="type">ObjectStructure</span> <span class="variable">objectStructure</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectStructure</span>();</span><br><span class="line">        objectStructure.addElement(elementA);</span><br><span class="line">        objectStructure.addElement(elementB);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建具体访问者对象</span></span><br><span class="line">        <span class="type">Visitor</span> <span class="variable">visitor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteVisitor</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 对象结构接受访问者访问</span></span><br><span class="line">        objectStructure.accept(visitor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类图-5"><a href="#类图-5" class="headerlink" title="类图"></a>类图</h4><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230702232125374.png" alt="image-20230702232125374"></p><h3 id="模式特征-5"><a href="#模式特征-5" class="headerlink" title="模式特征"></a>模式特征</h3><h4 id="优点-4"><a href="#优点-4" class="headerlink" title="优点"></a>优点</h4><p>当讨论访问者模式时，可以列举一些其优点和缺点，以便全面评估该模式的适用性和潜在的问题。</p><p>优点：</p><ul><li>分离关注点：访问者模式可以将数据结构和操作分离开来，使得操作可以独立变化而不影响元素类的结构。这种分离可以提高代码的可维护性和可扩展性。</li><li>增加新操作更容易：通过定义新的访问者类，可以很容易地增加新的操作，而无需修改元素类的代码。这符合开闭原则，使系统更灵活。</li><li>集中相关操作：访问者模式可以将相关操作集中到访问者类中。这样，当需要对元素进行某个操作时，只需调用相应的访问者方法，而不需要在元素类中编写重复的操作代码。</li><li>增加新元素相对容易：如果需要增加新的元素类，只需创建相应的具体元素类并实现接受访问者的方法即可。无需修改现有的访问者类。</li></ul><h4 id="缺点-4"><a href="#缺点-4" class="headerlink" title="缺点"></a>缺点</h4><ul><li>增加新元素困难：在访问者模式中，如果需要增加新的访问者类，需要修改所有已有的元素类，为它们添加接受新访问者的方法。这可能会导致元素类的修改和代码的重复。</li><li>违反封装原则：访问者模式需要将具体元素类的内部结构暴露给访问者类，以便访问者能够进行操作。这可能违反了封装原则，降低了元素类的封装性。</li><li>增加系统复杂性：引入访问者模式会增加系统中的类和接口数量，增加了代码的复杂性和理解难度。这可能使得系统变得更加复杂，特别是对于简单的数据结构而言，使用访问者模式可能过于繁琐。</li></ul><h2 id="模块方法模式"><a href="#模块方法模式" class="headerlink" title="模块方法模式"></a>模块方法模式</h2><h3 id="简介-6"><a href="#简介-6" class="headerlink" title="简介"></a>简介</h3><ul><li>定义了一个操作中的算法的骨架。将一些步骤延迟到子类中实现。模板方块使得子类可以在不改变算法结构的情况下重新定义算法中某些步骤<h3 id="模式组成-5"><a href="#模式组成-5" class="headerlink" title="模式组成"></a>模式组成</h3></li></ul><table><thead><tr><th>模式组成</th><th>描述</th></tr></thead><tbody><tr><td>模板方法（Template Method）</td><td>定义了算法的骨架，将算法的步骤定义为一系列抽象操作或具体操作的调用顺序。这个方法可以包含预定义的操作和钩子方法。</td></tr><tr><td>具体方法（Concrete Method）</td><td>在模板方法中定义的具体操作，是算法的固定部分。</td></tr><tr><td>抽象方法（Abstract Method）</td><td>在模板方法中定义的抽象操作，由子类实现。这些方法可以有不同的实现，以满足特定的需求。</td></tr><tr><td>钩子方法（Hook Method）</td><td>在模板方法中定义的具体操作，子类可以选择性地覆盖或扩展。这些方法在模板方法中有默认实现，但可以在子类中进行修改。</td></tr><tr><td>抽象类（Abstract Class）</td><td>包含模板方法和抽象方法的抽象类。它定义了算法的骨架，并规定了具体操作和抽象操作的调用顺序。</td></tr><tr><td>具体类（Concrete Class）</td><td>继承抽象类并实现其中的抽象方法，完成算法的具体步骤。它可以覆盖钩子方法来定制算法的行为。</td></tr></tbody></table><h3 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h3><h4 id="code-6"><a href="#code-6" class="headerlink" title="code"></a>code</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 抽象类</span><br><span class="line">abstract class AbstractClass &#123;</span><br><span class="line">    // 模板方法</span><br><span class="line">    public void templateMethod() &#123;</span><br><span class="line">        // 调用抽象方法</span><br><span class="line">        operation1();</span><br><span class="line">        // 调用具体方法</span><br><span class="line">        operation2();</span><br><span class="line">        // 调用钩子方法</span><br><span class="line">        if (hookMethod()) &#123;</span><br><span class="line">            operation3();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 抽象方法</span><br><span class="line">    protected abstract void operation1();</span><br><span class="line"></span><br><span class="line">    // 具体方法</span><br><span class="line">    protected void operation2() &#123;</span><br><span class="line">        // 具体操作的实现</span><br><span class="line">        System.out.println(&quot;执行具体操作2&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 钩子方法</span><br><span class="line">    protected boolean hookMethod() &#123;</span><br><span class="line">        // 默认实现，子类可以选择性地覆盖该方法</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 抽象方法</span><br><span class="line">    protected abstract void operation3();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 具体类A</span><br><span class="line">class ConcreteClassA extends AbstractClass &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void operation1() &#123;</span><br><span class="line">        System.out.println(&quot;执行具体操作1（来自具体类A）&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void operation3() &#123;</span><br><span class="line">        System.out.println(&quot;执行具体操作3（来自具体类A）&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 具体类B</span><br><span class="line">class ConcreteClassB extends AbstractClass &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void operation1() &#123;</span><br><span class="line">        System.out.println(&quot;执行具体操作1（来自具体类B）&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected boolean hookMethod() &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void operation3() &#123;</span><br><span class="line">        System.out.println(&quot;执行具体操作3（来自具体类B）&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 测试代码</span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        AbstractClass instanceA = new ConcreteClassA();</span><br><span class="line">        instanceA.templateMethod();</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;-----------------&quot;);</span><br><span class="line"></span><br><span class="line">        AbstractClass instanceB = new ConcreteClassB();</span><br><span class="line">        instanceB.templateMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="类图-6"><a href="#类图-6" class="headerlink" title="类图"></a>类图</h4><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230702234441116.png" alt="image-20230702234441116"></p><h3 id="模式特征-6"><a href="#模式特征-6" class="headerlink" title="模式特征"></a>模式特征</h3><h4 id="优点-5"><a href="#优点-5" class="headerlink" title="优点"></a>优点</h4><ol><li>提供了一种框架或模板，用于定义算法的骨架，使得算法的具体步骤可以在子类中实现，提高了代码的可扩展性和复用性。</li><li>将算法的通用部分封装在模板方法中，具体实现延迟到子类中，使得算法的具体步骤可以灵活变化，而不影响算法的整体结构。</li><li>通过钩子方法，允许子类选择性地覆盖或扩展父类中的某些操作，从而实现个性化定制。</li><li>提高了代码的可维护性和可读性，将重复的代码逻辑放在模板方法中，避免了代码的重复编写。</li></ol><h4 id="缺点-5"><a href="#缺点-5" class="headerlink" title="缺点"></a>缺点</h4><ol><li>引入了抽象类和具体类之间的继承关系，增加了系统的复杂性。如果继承关系设计不当，可能会导致类的层次结构变得复杂，难以维护。</li><li>由于模板方法已经定义了算法的骨架，因此在一定程度上限制了子类的自由度，子类只能实现父类定义好的抽象方法。</li><li>如果算法的变化点过多，可能需要定义大量的抽象方法，增加了子类的实现工作量。</li><li>模板方法模式的设计初衷是为了定义算法的骨架，对于一些具有多个算法簇的情况，可能会导致类的爆炸性增长，不利于系统的扩展和维护。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设计模式-行为型&quot;&gt;&lt;a href=&quot;#设计模式-行为型&quot; class=&quot;headerlink&quot; title=&quot;设计模式-行为型&quot;&gt;&lt;/a&gt;设计模式-行为型&lt;/h1&gt;&lt;h2 id=&quot;观察者模式&quot;&gt;&lt;a href=&quot;#观察者模式&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="设计模式" scheme="https://kalyan-zitiu.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="https://kalyan-zitiu.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>MP</title>
    <link href="https://kalyan-zitiu.github.io/2023/05/06/mybatis/"/>
    <id>https://kalyan-zitiu.github.io/2023/05/06/mybatis/</id>
    <published>2023-05-06T09:32:04.000Z</published>
    <updated>2023-05-06T09:51:04.417Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MyBatis-Plus"><a href="#MyBatis-Plus" class="headerlink" title="MyBatis Plus"></a>MyBatis Plus</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>无侵入：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li><li>损耗小：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li><li>强大的 CRUD 操作：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li><li>支持 Lambda 形式调用：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li><li>支持主键自动生成：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li><li>支持 ActiveRecord 模式：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li><li>支持自定义全局通用操作：支持全局通用方法注入（ Write once, use anywhere ）</li><li>内置代码生成器：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li><li>内置分页插件：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li><li>分页插件支持多种数据库：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li><li>内置性能分析插件：可输出 Sql 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li><li>内置全局拦截插件：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作<h4 id="什么是MyBatisPlus"><a href="#什么是MyBatisPlus" class="headerlink" title="什么是MyBatisPlus"></a>什么是MyBatisPlus</h4></li><li>MyBatis是一款优秀的持久层框架，用于简化JDBC开发</li><li>MyBatisPlus是基于MyBatis框架基础上开发的增强型工具，皆在<strong>简化开发，提高效率</strong></li></ul><h4 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h4><ul><li>负责将数据保存倒数据库那一层代码</li><li>JavaEE三层架构：表现层，业务层，持久层</li></ul><h4 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h4><ul><li>框架就是一个半成品软件，是一套可重用的，通用的，软件基础代码模型</li><li>在框架的基础之上构建软件编写更加高效，规范，通用，可扩展</li></ul><h3 id="入门案列"><a href="#入门案列" class="headerlink" title="入门案列"></a>入门案列</h3><ul><li>SpringBoot整合MyBatis开发过程<ul><li>创建SpringBoot工程</li><li>勾选配置使用的技术</li><li>设置dataSource相关属性（JDBC参数）</li><li>定义数据层接口映射配置<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Spring:</span><br><span class="line">  datasource:</span><br><span class="line">    type: com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">    url: jdbc:mysql:<span class="comment">//localhost:3306/mybatisplus_db?serverTimezone = UTC</span></span><br><span class="line">    username: ？</span><br><span class="line">    password: ？</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;?&gt;&#123;</span><br><span class="line"><span class="meta">@select(&quot;select * from user where id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">getById</span><span class="params">(Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h4><h5 id="创建SpringBoot工程"><a href="#创建SpringBoot工程" class="headerlink" title="创建SpringBoot工程"></a>创建SpringBoot工程</h5><pre><code>![image-20230503171102161](https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230503171102161.png)</code></pre><h5 id="添加依赖MySQL-Driver"><a href="#添加依赖MySQL-Driver" class="headerlink" title="添加依赖MySQL Driver"></a>添加依赖MySQL Driver<img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230503171325952.png" alt="image-20230503171325952"></h5><h5 id="打开xml文件，手动添加mybatis-plus-boot-start依赖"><a href="#打开xml文件，手动添加mybatis-plus-boot-start依赖" class="headerlink" title="打开xml文件，手动添加mybatis-plus-boot-start依赖"></a>打开xml文件，手动添加mybatis-plus-boot-start依赖</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="mybatis-plus-boot-start"><a href="#mybatis-plus-boot-start" class="headerlink" title="mybatis-plus-boot-start"></a>mybatis-plus-boot-start</h6><p>这是Maven依赖，用于引入MyBatis Plus框架的快速启动器。MyBatis Plus是一个增强版的MyBatis框架，提供了许多MyBatis没有的方便实用的功能，例如自动代码生成、分页插件、多数据源支持、性能优化等。</p><p>在pom.xml中引入了这个依赖后，就可以开始使用MyBatis Plus。可以在配置文件中添加MyBatis Plus的配置，如：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">mybatis-plus:</span><br><span class="line">  typeAliasesPackage: com.example.demo.entity</span><br><span class="line">  mapperLocations: classpath:/mapper/*.xml</span><br><span class="line">  global-config:</span><br><span class="line">    db-config:</span><br><span class="line">      column-underscore: true</span><br><span class="line">      id-type: auto</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这里，typeAliasesPackage是指实体类所在的包，mapperLocations是指MyBatis mapper XML文件的位置，global-config是MyBatis Plus的全局配置，在这里修改了ID的生成策略和开启了下划线到驼峰命名的自动转换。</p><p>然后，可以像平常一样编写MyBatis mapper XML文件和DAO接口，如：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- demo.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.demo.dao.DemoDAO&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.example.demo.entity.DemoEntity&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;create_time&quot;</span> <span class="attr">property</span>=<span class="string">&quot;createTime&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;update_time&quot;</span> <span class="attr">property</span>=<span class="string">&quot;updateTime&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;listByParam&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BaseResultMap&quot;</span>&gt;</span></span><br><span class="line">        select * from demo</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span> and name = #&#123;name&#125; <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null&quot;</span>&gt;</span> and age = #&#123;age&#125; <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 其他的SQL语句... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">// DemoDAO.java</span><br><span class="line">@Mapper</span><br><span class="line">public interface DemoDAO extends BaseMapper<span class="tag">&lt;<span class="name">DemoEntity</span>&gt;</span> &#123;</span><br><span class="line">    List<span class="tag">&lt;<span class="name">DemoEntity</span>&gt;</span> listByParam(@Param(&quot;name&quot;) String name, @Param(&quot;age&quot;) Integer age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在编写DAO接口时，可以继承MyBatis Plus提供的BaseMapper&lt; T &gt;接口，该接口提供了许多便捷的CRUD方法。此外，也可以编写自定义SQL语句，既具有MyBatis的灵活性，又能充分利用MyBatis Plus提供的便利性。最后，在使用DAO接口时，可以像平常一样使用Spring的@Autowired注解来注入DAO对象，例如：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">private DemoDAO demoDAO;</span><br><span class="line"></span><br><span class="line">public void test() &#123;</span><br><span class="line">    QueryWrapper<span class="tag">&lt;<span class="name">DemoEntity</span>&gt;</span> queryWrapper = new QueryWrapper<span class="tag">&lt;&gt;</span>();</span><br><span class="line">    queryWrapper.eq(&quot;name&quot;, &quot;张三&quot;).eq(&quot;age&quot;, 25);</span><br><span class="line">    demoDAO.selectList(queryWrapper);</span><br><span class="line">    // TODO: 使用查询到的数据进行操作</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="打开xml文件，手动添加com-baomidou依赖"><a href="#打开xml文件，手动添加com-baomidou依赖" class="headerlink" title="打开xml文件，手动添加com.baomidou依赖"></a>打开xml文件，手动添加com.baomidou依赖</h6><p>这是Maven依赖，用于引入MyBatis Plus框架的快速启动器。MyBatis Plus是一个增强版的MyBatis框架，提供了许多MyBatis没有的方便实用的功能，例如自动代码生成、分页插件、多数据源支持、性能优化等。</p><p>在pom.xml中引入了这个依赖后，就可以开始使用MyBatis Plus。可以在配置文件中添加MyBatis Plus的配置，如：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">typeAliasesPackage:</span> <span class="string">com.example.demo.entity</span></span><br><span class="line">  <span class="attr">mapperLocations:</span> <span class="string">classpath:/mapper/*.xml</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">column-underscore:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span></span><br></pre></td></tr></table></figure><p>在这里，typeAliasesPackage是指实体类所在的包，mapperLocations是指MyBatis mapper XML文件的位置，global-config是MyBatis Plus的全局配置，在这里修改了ID的生成策略和开启了下划线到驼峰命名的自动转换。</p><p>然后，可以像平常一样编写MyBatis mapper XML文件和DAO接口，如：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- demo.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.demo.dao.DemoDAO&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.example.demo.entity.DemoEntity&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;create_time&quot;</span> <span class="attr">property</span>=<span class="string">&quot;createTime&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;update_time&quot;</span> <span class="attr">property</span>=<span class="string">&quot;updateTime&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;listByParam&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BaseResultMap&quot;</span>&gt;</span></span><br><span class="line">        select * from demo</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span> and name = #&#123;name&#125; <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != null&quot;</span>&gt;</span> and age = #&#123;age&#125; <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 其他的SQL语句... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// DemoDAO.java</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DemoDAO</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;DemoEntity&gt; &#123;</span><br><span class="line">    List&lt;DemoEntity&gt; <span class="title function_">listByParam</span><span class="params">(<span class="meta">@Param(&quot;name&quot;)</span> String name, <span class="meta">@Param(&quot;age&quot;)</span> Integer age)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在编写DAO接口时，可以继承MyBatis Plus提供的BaseMapper&lt; T &gt;接口，该接口提供了许多便捷的CRUD方法。此外，也可以编写自定义SQL语句，既具有MyBatis的灵活性，又能充分利用MyBatis Plus提供的便利性。</p><p>最后，在使用DAO接口时，可以像平常一样使用Spring的@Autowired注解来注入DAO对象，例如：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> DemoDAO demoDAO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    QueryWrapper&lt;DemoEntity&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;张三&quot;</span>).eq(<span class="string">&quot;age&quot;</span>, <span class="number">25</span>);</span><br><span class="line">    demoDAO.selectList(queryWrapper);</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 使用查询到的数据进行操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MyBatis Plus提供了许多易用的API，通过使用它们可以大大提升代码的开发效率。</p><h5 id="配置resources"><a href="#配置resources" class="headerlink" title="配置resources"></a>配置resources</h5><ol><li>添加datasource<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatisplus?serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">?</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">?</span></span><br></pre></td></tr></table></figure><h5 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以上图为例</span></span><br><span class="line">ackage domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="comment">//这里用到了lombok，后续会讲</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h3><table><thead><tr><th>操作类型</th><th>方法调用示例</th><th>SQL示例</th></tr></thead><tbody><tr><td>插入操作</td><td><code>mapper.insert(entity);</code></td><td><code>INSERT INTO table (column1, column2, ...) VALUES (?, ?, ...);</code></td></tr><tr><td>更新操作</td><td><code>mapper.updateById(entity);</code></td><td><code>UPDATE table SET column1=?, column2=?, ... WHERE id=?;</code></td></tr><tr><td>删除操作</td><td><code>mapper.deleteById(1);</code></td><td><code>DELETE FROM table WHERE id=?;</code></td></tr><tr><td>查询单个对象</td><td><code>mapper.selectById(1);</code></td><td><code>SELECT * FROM table WHERE id=?;</code></td></tr><tr><td>查询多个对象</td><td><code>mapper.selectList(null);</code></td><td><code>SELECT * FROM table;</code></td></tr><tr><td>条件查询</td><td><code>mapper.selectList(queryWrapper);</code></td><td><code>SELECT * FROM table WHERE column1=value1 AND column2&gt;value2;</code></td></tr><tr><td>分页查询</td><td><code>mapper.selectPage(page, queryWrapper);</code></td><td><code>SELECT COUNT(1) FROM table; SELECT * FROM table WHERE column1=value1 LIMIT startIndex, pageSize;</code></td></tr></tbody></table><h3 id="实体类开发工具lombok"><a href="#实体类开发工具lombok" class="headerlink" title="实体类开发工具lombok"></a>实体类开发工具lombok</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//依赖导入</span></span><br><span class="line">&lt;!-- Lombok --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">1.18</span><span class="number">.20</span>&lt;/version&gt;</span><br><span class="line">    &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>以下是 Lombok 常用的注解和对应的方法：</p><table><thead><tr><th>注解</th><th>解释</th><th>方法示例</th></tr></thead><tbody><tr><td>@Data</td><td>自动生成各种方法，包括 getter/setter/toString/hashCode/equals</td><td><code>@Data class T &#123;private String name;&#125;</code></td></tr><tr><td>@Getter/@Setter</td><td>自动生成 getter/setter 方法</td><td><code>@Getter @Setter private String name;</code></td></tr><tr><td>@ToString</td><td>自动生成 toString 方法</td><td><code>@ToString(of = &#123;&quot;name&quot;, &quot;age&quot;&#125;) class T &#123;private String name; private int age;&#125;</code></td></tr><tr><td>@EqualsAndHashCode</td><td>自动生成 hashCode 和 equals 方法</td><td><code>@EqualsAndHashCode(of = &#123;&quot;name&quot;, &quot;age&quot;&#125;) class T &#123;private String name; private int age;&#125;</code></td></tr><tr><td>@NoArgsConstructor</td><td>自动生成无参构造方法</td><td><code>@NoArgsConstructor class T &#123;&#125;</code></td></tr><tr><td>@RequiredArgsConstructor</td><td>自动生成必须参数的构造方法</td><td><code>@RequiredArgsConstructor class T &#123; private final String name; private final int age; &#125;</code></td></tr><tr><td>@AllArgsConstructor</td><td>自动生成全参构造方法</td><td><code>@AllArgsConstructor class T &#123; private String name; private int age; &#125;</code></td></tr><tr><td>@Builder</td><td>自动生成建造者模式方法，用于链式调用</td><td><code>@Builder class T &#123;private String name; private int age;&#125;</code></td></tr><tr><td>@Slf4j</td><td>自动生成 log 变量，方便日志输出</td><td><code>@Slf4j class T &#123;private static final Logger log = LoggerFactory.getLogger(T.class);&#125;</code></td></tr></tbody></table><p>使用 Lombok 可以大大简化 POJO 类编写的过程。不需要手动编写重复的 getter/setter/toString/hashCode/equals 等方法，可以提高开发效率。同时，Builder 注解生成的建造者模式方法可以使代码更加简洁易读。</p><h3 id="标准分页功能"><a href="#标准分页功能" class="headerlink" title="标准分页功能"></a>标准分页功能</h3><h4 id="boot配置日志开启"><a href="#boot配置日志开启" class="headerlink" title="boot配置日志开启"></a>boot配置日志开启</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">mybatis-plus:</span><br><span class="line"> configuration:</span><br><span class="line">  log-impl: org.apache.ibatis.logging.stdout.StdOutImpl</span><br></pre></td></tr></table></figure><h4 id="基本方法"><a href="#基本方法" class="headerlink" title="基本方法"></a>基本方法</h4><p>下面是 <code>IPage&lt;T&gt;</code> 接口中常用的方法：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>List&lt;T&gt; getRecords()</code></td><td>获取当前页数据</td></tr><tr><td><code>long getTotal()</code></td><td>获取总记录数</td></tr><tr><td><code>IPage&lt;T&gt; setTotal(long total)</code></td><td>设置总记录数，并返回当前对象</td></tr><tr><td><code>long getSize()</code></td><td>获取当前页大小</td></tr><tr><td><code>IPage&lt;T&gt; setSize(long size)</code></td><td>设置当前页大小，并返回当前对象</td></tr><tr><td><code>long getCurrent()</code></td><td>获取当前页数</td></tr><tr><td><code>IPage&lt;T&gt; setCurrent(long current)</code></td><td>设置当前页数，并返回当前对象</td></tr><tr><td><code>long getPages()</code></td><td>获取总页数</td></tr><tr><td><code>IPage&lt;T&gt; setPages(long pages)</code></td><td>设置总页数，并返回当前对象</td></tr><tr><td><code>List&lt;OrderItem&gt; orders()</code></td><td>获取排序字段信息</td></tr><tr><td><code>IPage&lt;T&gt; setOrders(List&lt;OrderItem&gt; orders)</code></td><td>设置排序字段信息，并返回当前对象</td></tr><tr><td><code>boolean optimizeCountSql()</code></td><td>是否进行 count SQL 优化</td></tr><tr><td><code>IPage&lt;T&gt; setOptimizeCountSql(boolean optimizeCountSql)</code></td><td>设置 count SQL 优化标识，并返回当前对象</td></tr><tr><td><code>boolean isSearchCount()</code></td><td>是否进行 count SQL 查询</td></tr><tr><td><code>IPage&lt;T&gt; setSearchCount(boolean isSearchCount)</code></td><td>设置 count SQL 查询标识，并返回当前对象</td></tr><tr><td><code>Map&lt;String, Object&gt; condition()</code></td><td>获取查询条件信息</td></tr><tr><td><code>IPage&lt;T&gt; setCondition(Map&lt;String, Object&gt; condition)</code></td><td>设置查询条件信息，并返回当前对象</td></tr><tr><td><code>List&lt;T&gt; getRecords(boolean optimizeCountSql, boolean isSearchCount)</code></td><td>获取当前页数据，并选择是否进行 count SQL 优化和 count SQL 查询</td></tr><tr><td><code>IPage&lt;T&gt; convert(Function&lt;? super T, ? extends U&gt; converter)</code></td><td>转换当前 <code>IPage&lt;T&gt;</code> 为 <code>IPage&lt;U&gt;</code></td></tr></tbody></table><h4 id="MP拦截器"><a href="#MP拦截器" class="headerlink" title="MP拦截器"></a>MP拦截器</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//类似于一个插件功能，但是不实现的话就可能实现不了分页功能</span></span><br><span class="line"><span class="keyword">package</span> com.example.mybatisplus.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MPConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mpInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1.定义MP拦截器</span></span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">mpInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        <span class="comment">//2.添加具体拦截器</span></span><br><span class="line">        mpInterceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> mpInterceptor;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//同样能够实现上面的方法</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.example.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisConfig</span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> PaginationInterceptor <span class="title function_">paginationInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PaginationInterceptor</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="sql语句打印配置，运行日志"><a href="#sql语句打印配置，运行日志" class="headerlink" title="sql语句打印配置，运行日志"></a>sql语句打印配置，运行日志</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">mybatis-plus:</span><br><span class="line">  configuration:</span><br><span class="line">    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl</span><br></pre></td></tr></table></figure><h4 id="杀掉多余得数据显示"><a href="#杀掉多余得数据显示" class="headerlink" title="杀掉多余得数据显示"></a>杀掉多余得数据显示</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">logback.xml</span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">//在Spring工程生成原生得xml进行配置</span><br><span class="line">  global-config:</span><br><span class="line">    banner: false</span><br><span class="line">  main:</span><br><span class="line">    banner-mode: off</span><br></pre></td></tr></table></figure><h3 id="DQL编程控制"><a href="#DQL编程控制" class="headerlink" title="DQL编程控制"></a>DQL编程控制</h3><h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><ul><li>MyBatisPlus将书写复杂的SQL查询条件进行封装<br><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230504224141560.png" alt="image-20230504224141560"></li><li>其中Wrapper&lt; T &gt;就是对查询条件的封装</li></ul><h4 id="添加QueryWrapper对象"><a href="#添加QueryWrapper对象" class="headerlink" title="添加QueryWrapper对象"></a>添加QueryWrapper对象</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">QueryWrapper</span> <span class="variable">qw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>();</span><br><span class="line">qw.lt(<span class="string">&quot;age&quot;</span>,<span class="number">18</span>);</span><br></pre></td></tr></table></figure><table><thead><tr><th>方法名</th><th>解释</th></tr></thead><tbody><tr><td><code>eq()</code></td><td>等于</td></tr><tr><td><code>ne()</code></td><td>不等于</td></tr><tr><td><code>gt()</code></td><td>大于</td></tr><tr><td><code>ge()</code></td><td>大于等于</td></tr><tr><td><code>lt()</code></td><td>小于</td></tr><tr><td><code>le()</code></td><td>小于等于</td></tr><tr><td><code>between()</code></td><td>在两个值之间</td></tr><tr><td><code>notBetween()</code></td><td>不在两个值之间</td></tr><tr><td><code>like()</code></td><td>模糊查询</td></tr><tr><td><code>notLike()</code></td><td>不匹配某个值的模糊查询</td></tr><tr><td><code>isNull()</code></td><td>为空</td></tr><tr><td><code>isNotNull()</code></td><td>不为空</td></tr><tr><td><code>in()</code></td><td>包含在某个集合中</td></tr><tr><td><code>notIn()</code></td><td>不包含在某个集合中</td></tr><tr><td><code>groupBy()</code></td><td>分组</td></tr><tr><td><code>orderByAsc()</code></td><td>升序排序</td></tr><tr><td><code>orderByDesc()</code></td><td>降序排序</td></tr></tbody></table><h4 id="lambda格式按条件查询"><a href="#lambda格式按条件查询" class="headerlink" title="lambda格式按条件查询"></a>lambda格式按条件查询</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//其一</span></span><br><span class="line">QueryWrapper&lt; User &gt; qw = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt; User &gt;();</span><br><span class="line">qw.lamda().lt(User::getAge,<span class="number">18</span>);</span><br><span class="line">List&lt;User&gt; userList = userDao.selectList(qw);</span><br><span class="line">System.out.println(userList);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//其二</span></span><br><span class="line">LambadQueryWrapper&lt;User&gt; lqw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;();</span><br><span class="line">QueryWrapper&lt;User&gt; qw = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;();</span><br><span class="line">qw.lambda().lt(User::getAge,<span class="number">10</span>);</span><br><span class="line">List&lt;User&gt; userList = userDao.selectList(qw);</span><br><span class="line">System.out.println(userList);</span><br></pre></td></tr></table></figure><h4 id="null值处理"><a href="#null值处理" class="headerlink" title="null值处理"></a>null值处理</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">UserQuery</span> <span class="variable">uq</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserQuery</span>();</span><br><span class="line">uq.setAge2(<span class="number">30</span>);</span><br><span class="line">lqw.lt(<span class="literal">null</span>!=uq.getAge2,User::getAge,uq.getAge2());</span><br><span class="line">List&lt;User&gt; userList = userDao.selectList(lqw);</span><br><span class="line">System.out.println(userList);</span><br></pre></td></tr></table></figure><h3 id="查询投影"><a href="#查询投影" class="headerlink" title="查询投影"></a>查询投影</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//普通</span></span><br><span class="line">QueryWrapper&lt;User&gt; lqw = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>();</span><br><span class="line">lqw.select(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;age&quot;</span>,<span class="string">&quot;tel&quot;</span>);</span><br><span class="line">List&lt;User&gt; userList = userDao.selectList(lqw);</span><br><span class="line">System.out.println(userList);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LambdaQueryWrapper&lt;User&gt; lqw = <span class="keyword">new</span> <span class="title class_">LanbdaQueryWrapper</span>&lt;User&gt;();</span><br><span class="line">lqw.select(User::getId,User::getName,User::getAge);</span><br><span class="line">List&lt;User&gt; userList = userDao.selectList(lqw);</span><br><span class="line">System.out.println(userList);</span><br></pre></td></tr></table></figure><h3 id="查询投影-1"><a href="#查询投影-1" class="headerlink" title="查询投影"></a>查询投影</h3><p>MyBatisPlus 查询投影是一种查询方式，主要用于查询部分实体类属性（字段），而不是整个实体类的所有属性。它提高了查询效率，并减少了网络传输和内存消耗。下面是 MyBatisPlus 查询投影的总结：</p><ol><li><p>查询投影可以通过在实体类中定义一个 VO（View Object）类来实现。这个 VO 类只包含我们需要查询的那些属性，而不是整个实体类。</p></li><li><p>MyBatisPlus 提供了多种查询方式来实现投影查询，包括普通查询、条件构造器查询、Lambda 表达式查询等。</p></li><li><p>在使用 MyBatisPlus 进行查询时，可以使用 <code>selectOne()</code>、<code>selectList()</code>、<code>selectMaps()</code> 等方法实现投影查询。</p></li><li><p>在投影查询中，我们可以使用 <code>select()</code> 方法指定要查询的字段，也可以使用 <code>excludeColumns()</code> 方法排除要查询的字段。</p></li><li><p>投影查询可以使用 <code>@SqlParser(filter = true)</code> 注解来关闭逻辑删除功能。这个注解告诉 MyBatisPlus 不要将逻辑删除的行返回给查询结果列表。</p></li><li><p>对于投影查询结果的处理方式，我们可以选择将结果直接映射到实体类中，或者将结果映射到 Map 对象中。</p></li></ol><h3 id="查询条件设置"><a href="#查询条件设置" class="headerlink" title="查询条件设置"></a>查询条件设置</h3><p>MyBatisPlus 提供了多种设置查询条件的方式，以下是 MyBatisPlus 查询条件设置的总结：</p><ol><li><p>使用实体类作为查询条件。MyBatisPlus 可以自动地将实体类中的非空字段作为查询条件生成 SQL 语句，并将查询结果映射到实体类中。如果存在多个非空字段，它们之间的默认关系是 <code>AND</code>，可以通过注解方式更改其关系为 <code>OR</code>。</p></li><li><p>使用 <code>Wrapper</code> 对象作为查询条件。<code>Wrapper</code> 类是 MyBatisPlus 提供的一种条件构造器，它可以实现 SQL 语句中常见的条件设置操作，例如 <code>eq()</code>（等于）、<code>ne()</code>（不等于）、<code>like()</code>（模糊查询）等。可以使用 Lambda 表达式来构造 <code>Wrapper</code> 对象，也可以直接使用传统的 SQL 片段。</p></li><li><p>使用 <code>QueryWrapper</code> 类作为查询条件。<code>QueryWrapper</code> 是 MyBatisPlus 提供的一种常用条件构造器，可以用于设置 <code>WHERE</code> 条件、排序条件、分组条件等。它支持的查询方式比 <code>Wrapper</code> 更加灵活，例如支持 <code>in()</code>（包含）、<code>between()</code>（在两个值之间）等操作。</p></li><li><p>使用 <code>UpdateWrapper</code> 类作为更新条件。<code>UpdateWrapper</code> 可以用于设置 <code>SET</code> 条件，与 <code>QueryWrapper</code> 类似，也支持 Lambda 表达式和传统的 SQL 片段。</p></li><li><p>使用 <code>LambdaQueryWrapper</code>、<code>LambdaUpdateWrapper</code> 等 Lambda 类型的查询方式，实现更加简洁的条件设置，例如 <code>lambdaQuery().eq(User::getId, 1)</code>。</p></li></ol><h3 id="映射匹配兼容性"><a href="#映射匹配兼容性" class="headerlink" title="映射匹配兼容性"></a>映射匹配兼容性</h3><p>MyBatisPlus 映射匹配兼容性主要指 MyBatisPlus 在进行映射操作时，与传统 MyBatis XML 映射文件的兼容性问题。以下是 MyBatisPlus 映射匹配兼容性的总结：</p><ol><li><p>MyBatisPlus 支持与传统 MyBatis XML 映射文件共存，并且支持使用 <code>@MapperScan</code> 注解扫描所有的 Mapper 接口。</p></li><li><p>MyBatisPlus 中内置了多种自动映射配置方式，包括 <code>AUTO</code>（自动按列名匹配）、<code>FULL</code>（自动映射所有实体属性）、<code>NONE</code>（不进行自动映射）等。</p></li><li><p>MyBatisPlus 还支持自定义类型处理器、全局配置、实体类表名映射、字段名映射等灵活的映射配置方式。</p></li><li><p>在使用 MyBatisPlus 进行开发时，需要注意一些 XML 映射文件中的配置不能与 MyBatisPlus 的自动映射方式冲突，例如 <code>resultMap</code>、<code>association</code>、<code>collection</code> 等配置，需要进行合理的调整。</p></li><li><p>对于一些特殊场景，例如需要进行多表关联查询、复杂的查询构造，或者需要使用 MyBatis 动态 SQL 等功能时，可以继续使用传统的 XML 映射文件进行开发。</p></li></ol><table><thead><tr><th>注解名称</th><th>说明</th><th>应用举例</th></tr></thead><tbody><tr><td><code>@TableId</code></td><td>主键字段的映射注解，用于标注实体类中主键字段</td><td><code>@TableId(value = &quot;id&quot;, type = IdType.AUTO)</code> 表示将 <code>id</code> 字段设置为自增长主键</td></tr><tr><td><code>@TableField</code></td><td>字段映射注解，在实体类字段上使用，用于设置字段与数据库表中列的映射关系</td><td><code>@TableField(value = &quot;name&quot;, exist = true, update = &quot;false&quot;)</code> 表示将 <code>name</code> 字段映射到数据库表的 <code>name</code> 列上，且为非更新字段</td></tr><tr><td><code>@TableName</code></td><td>表名映射注解，用于标注实体类对应的数据库表名</td><td><code>@TableName(&quot;user&quot;)</code> 表示将实体类 <code>User</code> 映射到数据库表 <code>user</code> 上</td></tr><tr><td><code>@KeySequence</code></td><td>序列映射注解，用于标注主键对应的序列名称</td><td><code>@KeySequence(value = &quot;myseq&quot;, clazz = Integer.class)</code> 表示将主键对应的序列名称设为 <code>myseq</code>，并指定序列类型为 <code>Integer</code></td></tr></tbody></table><h3 id="id生成策略"><a href="#id生成策略" class="headerlink" title="id生成策略"></a>id生成策略</h3><table><thead><tr><th>ID 生成策略</th><th>说明</th></tr></thead><tbody><tr><td><code>ASSIGN_ID</code></td><td>自定义 ID 生成器，需要在代码中自行生成 ID 值</td></tr><tr><td><code>ASSIGN_UUID</code></td><td>UUID 生成器，使用 JDK 自带的 <code>UUID.randomUUID()</code> 方法生成 UUID</td></tr><tr><td><code>ASSIGN_ID_WORKER</code></td><td>雪花算法 ID 生成器，使用 Twitter 的 Snowflake 算法生成全局唯一的 ID</td></tr><tr><td><code>IDENTITY</code></td><td>基于数据库的自增长 ID 生成器，数据库类型需要支持自增长</td></tr><tr><td><code>NONE</code></td><td>未设置 ID 生成器</td></tr><tr><td><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230506120115982.png" alt="image-20230506120115982"></td><td></td></tr></tbody></table><h4 id="雪花算法"><a href="#雪花算法" class="headerlink" title="雪花算法"></a>雪花算法</h4><p>雪花算法（Snowflake）是一种唯一ID生成算法。它由Twitter公司开发，用于生成全局唯一的ID。雪花算法的核心思想是在64位的ID中，对不同的部分按照规定的位数进行位移和组合，并使用timestamp作为序列的一部分，可以保证生成的ID全局唯一，且越小的timestamp的序列号越小。</p><p>雪花算法的ID格式如下：</p><p>其中：</p><p>第1位（最高位）未使用，可以根据需求使用，一般为0；<br>第2<del>42位表示timestamp，精确到毫秒级别，总共可以表示2^41-1个数字，约69年；<br>第43</del>52位是机器ID，用于表示生成ID的机器，最多支持2^10=1024个机器；<br>第53~64位是序列号，用于表示同一毫秒内生成的不同ID，支持每毫秒生成2^12-1个ID。<br>使用雪花算法生成的ID具有很高的性能和稳定性，适合用于分布式系统中，例如分布式ID生成、分布式锁等场景。</p><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230506115329072.png" alt="image-20230506115329072"></p><h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><ol><li>在表中添加版本控制字段</li></ol><p>首先，需要在表中添加一个版本控制字段，例如在 User 表中添加一个 version 字段：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> version <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><ol><li>在实体类中添加版本控制字段</li></ol><p>接下来，在实体类中添加版本控制字段：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableId(type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Version</span> <span class="comment">// 添加版本控制注解</span></span><br><span class="line">    <span class="keyword">private</span> Integer version;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略 getter 和 setter 方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在实体类中，需要添加 <code>@Version</code> 注解，来标识该字段为版本控制字段。</p><ol><li>在 Mapper 文件中使用乐观锁</li></ol><p>在 Mapper 文件中进行更新操作时，可以利用 MyBatisPlus 提供的 <code>@Version</code> 注解自动实现乐观锁功能。以下是一个更新 User 表的简单示例：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.example.entity.User&quot;</span>&gt;</span></span><br><span class="line">    update user</span><br><span class="line">    set name = #&#123;name&#125;,</span><br><span class="line">        age = #&#123;age&#125;,</span><br><span class="line">        email = #&#123;email&#125;,</span><br><span class="line">        version = version + 1</span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line">      and version = #&#123;version&#125; <span class="comment">&lt;!-- 添加乐观锁判断 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="MyBatisPlus代码生成器"><a href="#MyBatisPlus代码生成器" class="headerlink" title="MyBatisPlus代码生成器"></a>MyBatisPlus代码生成器</h3><p>MyBatisPlus 提供了一个便捷的代码生成器，可以通过该生成器自动生成 Entity、Mapper、Service 和 Controller 等基础代码，从而加快开发速度，提高效率。以下是 MyBatisPlus 代码生成器的简要总结：</p><ol><li>配置生成器</li></ol><p>在 <code>pom.xml</code> 文件中，添加以下依赖：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同时，在 <code>application.yml</code> 或 <code>application.properties</code> 配置文件中，添加自己的数据库连接信息：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/db_name?characterEncoding=utf8&amp;useUnicode=true&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure><ol start="2"><li>配置代码生成器参数</li></ol><p>在项目中创建一个 <code>generator</code> 包，并创建一个 <code>CodeGenerator</code> 类，用于配置代码生成器参数：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CodeGenerator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 代码生成器相关配置</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">projectPath</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;user.dir&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">authorName</span> <span class="operator">=</span> <span class="string">&quot;your name&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] tables = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;table_name&quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">packagePath</span> <span class="operator">=</span> <span class="string">&quot;com.example&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据源配置</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/db_name&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">driverName</span> <span class="operator">=</span> <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">AutoGenerator</span> <span class="variable">mpg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AutoGenerator</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 全局配置</span></span><br><span class="line">        <span class="type">GlobalConfig</span> <span class="variable">gc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GlobalConfig</span>();</span><br><span class="line">        gc.setOutputDir(projectPath + <span class="string">&quot;/src/main/java&quot;</span>);</span><br><span class="line">        gc.setAuthor(authorName);</span><br><span class="line">        gc.setOpen(<span class="literal">false</span>);</span><br><span class="line">        gc.setEntityName(<span class="string">&quot;%s&quot;</span>);</span><br><span class="line">        gc.setMapperName(<span class="string">&quot;%sMapper&quot;</span>);</span><br><span class="line">        gc.setXmlName(<span class="string">&quot;%sMapper&quot;</span>);</span><br><span class="line">        gc.setServiceName(<span class="string">&quot;%sService&quot;</span>);</span><br><span class="line">        gc.setServiceImplName(<span class="string">&quot;%sServiceImpl&quot;</span>);</span><br><span class="line">        gc.setControllerName(<span class="string">&quot;%sController&quot;</span>);</span><br><span class="line">        gc.setSwagger2(<span class="literal">false</span>);</span><br><span class="line">        mpg.setGlobalConfig(gc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数据源配置</span></span><br><span class="line">        <span class="type">DataSourceConfig</span> <span class="variable">dsc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceConfig</span>();</span><br><span class="line">        dsc.setUrl(url);</span><br><span class="line">        dsc.setDriverName(driverName);</span><br><span class="line">        dsc.setUsername(username);</span><br><span class="line">        dsc.setPassword(password);</span><br><span class="line">        mpg.setDataSource(dsc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 包配置</span></span><br><span class="line">        <span class="type">PackageConfig</span> <span class="variable">pc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PackageConfig</span>();</span><br><span class="line">        pc.setParent(packagePath);</span><br><span class="line">        pc.setEntity(<span class="string">&quot;entity&quot;</span>);</span><br><span class="line">        pc.setMapper(<span class="string">&quot;mapper&quot;</span>);</span><br><span class="line">        pc.setXml(<span class="string">&quot;mapper.xml&quot;</span>);</span><br><span class="line">        pc.setService(<span class="string">&quot;service&quot;</span>);</span><br><span class="line">        pc.setServiceImpl(<span class="string">&quot;service.impl&quot;</span>);</span><br><span class="line">        pc.setController(<span class="string">&quot;controller&quot;</span>);</span><br><span class="line">        mpg.setPackageInfo(pc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 策略配置</span></span><br><span class="line">        <span class="type">StrategyConfig</span> <span class="variable">strategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StrategyConfig</span>();</span><br><span class="line">        strategy.setNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        strategy.setColumnNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        strategy.setControllerMappingHyphenStyle(<span class="literal">true</span>);</span><br><span class="line">        strategy.setEntityLombokModel(<span class="literal">true</span>);</span><br><span class="line">        strategy.setTablePrefix(<span class="string">&quot;t_&quot;</span>);</span><br><span class="line">        strategy.setInclude(tables);</span><br><span class="line">        strategy.setVersionFieldName(<span class="string">&quot;version&quot;</span>);</span><br><span class="line">        strategy.setRestControllerStyle(<span class="literal">true</span>);</span><br><span class="line">        strategy.setLogicDeleteFieldName(<span class="string">&quot;deleted&quot;</span>);</span><br><span class="line">        mpg.setStrategy(strategy);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行生成</span></span><br><span class="line">        mpg.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在以上代码中，我们可以通过配置相关参数来指定生成器的输出路径、作者名、表名、数据源信息、包路径、策略配置等。在执行 <code>AutoGenerator</code> 对象的 <code>execute()</code> 方法后，MyBatisPlus 就会自动生成相应的 Entity、Mapper、Service 和 Controller 等基础代码，生成的文件都可以在指定的输出路径中找到。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;MyBatis-Plus&quot;&gt;&lt;a href=&quot;#MyBatis-Plus&quot; class=&quot;headerlink&quot; title=&quot;MyBatis Plus&quot;&gt;&lt;/a&gt;MyBatis Plus&lt;/h2&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;</summary>
      
    
    
    
    <category term="开发工具" scheme="https://kalyan-zitiu.github.io/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="开发工具" scheme="https://kalyan-zitiu.github.io/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>2023425</title>
    <link href="https://kalyan-zitiu.github.io/2023/04/25/2023425%E8%BA%AB%E9%AB%98%E6%8E%92%E5%BA%8F/"/>
    <id>https://kalyan-zitiu.github.io/2023/04/25/2023425%E8%BA%AB%E9%AB%98%E6%8E%92%E5%BA%8F/</id>
    <published>2023-04-25T08:50:04.000Z</published>
    <updated>2023-04-27T08:54:31.262Z</updated>
    
    <content type="html"><![CDATA[<h1 id="身高排序"><a href="#身高排序" class="headerlink" title="身高排序"></a>身高排序</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个字符串数组names,和一个由<strong>互不相同</strong> 的正整数组成的数组heights.两个数组的长度均为n.对每个下标 i,name[i]和heights[i] 表示第i个人的名字和身高.降序返回对应的名字数组names.</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>在 HashMap 中存储了身高和人名信息。接下来，利用 entrySet() 方法获取映射关系集合，并将这个集合转换成 List 类型的 entryList。接着调用了 Collections.sort() 方法来对 entryList 进行排序。通过 getKey() 和 getValue() 方法分别获取身高和人名信息，最终按照从小到大排序存储到字符串数组 result 中并返回。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String[] sortPeople(String[] names, <span class="type">int</span>[] heights) &#123;</span><br><span class="line">    HashMap&lt;Integer,String&gt; storage = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer,String&gt;();</span><br><span class="line">    <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> names.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line">        storage.put(Integer.valueOf(heights[i]),names[i]);  <span class="comment">// 将身高和对应的人名信息存储到 HashMap 中</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 排序 HashMap，输出结果</span></span><br><span class="line">    List&lt;Map.Entry&lt;Integer, String&gt;&gt; entryList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Map.Entry&lt;Integer, String&gt;&gt;(storage.entrySet());</span><br><span class="line">    Collections.sort(entryList, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Map.Entry&lt;Integer, String&gt;&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Map.Entry&lt;Integer, String&gt; o1, Map.Entry&lt;Integer, String&gt; o2)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> o2.getKey() - o1.getKey();</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    String[] result = <span class="keyword">new</span> <span class="title class_">String</span>[length];</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;Integer, String&gt; entry : entryList) &#123;</span><br><span class="line">        result[i++] = entry.getValue();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Collections是怎么对List里面的Map进行排序的"><a href="#Collections是怎么对List里面的Map进行排序的" class="headerlink" title="Collections是怎么对List里面的Map进行排序的."></a>Collections是怎么对List里面的Map进行排序的.</h2><ol><li>Collections.sort()方法可以对实现Comparable接口或使用自定义比较器Comparator的类进行排序.由于List中的元素是Map,我们需要使用Comparator来指定排序规则.<br>如:<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Map&lt;String, Object&gt;&gt; listMap = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">Map&lt;String, Object&gt; map1 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map1.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">map1.put(<span class="string">&quot;age&quot;</span>, <span class="number">25</span>);</span><br><span class="line">listMap.add(map1);</span><br><span class="line"></span><br><span class="line">Map&lt;String, Object&gt; map2 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map2.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;李四&quot;</span>);</span><br><span class="line">map2.put(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>);</span><br><span class="line">listMap.add(map2);</span><br><span class="line"></span><br><span class="line">Map&lt;String, Object&gt; map3 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map3.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;王五&quot;</span>);</span><br><span class="line">map3.put(<span class="string">&quot;age&quot;</span>, <span class="number">30</span>);</span><br><span class="line">listMap.add(map3);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用匿名内部类 Comparator 进行排序</span></span><br><span class="line">Collections.sort(listMap, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Map&lt;String, Object&gt;&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Map&lt;String, Object&gt; o1, Map&lt;String, Object&gt; o2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">age1</span> <span class="operator">=</span> (<span class="type">int</span>) o1.get(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">age2</span> <span class="operator">=</span> (<span class="type">int</span>) o2.get(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> age1 - age2; <span class="comment">// 正序排列</span></span><br><span class="line">        <span class="comment">// return age2 - age1; // 倒序排列</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"><span class="keyword">for</span> (Map&lt;String, Object&gt; map : listMap) &#123;</span><br><span class="line">    System.out.println(map.get(<span class="string">&quot;name&quot;</span>) + <span class="string">&quot;：&quot;</span> + map.get(<span class="string">&quot;age&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">Leisure articles about work and life</summary>
    
    
    
    <category term="练习" scheme="https://kalyan-zitiu.github.io/categories/%E7%BB%83%E4%B9%A0/"/>
    
    
    <category term="算法" scheme="https://kalyan-zitiu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>设计模型-结构型模式</title>
    <link href="https://kalyan-zitiu.github.io/2023/04/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%93%E6%9E%84%E5%9E%8B/"/>
    <id>https://kalyan-zitiu.github.io/2023/04/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%93%E6%9E%84%E5%9E%8B/</id>
    <published>2023-04-24T14:00:00.000Z</published>
    <updated>2023-04-24T14:20:27.418Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式-结构型模式"><a href="#设计模式-结构型模式" class="headerlink" title="设计模式-结构型模式"></a>设计模式-结构型模式</h1><h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul><li>将一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口不匹配而无法在一起工作的两个类能够在一起工作。</li><li>适配器模式，定义一个包装类，用于包装不兼容接口的对象</li><li>把一个类的接口变换成客户端所期待的另一种接口，从而使原本接口不匹配而无法一起工作的两个类能够在一起工作。适配器的模式的形式分别：为类的适配器和对象的适配器<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">包装类=适配器Adapter</span><br><span class="line">被包装类对象 = 适配器Adaptee = 被适配的类</span><br></pre></td></tr></table></figure></li></ul><h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><ul><li>原版由于接口不兼容而不能一起工作的那些类可以一起工作。</li><li>透明简单，客户端可以调用同一个接口，因而对客户端来说是透明的</li><li>复用性，需要实现现有的类，此类的接口不符合系统的需要，那么通过适配器模式可以让这些功能得到更好的复用</li><li>扩展性，实现适配器功能的时候，通过调用自己开发的功能，从而自然的扩展系统的功能</li><li>解耦性，将目标类和适配者类解耦，通过引入一个适配器类重用现有的适配者类，而无需修改源码</li><li>符合开闭原则，同一个适配器可以把适配者类和它的子类都适配到目标接口；可以为不同的目标接口实现不同的适配器，而不需要修改适配类。<h3 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h3></li></ul><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202303272341418.png" alt="img"></p><h3 id="举例实例"><a href="#举例实例" class="headerlink" title="举例实例"></a>举例实例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Target</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//这是源类Adapteee没有的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Request</span><span class="params">()</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Adaptee</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">SpecificRequest</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//适配器Adapter继承自Adaptee，同时又实现了目标(Target)接口。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Adapter</span> <span class="keyword">extends</span> <span class="title class_">Adaptee</span> <span class="keyword">implements</span> <span class="title class_">Target</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//目标接口要求调用Request()这个方法名，但源类Adaptee没有方法Request()</span></span><br><span class="line">    <span class="comment">//因此适配器补充上这个方法名</span></span><br><span class="line">    <span class="comment">//但实际上Request()只是调用源类Adaptee的SpecificRequest()方法的内容</span></span><br><span class="line">    <span class="comment">//所以适配器只是将SpecificRequest()方法作了一层封装，封装成Target可以调用的Request()而已</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Request</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.SpecificRequest();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdapterPattern</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Target</span> <span class="variable">mAdapter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Adapter</span>()；</span><br><span class="line">        mAdapter.Request（）;</span><br><span class="line">     </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul><li>过多的使用适配器会让系统非常凌乱，不易整体进行把握。</li></ul><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ul><li>系统需要复用现有类，而该类接口不符合系统的需求，可以使用适配器模式使得原本由于接口不兼容而不能一起工作的类一起工作。</li><li>多个组件功能类似，接口不统一且可能会经常切换时候，可以使用适配器模式，使得客户端额可以统一的接口使用他们。</li></ul><h2 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><ul><li>抽象部分与它的实现部分分离，使它们都可以独立的变化。</li><li>抽取其中一个维度并使之成为独立的类层次</li><li>在某个类中添加一个指向某一属性对象的引用成员变量。</li></ul><h3 id="模式组成"><a href="#模式组成" class="headerlink" title="模式组成"></a>模式组成</h3><table><thead><tr><th>组成</th><th>作用</th></tr></thead><tbody><tr><td>抽象类</td><td>定义抽象类的接口，定义了一个Implementor实现类接口的对象斌可以维护其对象</td></tr><tr><td>提炼抽象类</td><td>扩充抽象类定义的接口，通常属于具体类，实现抽象类中声明的抽象业务方法，在提炼抽象类中，能够调用在实现类接口的业务方法</td></tr><tr><td>实现类接口</td><td>这个接口不一定要与抽象类的接口完全一致，事实上这两个接口可以完全不同，可以仅仅提供基本操作，而抽象类接口可以实现更多复杂的操作。</td></tr><tr><td>具体实现类</td><td>具体实现实现类接口，在不同的具体实现类中提供基本操作的不同实现，在程序运行时候，具体实现类的对象将会替换其父类对象，提供给抽象类具体的业务操作方法。</td></tr></tbody></table><h3 id="解决问题-1"><a href="#解决问题-1" class="headerlink" title="解决问题"></a>解决问题</h3><ul><li>提高系统的可扩充性，在两个变化维度中任意扩展一个维度，都不需要修改原有系统</li><li>有的时候类似于多继承方案，但是多继承方案违背了类的单一职责原则，复用性比较差，而且多继承的结构类中的个数非常庞大，桥接模式是比多继承方案更好的解决方法。</li></ul><h3 id="UML类图-1"><a href="#UML类图-1" class="headerlink" title="UML类图"></a>UML类图</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202303272227473.png" alt="在这里插入图片描述"></p><h3 id="举例实例-1"><a href="#举例实例-1" class="headerlink" title="举例实例"></a>举例实例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用于画各种颜色的接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ColorAPI</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BlueColorAPI</span> <span class="keyword">implements</span> <span class="title class_">ColorAPI</span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;蓝色&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedColorAPI</span> <span class="keyword">implements</span> <span class="title class_">ColorAPI</span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;红色&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Shape</span>&#123;</span><br><span class="line"><span class="keyword">protected</span> ColorAPI colorAPI;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDrawAPI</span><span class="params">(ColorAPI colorAPI)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.colorAPI = colorAPI;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.print(<span class="string">&quot;圆形&quot;</span>);</span><br><span class="line">colorAPI.paint();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.print(<span class="string">&quot;长方形&quot;</span>);</span><br><span class="line">colorAPI.paint();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[]args)</span>&#123;</span><br><span class="line"><span class="comment">//创建一个圆形</span></span><br><span class="line"><span class="type">Shape</span> <span class="variable">shape</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Circle</span>();</span><br><span class="line"><span class="comment">//给圆形蓝色的颜料</span></span><br><span class="line">shape.setDrawAPI(<span class="keyword">new</span> <span class="title class_">BlueColorAPI</span>());</span><br><span class="line"><span class="comment">//上色</span></span><br><span class="line">shape.draw();</span><br><span class="line"><span class="comment">//创建一个长方形</span></span><br><span class="line"><span class="type">Shape</span> <span class="variable">shape1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Rectangle</span>();</span><br><span class="line"><span class="comment">//给长方形上红色的颜料</span></span><br><span class="line">shape1.setDrawAP(<span class="keyword">new</span> <span class="title class_">RedColorAPI</span>());</span><br><span class="line"><span class="comment">//上色</span></span><br><span class="line">shape1.draw();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果这个时候客户需要一个绿色的三角形那么只需要新增一个三角形类即可。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Triangle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;三角形&quot;</span>);</span><br><span class="line">colorAPI.paint();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GreenColorAPI</span> <span class="keyword">implements</span> <span class="title class_">ColorAPI</span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">()</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;绿色&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span>&#123;</span><br><span class="line"><span class="type">Shape</span> <span class="variable">shape</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Triangle</span>();</span><br><span class="line">shape.setDrawAPI(<span class="keyword">new</span> <span class="title class_">GreenColorAPI</span>());</span><br><span class="line">shape.draw();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h3><ul><li>桥接模式的引入会增加系统的理解与设计的难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计以及编程</li><li>桥接模式要求正确的识别出系统中两个独立变化的维度，因此其使用范围具有一定的局限性。</li></ul><h2 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h2><h3 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h3><ul><li>不改变现有对象结构的情况下，动态地给对象增加一些职责的模式，它属于对象结构型模式</li></ul><h3 id="解决问题-2"><a href="#解决问题-2" class="headerlink" title="解决问题"></a>解决问题</h3><ul><li>装饰器是继承的有力补充，比继承灵活，在不改变原有对象的情况下，动态地给一个对象扩展功能，即插即用。</li><li>通过不用装饰类以及这些装饰类的排列组合，可以实现不同效果</li><li>装饰器模式完全遵守开闭原则</li></ul><h3 id="模式组成-1"><a href="#模式组成-1" class="headerlink" title="模式组成"></a>模式组成</h3><table><thead><tr><th align="left">组成</th><th>作用</th></tr></thead><tbody><tr><td align="left">抽象构件</td><td>定义一个抽象接口以规范准备接收附加责任的对象</td></tr><tr><td align="left">具体构件</td><td>实现抽象构件，通过装饰角色为其添加一些职责</td></tr><tr><td align="left">抽象装饰</td><td>继承抽象构件，并包含具体构件的实例，可以通过其子类扩展具体构件的功能</td></tr><tr><td align="left">具体装饰</td><td>实现抽象装饰的相关方法，并给具体构件对象添加附加责任。</td></tr></tbody></table><h3 id="UML类图-2"><a href="#UML类图-2" class="headerlink" title="UML类图"></a>UML类图</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202303290039331.png" alt="image-20230329003915296"></p><h3 id="举例实例-2"><a href="#举例实例-2" class="headerlink" title="举例实例"></a>举例实例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DecoratorPattern</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Component</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteComponent</span>();</span><br><span class="line">        p.operation();</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------------------&quot;</span>);</span><br><span class="line">        <span class="type">Component</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteDecorator</span>(p);</span><br><span class="line">        d.operation();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//抽象构件角色</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Component</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//具体构件角色</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteComponent</span> <span class="keyword">implements</span> <span class="title class_">Component</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConcreteComponent</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;创建具体构件角色&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用具体构件角色的方法operation()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//抽象装饰角色</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Decorator</span> <span class="keyword">implements</span> <span class="title class_">Component</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Component component;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Decorator</span><span class="params">(Component component)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.component = component;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span> &#123;</span><br><span class="line">        component.operation();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//具体装饰角色</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteDecorator</span> <span class="keyword">extends</span> <span class="title class_">Decorator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConcreteDecorator</span><span class="params">(Component component)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(component);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.operation();</span><br><span class="line">        addedFunction();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addedFunction</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;为具体构件角色增加额外的功能addedFunction()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="问题-2"><a href="#问题-2" class="headerlink" title="问题"></a>问题</h3><ul><li>装饰器模式会增加许多子类，过度使用会增加程序的复杂性。<h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><h3 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h3></li><li>为其他对象提供一种代理以控制这个对象的访问。</li></ul><h3 id="解决问题-3"><a href="#解决问题-3" class="headerlink" title="解决问题"></a>解决问题</h3><ul><li>职责清晰</li><li>高扩展，只要实现了接口，都可以用代理</li><li>智能化，动态代理。</li></ul><h3 id="UML图"><a href="#UML图" class="headerlink" title="UML图"></a>UML图</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202303290100829.png" alt="image-20230329010025796"></p><h3 id="举例实例-3"><a href="#举例实例-3" class="headerlink" title="举例实例"></a>举例实例</h3><h4 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h4><ol><li>以租房为例，我们一般用租房软件、找中介或者找房东。这里的中介就是代理者。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个提供了租房方法的接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IRentHouse</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">rentHouse</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义租房的实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RentHouse</span> <span class="keyword">implements</span> <span class="title class_">IRentHouse</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rentHouse</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;租了一间房子。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//租房找中介</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IntermediaryProxy</span> <span class="keyword">implements</span> <span class="title class_">IRentHouse</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IRentHouse rentHouse;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">IntermediaryProxy</span><span class="params">(IRentHouse irentHouse)</span>&#123;</span><br><span class="line">        rentHouse = irentHouse;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rentHouse</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;交中介费&quot;</span>);</span><br><span class="line">        rentHouse.rentHouse();</span><br><span class="line">        System.out.println(<span class="string">&quot;中介负责维修管理&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//定义租房</span></span><br><span class="line">        <span class="type">IRentHouse</span> <span class="variable">rentHouse</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RentHouse</span>();</span><br><span class="line">        <span class="comment">//定义中介</span></span><br><span class="line">        <span class="type">IRentHouse</span> <span class="variable">intermediary</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IntermediaryProxy</span>(rentHouse);</span><br><span class="line">        <span class="comment">//中介租房</span></span><br><span class="line">        intermediary.rentHouse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h2><h3 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h3>又叫部分整体模式，是用于把一组相似的对象当作一个单一的对象。组合模式依据树形结构来组合对象，用来表示部分以及整体层次，他创建了对象组的树形结构<h3 id="模式组成-2"><a href="#模式组成-2" class="headerlink" title="模式组成"></a>模式组成</h3></li></ol><table><thead><tr><th>角色</th><th>解释</th></tr></thead><tbody><tr><td>抽象构件</td><td>为树叶构件和树枝构件声明公共接口，实现默认行为</td></tr><tr><td>树叶构件</td><td>没有子节点，用于继承或实现抽象构件，是树状结构最底层。</td></tr><tr><td>树枝构件</td><td>有子节点，是组合中的分支节点。</td></tr></tbody></table><h3 id="解决问题-4"><a href="#解决问题-4" class="headerlink" title="解决问题"></a>解决问题</h3><ul><li>一致处理单个对象和组合对象，无须关心处理的是单个对象还是组合对象。</li><li>容易在组合体内加入新的对象，客户端不会因为加入了新的对象而更改源代码。</li></ul><h3 id="问题-3"><a href="#问题-3" class="headerlink" title="问题"></a>问题</h3><ul><li>设计复杂，需要一定时间理清层次关系</li><li>不容易限制容器中的构件</li><li>不容易用继承的方法来增加构件的新功能</li></ul><h3 id="举例实现"><a href="#举例实现" class="headerlink" title="举例实现"></a>举例实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象构件</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这里使用接口或者抽象类都可以的</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Region</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> region</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Region region)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> region</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Region region)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前节点下面的节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">abstract</span> Region <span class="title function_">getChild</span><span class="params">(<span class="type">int</span> i)</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通知，上面下个政策一级一级的传递，一般都有一个动作方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">notice</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 树叶地区</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeafRegion</span> <span class="keyword">extends</span> <span class="title class_">Region</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>  String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LeafRegion</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Region region)</span> &#123;</span><br><span class="line"><span class="comment">//叶子节点没有下级</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Region region)</span> &#123;</span><br><span class="line"><span class="comment">//叶子节点没有下级</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    Region <span class="title function_">getChild</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">    <span class="comment">//叶子节点没有下级</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">notice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 最底层的接到了通知</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 树枝地区</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CompositeRegion</span> <span class="keyword">extends</span> <span class="title class_">Region</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用来盛放子节点</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Region&gt; children = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Region region)</span> &#123;</span><br><span class="line">        children.add(region);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Region region)</span> &#123;</span><br><span class="line">        children.remove(region);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    Region <span class="title function_">getChild</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">notice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">/*通知下级所有的部门，下级如果是树枝的话继续通知，这是个递归操作*/</span></span><br><span class="line">        <span class="keyword">for</span> (Region child : children) &#123;</span><br><span class="line">            child.notice();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h2><h3 id="简介-5"><a href="#简介-5" class="headerlink" title="简介"></a>简介</h3><ul><li>为子系统的一组接口提供一个一致的界面，定义了一个高层接口，这个接口使得这一子系统更加容易使用</li></ul><h3 id="模式组成-3"><a href="#模式组成-3" class="headerlink" title="模式组成"></a>模式组成</h3><table><thead><tr><th>角色类型</th><th>作用解释</th></tr></thead><tbody><tr><td>外观(Facade)</td><td>封装系统底层功能，为客户端提供简单易用的接口</td></tr><tr><td>子系统类(SubSystem)</td><td>提供系统底层的具体实现细节</td></tr><tr><td>客户端(Client)</td><td>调用外观对象提供的简单接口，使用系统底层功能而无需了解其具体实现</td></tr></tbody></table><h3 id="解决问题-5"><a href="#解决问题-5" class="headerlink" title="解决问题"></a>解决问题</h3><ul><li>降低访问复杂系统的内部子系统时的复杂度，简化个护短之间的接口。</li><li>减少系统的互相依赖，提高灵活性，提高安全性。<h3 id="问题-4"><a href="#问题-4" class="headerlink" title="问题"></a>问题</h3></li><li>不符合开闭原则</li></ul><h3 id="举例实现-1"><a href="#举例实现-1" class="headerlink" title="举例实现"></a>举例实现</h3><ol><li>假设你现在需要购买一台电脑，在购买这个过程中，有很多不同的步骤需要完成，如选择操作系统、购买CPU、选择显示屏尺寸等等。然而，如果你并不关心电脑内部如何工作，而只关注它的整体性能和使用方式，那么外观模式就可以被用来简化这个过程。</li></ol><p>具体地说，一个电脑厂商可能会实现一个电脑购买外观(Facade)，它将 CPU 购买、内存配置、显示器选择、操作系统安装等操作封装在一起，提供一个简单易用的接口让用户来购买电脑。对于客户端而言，只需要调用外观对象提供的购买接口就可以了，而不必了解具体的硬件和软件实现细节，大大简化了购买电脑的流程。当内部实现发生变化时，只需修改外观类即可，对客户端代码没有影响。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ComputerPurchaseFacade</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CPU cpu;</span><br><span class="line">    <span class="keyword">private</span> Memory memory;</span><br><span class="line">    <span class="keyword">private</span> Display display;</span><br><span class="line">    <span class="keyword">private</span> OS os;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ComputerPurchaseFacade</span><span class="params">()</span> &#123;</span><br><span class="line">        cpu = <span class="keyword">new</span> <span class="title class_">CPU</span>();</span><br><span class="line">        memory = <span class="keyword">new</span> <span class="title class_">Memory</span>();</span><br><span class="line">        display = <span class="keyword">new</span> <span class="title class_">Display</span>();</span><br><span class="line">        os = <span class="keyword">new</span> <span class="title class_">OS</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyComputer</span><span class="params">(<span class="type">int</span> cpuType, <span class="type">int</span> memorySize, <span class="type">int</span> displaySize, <span class="type">int</span> osType)</span> &#123;</span><br><span class="line">        cpu.selectCPU(cpuType);</span><br><span class="line">        memory.setMemorySize(memorySize);</span><br><span class="line">        display.selectDisplay(displaySize);</span><br><span class="line">        os.installOS(osType);</span><br><span class="line">        System.out.println(<span class="string">&quot;Your computer has been purchased!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CPU</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectCPU</span><span class="params">(<span class="type">int</span> type)</span> &#123;</span><br><span class="line">        <span class="comment">// 选择不同种类的CPU</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Memory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMemorySize</span><span class="params">(<span class="type">int</span> size)</span> &#123;</span><br><span class="line">        <span class="comment">// 配置内存大小</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Display</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectDisplay</span><span class="params">(<span class="type">int</span> size)</span> &#123;</span><br><span class="line">        <span class="comment">// 选择不同尺寸的显示器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OS</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">installOS</span><span class="params">(<span class="type">int</span> type)</span> &#123;</span><br><span class="line">        <span class="comment">// 安装不同类型的操作系统</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ComputerPurchaseFacade</span> <span class="variable">facade</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComputerPurchaseFacade</span>();</span><br><span class="line">        facade.buyComputer(<span class="number">1</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ol><li>为一个复杂的子系统提高逻辑支持</li><li>调用多个子系统完成逻辑</li></ol><h2 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h2><h3 id="简介-6"><a href="#简介-6" class="headerlink" title="简介"></a>简介</h3><ul><li>有两类对象：共享的享元对象和非共享的外部状态对象。享元对象包含内部状态和外部状态两部分，其中内部状态是不变的，可以被多个享元对象共享；外部状态是变化的，不能被共享，每个对象都需要单独维护。</li><li>将原本需要大量创建的相似对象合并为较少的共享对象，这样可以节省内存空间，并提高程序的运行效率。</li></ul><h3 id="解决问题-6"><a href="#解决问题-6" class="headerlink" title="解决问题"></a>解决问题</h3><ul><li>减少系统内部资源开销，通过对象共享，减少系统创建对象的数量，降低内存的开销</li><li>提高系统性能，减少垃圾回收机制的次数</li></ul><h3 id="问题-5"><a href="#问题-5" class="headerlink" title="问题"></a>问题</h3><ul><li>对象共享会导致程序逻辑复杂化。原来对象自己拥有的内部状态和外部状态现在需要从外部导入。</li><li>对象共享是有限制的，即那些可以共享的对象需要满足一定的条件，否则无法实现对象的共享。</li></ul><h3 id="模式组成-4"><a href="#模式组成-4" class="headerlink" title="模式组成"></a>模式组成</h3><table><thead><tr><th>角色类型</th><th>作用解释</th></tr></thead><tbody><tr><td>抽象享元角色（Flyweight）</td><td>定义享元对象的接口及需要缓存的数据，充当所有具体享元类的基类。</td></tr><tr><td>具体享元角色（ConcreteFlyweight）</td><td>实现抽象享元角色所定义的接口，同时需要为内部状态增加存储空间。并且可以接受外部状态（容易变化的状态），并根据外部状态进行相应的业务逻辑处理。</td></tr><tr><td>非共享具体享元角色（UnsharedConcreteFlyweight）</td><td>通常不会出现单独的非共享具体享元角色，因为非共享具体享元角色与单纯的享元模式没有什么区别。</td></tr><tr><td>享元工厂角色（FlyweightFactory）</td><td>提供一个用于管理享元对象的工厂类。主要用于享元对象的创建和缓存，实现对象的复用，减少对象的创建次数，节省内存空间。</td></tr><tr><td>客户端角色（Client）</td><td>通过享元工厂角色获取具体的享元角色，并访问具体享元角色中的相关业务方法。</td></tr></tbody></table><h3 id="举例实现-2"><a href="#举例实现-2" class="headerlink" title="举例实现"></a>举例实现</h3><ol><li>我们正在开发一个棋类游戏，游戏中有大量的棋子需要被使用。不同的棋子有不同的颜色和形状，但是棋子的功能（如移动、吃子等）都是一样的。我们可以复用相同颜色和形状的棋子对象，避免重复创建棋子导致内存资源的浪费，提高系统的性能。</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//棋子的共享接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ChessPiece</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setPosition</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//维护了颜色和形状的内部状态，位置等可变状态外部传入</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteChessPiece</span> <span class="keyword">implements</span> <span class="title class_">ChessPiece</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line">    <span class="keyword">private</span> String shape;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConcreteChessPiece</span><span class="params">(String color, String shape)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">        <span class="built_in">this</span>.shape = shape;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPosition</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        System.out.println(String.format(<span class="string">&quot;Set position for %s %s chess to (%d,%d)&quot;</span>, color, shape, x, y));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(String.format(<span class="string">&quot;Draw %s %s chess&quot;</span>, color, shape));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//管理棋子对象并进行复用。</span></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChessPieceFactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, ChessPiece&gt; chessPieces = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ChessPiece <span class="title function_">getChessPiece</span><span class="params">(String color, String shape)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> color + shape;</span><br><span class="line">        <span class="keyword">if</span> (chessPieces.containsKey(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span> chessPieces.get(key);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">ChessPiece</span> <span class="variable">piece</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteChessPiece</span>(color, shape);</span><br><span class="line">            chessPieces.put(key, piece);</span><br><span class="line">            <span class="keyword">return</span> piece;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//客户端</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="type">ChessPiece</span> <span class="variable">piece</span> <span class="operator">=</span> ChessPieceFactory.getChessPiece(<span class="string">&quot;red&quot;</span>, <span class="string">&quot;circle&quot;</span>);</span><br><span class="line">    piece.setPosition(i, <span class="number">0</span>);</span><br><span class="line">    piece.draw();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设计模式-结构型模式&quot;&gt;&lt;a href=&quot;#设计模式-结构型模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式-结构型模式&quot;&gt;&lt;/a&gt;设计模式-结构型模式&lt;/h1&gt;&lt;h2 id=&quot;适配器模式&quot;&gt;&lt;a href=&quot;#适配器模式&quot; class=&quot;he</summary>
      
    
    
    
    <category term="设计模式" scheme="https://kalyan-zitiu.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="https://kalyan-zitiu.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Kalyan的训练计划</title>
    <link href="https://kalyan-zitiu.github.io/2023/04/20/Kalyan%E7%9A%84%E5%81%A5%E8%BA%AB%E7%AC%94%E8%AE%B0/"/>
    <id>https://kalyan-zitiu.github.io/2023/04/20/Kalyan%E7%9A%84%E5%81%A5%E8%BA%AB%E7%AC%94%E8%AE%B0/</id>
    <published>2023-04-20T04:30:34.000Z</published>
    <updated>2023-04-23T13:49:57.878Z</updated>
    
    <content type="html"><![CDATA[<h2 id="胸"><a href="#胸" class="headerlink" title="胸"></a>胸</h2><h3 id="训练计划"><a href="#训练计划" class="headerlink" title="训练计划"></a>训练计划</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423210444548.png" alt="image-20230423210444548"></p><h3 id="蝴蝶肌夹胸"><a href="#蝴蝶肌夹胸" class="headerlink" title="蝴蝶肌夹胸"></a>蝴蝶肌夹胸</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423002229315.png" alt="image-20230423002229315"></p><h3 id="平板卧推"><a href="#平板卧推" class="headerlink" title="平板卧推"></a>平板卧推</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423002522177.png" alt="image-20230423002522177"></p><h3 id="上斜哑铃飞鸟"><a href="#上斜哑铃飞鸟" class="headerlink" title="上斜哑铃飞鸟"></a>上斜哑铃飞鸟</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423002305022.png" alt="image-20230423002305022"></p><h3 id="杠铃上斜卧推"><a href="#杠铃上斜卧推" class="headerlink" title="杠铃上斜卧推"></a>杠铃上斜卧推</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423002830127.png" alt="image-20230423002830127"></p><h3 id="龙门架夹下胸"><a href="#龙门架夹下胸" class="headerlink" title="龙门架夹下胸"></a>龙门架夹下胸</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423003136604.png" alt="image-20230423003136604"></p><h3 id="双杠臂屈伸"><a href="#双杠臂屈伸" class="headerlink" title="双杠臂屈伸"></a>双杠臂屈伸</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423003029827.png" alt="image-20230423003029827"></p><h2 id="背"><a href="#背" class="headerlink" title="背"></a>背</h2><h3 id="训练计划-1"><a href="#训练计划-1" class="headerlink" title="训练计划"></a>训练计划</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423210334836.png" alt="image-20230423210334836"></p><h3 id="高位下拉"><a href="#高位下拉" class="headerlink" title="高位下拉"></a>高位下拉</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423164327463.png" alt="image-20230423164327463"></p><h3 id="坐姿划船"><a href="#坐姿划船" class="headerlink" title="坐姿划船"></a>坐姿划船</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423205735398.png" alt="image-20230423205735398"></p><h3 id="直臂下拉"><a href="#直臂下拉" class="headerlink" title="直臂下拉"></a>直臂下拉</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423205851519.png" alt="image-20230423205851519"></p><h3 id="窄距高位下拉"><a href="#窄距高位下拉" class="headerlink" title="窄距高位下拉"></a>窄距高位下拉</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423205942885.png" alt="image-20230423205942885"></p><h3 id="俯身划船"><a href="#俯身划船" class="headerlink" title="俯身划船"></a>俯身划船</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423210151270.png" alt="image-20230423210151270"></p><h3 id="宽距坐姿划船"><a href="#宽距坐姿划船" class="headerlink" title="宽距坐姿划船"></a>宽距坐姿划船</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423210236422.png" alt="image-20230423210236422"></p><h2 id="腿"><a href="#腿" class="headerlink" title="腿"></a>腿</h2><h3 id="训练计划-2"><a href="#训练计划-2" class="headerlink" title="训练计划"></a>训练计划</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423211817734.png" alt="image-20230423211817734"></p><h3 id="坐姿腿屈伸"><a href="#坐姿腿屈伸" class="headerlink" title="坐姿腿屈伸"></a>坐姿腿屈伸</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423210829948.png" alt="image-20230423210829948"></p><h3 id="深蹲"><a href="#深蹲" class="headerlink" title="深蹲"></a>深蹲</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423210950628.png" alt="image-20230423210950628"></p><h3 id="倒蹬机腿举"><a href="#倒蹬机腿举" class="headerlink" title="倒蹬机腿举"></a>倒蹬机腿举</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423211530323.png" alt="image-20230423211530323"></p><h3 id="俯卧腿弯举（腰部不用力，屁股不撅）"><a href="#俯卧腿弯举（腰部不用力，屁股不撅）" class="headerlink" title="俯卧腿弯举（腰部不用力，屁股不撅）"></a>俯卧腿弯举（腰部不用力，屁股不撅）</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423211715526.png" alt="image-20230423211715526"></p><h2 id="肩"><a href="#肩" class="headerlink" title="肩"></a>肩</h2><h3 id="训练计划-3"><a href="#训练计划-3" class="headerlink" title="训练计划"></a>训练计划</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423212631090.png" alt="image-20230423212631090"></p><h3 id="史密斯推肩"><a href="#史密斯推肩" class="headerlink" title="史密斯推肩"></a>史密斯推肩</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423212110581.png" alt="image-20230423212110581"></p><h3 id="哑铃侧平举"><a href="#哑铃侧平举" class="headerlink" title="哑铃侧平举"></a>哑铃侧平举</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423212222249.png" alt="image-20230423212222249"></p><h3 id="蝴蝶机反向飞鸟"><a href="#蝴蝶机反向飞鸟" class="headerlink" title="蝴蝶机反向飞鸟"></a>蝴蝶机反向飞鸟</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423212320016.png" alt="image-20230423212320016"></p><h3 id="绳索前平举"><a href="#绳索前平举" class="headerlink" title="绳索前平举"></a>绳索前平举</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423212411999.png" alt="image-20230423212411999"></p><h3 id="绳索面拉"><a href="#绳索面拉" class="headerlink" title="绳索面拉"></a>绳索面拉</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423212537833.png" alt="image-20230423212537833"></p><h2 id="小臂"><a href="#小臂" class="headerlink" title="小臂"></a>小臂</h2><h3 id="训练计划-4"><a href="#训练计划-4" class="headerlink" title="训练计划"></a>训练计划</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423213030936.png" alt="image-20230423213030936"></p><h3 id="哑铃手腕弯举"><a href="#哑铃手腕弯举" class="headerlink" title="哑铃手腕弯举"></a>哑铃手腕弯举</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423212818644.png" alt="image-20230423212818644"></p><h3 id="反向哑铃手腕弯举"><a href="#反向哑铃手腕弯举" class="headerlink" title="反向哑铃手腕弯举"></a>反向哑铃手腕弯举</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423212903715.png" alt="image-20230423212903715"></p><h3 id="站姿体后杠铃手腕弯举"><a href="#站姿体后杠铃手腕弯举" class="headerlink" title="站姿体后杠铃手腕弯举"></a>站姿体后杠铃手腕弯举</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423212958122.png" alt="image-20230423212958122"></p><h2 id="二三头"><a href="#二三头" class="headerlink" title="二三头"></a>二三头</h2><h3 id="训练计划-5"><a href="#训练计划-5" class="headerlink" title="训练计划"></a>训练计划</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423214003078.png" alt="image-20230423214003078"></p><h3 id="杠铃弯举"><a href="#杠铃弯举" class="headerlink" title="杠铃弯举"></a>杠铃弯举</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423213308228.png" alt="image-20230423213308228"></p><h3 id="直杠臂屈伸"><a href="#直杠臂屈伸" class="headerlink" title="直杠臂屈伸"></a>直杠臂屈伸</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423213746793.png" alt="image-20230423213746793"></p><h3 id="哑铃颈后臂屈伸"><a href="#哑铃颈后臂屈伸" class="headerlink" title="哑铃颈后臂屈伸"></a>哑铃颈后臂屈伸</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423213730391.png" alt="image-20230423213730391"></p><h3 id="牧师椅杠铃弯举"><a href="#牧师椅杠铃弯举" class="headerlink" title="牧师椅杠铃弯举"></a>牧师椅杠铃弯举</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423213700395.png" alt="image-20230423213700395"></p><h3 id="绳索颈后臂屈伸"><a href="#绳索颈后臂屈伸" class="headerlink" title="绳索颈后臂屈伸"></a>绳索颈后臂屈伸</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230423213846270.png" alt="image-20230423213846270"></p><h3 id="练前篇"><a href="#练前篇" class="headerlink" title="练前篇"></a>练前篇</h3><ul><li>训练前一小时,一勺蛋白粉</li><li>训练前半小时上氮泵和肌酸</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;胸&quot;&gt;&lt;a href=&quot;#胸&quot; class=&quot;headerlink&quot; title=&quot;胸&quot;&gt;&lt;/a&gt;胸&lt;/h2&gt;&lt;h3 id=&quot;训练计划&quot;&gt;&lt;a href=&quot;#训练计划&quot; class=&quot;headerlink&quot; title=&quot;训练计划&quot;&gt;&lt;/a&gt;训练计划&lt;/h3&gt;&lt;p</summary>
      
    
    
    
    <category term="分享" scheme="https://kalyan-zitiu.github.io/categories/%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="训练" scheme="https://kalyan-zitiu.github.io/tags/%E8%AE%AD%E7%BB%83/"/>
    
  </entry>
  
  <entry>
    <title>JDBC</title>
    <link href="https://kalyan-zitiu.github.io/2023/04/18/JDBC/"/>
    <id>https://kalyan-zitiu.github.io/2023/04/18/JDBC/</id>
    <published>2023-04-18T11:00:00.000Z</published>
    <updated>2023-04-22T08:14:23.188Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JDBC学习笔记"><a href="#JDBC学习笔记" class="headerlink" title="JDBC学习笔记"></a>JDBC学习笔记</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>JDBC(Java DataBase Connectivity)是Java编程语言中连接数据库的一种标准规范, 其提供了访问许多不同类型数据库的标准化方法，使得Java程序员能够很容易地使用数据库和执行SQL查询，从而方便地与任何数据库进行交互。</p><ul><li>本质上JDBC就是用来操作关系型数据库的一套API。</li></ul><p>JDBC API包含两个级别：</p><ul><li><p>JDBC API：Java应用程序通过这个API与JDBC管理器通信。</p></li><li><p>JDBC 驱动程序API：这个API定义了Java应用程序和JDBC驱动程序之间的协议。</p></li><li><p>JDBC可以为所有主流数据库提供统一的访问方式，从而有助于加快Java开发者的工作效率。</p></li></ul><p>下面是个使用java语言操作关系型数据库的一套API</p><h3 id="导入jar"><a href="#导入jar" class="headerlink" title="导入jar"></a>导入jar</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202304172257201.png" alt="image-20230417225731159"></p><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202304172258423.png" alt="image-20230417225839387"></p><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">            conn = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/jdbc&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;12345678&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;Connected to database successfully!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Error: unable to load driver class!&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Error: failed to connect to database!&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (conn != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202304172301062.png" alt="image-20230417230155033"></p><h2 id="API详解"><a href="#API详解" class="headerlink" title="API详解"></a>API详解</h2><h3 id="DriverManager"><a href="#DriverManager" class="headerlink" title="DriverManager"></a>DriverManager</h3><ul><li>驱动管理类1.注册驱动2.获取数据库连接</li><li>与各种关系型数据库进行通信。</li></ul><p>以下部分方法：</p><table><thead><tr><th>方法</th><th>解释</th></tr></thead><tbody><tr><td>getConnection()</td><td>连接到指定的数据库，并返回一个连接对象</td></tr><tr><td>getDriver()</td><td>返回一个具体的驱动</td></tr><tr><td>setLogWriter()</td><td>设置当前应用程序的日志Writer对象</td></tr><tr><td>getLogWriter()</td><td>获取当前应用程序的日志Writer对象</td></tr></tbody></table><h3 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a>Connection</h3><ul><li>表示与特定的数据库进行连接。</li><li>一旦获得一个Connection对象，就可以使用它来执行SQL语句。</li></ul><table><thead><tr><th align="left">方法</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">createStatement()</td><td align="left">创建一个 Statement 对象，用于执行静态 SQL 语句并返回其生成的结果。</td></tr><tr><td align="left">prepareStatement(String sql)</td><td align="left">创建一个 PreparedStatement 对象，用于将参数化的 SQL 语句发送到数据库。</td></tr><tr><td align="left">setAutoCommit(boolean autoCommit)</td><td align="left">设置是否启用自动提交模式。如果启用，每个 SQL 语句默认作为事务处理。</td></tr><tr><td align="left">commit()</td><td align="left">使自上次提交以来所做的所有更改成为永久性更改，并释放 Transaction 对象当前持有的所有锁。</td></tr><tr><td align="left">rollback()</td><td align="left">撤销自上次提交以来所做的所有更改，并释放 Transaction 对象当前持有的所有锁。</td></tr><tr><td align="left">close()</td><td align="left">关闭此 Connection 对象并释放与之关联的所有资源。</td></tr></tbody></table><h3 id="Statement"><a href="#Statement" class="headerlink" title="Statement"></a>Statement</h3><ul><li>能够执行静态的SQL语句，并返回产生结果。</li><li>代表在数据库上执行的SQL语句的接口</li></ul><table><thead><tr><th align="left">方法名</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">executeQuery(String sql)</td><td align="left">执行给定的 SQL 语句，它返回一个 ResultSet 对象。</td></tr><tr><td align="left">executeUpdate(String sql)</td><td align="left">执行给定的 SQL 语句，它可能会影响数据库中的任何数据。executeUpdate() 方法返回受影响的行数。</td></tr><tr><td align="left">execute(String sql)</td><td align="left">执行给定的 SQL 语句，该语句可能会返回多个结果。execute() 方法返回一个 boolean 值，指示第一个结果是否是 ResultSet 类型。</td></tr><tr><td align="left">addBatch(String sql)</td><td align="left">将给定的 SQL 语句添加到当前对象的批处理命令列表中。</td></tr><tr><td align="left">clearBatch()</td><td align="left">从此 Statement 对象的当前命令列表中删除所有命令。</td></tr><tr><td align="left">executeBatch()</td><td align="left">提交一批更新命令到数据库。executeBatch() 方法返回一个 int 数组，它表示批处理中每个命令影响的行数。</td></tr><tr><td align="left">close()</td><td align="left">释放此 Statement 对象使用的所有资源。</td></tr></tbody></table><h3 id="ResultSet"><a href="#ResultSet" class="headerlink" title="ResultSet"></a>ResultSet</h3><ul><li>执行查询后返回的对数据库的结果集表示。ResultSet是一个接口，它包含了一个表的所有行以及每个行的各个列的值</li></ul><table><thead><tr><th align="left">方法名</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">next()</td><td align="left">将结果集中的光标移到下一行。</td></tr><tr><td align="left">getInt(int columnIndex) 和 getInt(String columnName)</td><td align="left">获取指定列的 int 类型的值。</td></tr><tr><td align="left">getDouble(int columnIndex) 和 getDouble(String columnName)</td><td align="left">获取指定列的 double 类型的值。</td></tr><tr><td align="left">getString(int columnIndex) 和 getString(String columnName)</td><td align="left">获取指定列的 String 类型的值。</td></tr><tr><td align="left">getDate(int columnIndex) 和 getDate(String columnName)</td><td align="left">获取指定列的 java.sql.Date 类型的值。</td></tr><tr><td align="left">getTime(int columnIndex) 和 getTime(String columnName)</td><td align="left">获取指定列的 java.sql.Time 类型的值。</td></tr><tr><td align="left">getTimestamp(int columnIndex) 和 getTimestamp(String columnName)</td><td align="left">获取指定列的 java.sql.Timestamp 类型的值。</td></tr><tr><td align="left">getObject(int columnIndex) 和 getObject(String columnName)</td><td align="left">获取指定列的 java.lang.Object 类型的值。</td></tr><tr><td align="left">wasNull()</td><td align="left">如果上一次获取的值为空，返回 true。</td></tr><tr><td align="left">close()</td><td align="left">释放资源，关闭 ResultSet 对象。</td></tr></tbody></table><h3 id="PreparedStatement"><a href="#PreparedStatement" class="headerlink" title="PreparedStatement"></a>PreparedStatement</h3><ul><li>继承Statement接口，但能够提供高程序的性能和安全性，对SQL语句进行了预编译处理，并且可以通过参数化查询来防止SQL注入攻击。</li></ul><table><thead><tr><th align="left">方法名</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">setString(int parameterIndex, String x)</td><td align="left">给指定的参数设置 String 类型的值。</td></tr><tr><td align="left">setInt(int parameterIndex, int x)</td><td align="left">给指定的参数设置 int 类型的值。</td></tr><tr><td align="left">setDouble(int parameterIndex, double x)</td><td align="left">给指定的参数设置 double 类型的值。</td></tr><tr><td align="left">setFloat(int parameterIndex, float x)</td><td align="left">给指定的参数设置 float 类型的值。</td></tr><tr><td align="left">setLong(int parameterIndex, long x)</td><td align="left">给指定的参数设置 long 类型的值。</td></tr><tr><td align="left">setDate( int parameterIndex, Date x )</td><td align="left">给指定的参数设置 java.sql.Date 类型的值。</td></tr><tr><td align="left">setTime(int parameterIndex, Time x)</td><td align="left">给指定的参数设置 java.sql.Time 类型的值。</td></tr><tr><td align="left">setTimestamp(int parameterIndex, Timestamp x)</td><td align="left">给指定的参数设置 java.sql.Timestamp 类型的值。</td></tr><tr><td align="left">setObject(int parameterIndex, Object x)</td><td align="left">给指定的参数设置 Object 类型的值。</td></tr><tr><td align="left">setNull(int parameterIndex, int sqlType)</td><td align="left">给指定的参数设置 null 值。</td></tr><tr><td align="left">executeQuery()</td><td align="left">执行带参数的查询并返回 ResultSet 对象。</td></tr><tr><td align="left">executeUpdate()</td><td align="left">执行带参数的更新语句。</td></tr><tr><td align="left">addBatch()</td><td align="left">添加一个批处理命令。</td></tr><tr><td align="left">clearBatch()</td><td align="left">清除所有之前添加的批处理命令。</td></tr><tr><td align="left">executeBatch()</td><td align="left">执行所有添加的批处理命令。</td></tr><tr><td align="left">close()</td><td align="left">释放资源，关闭 PreparedStatement 对象。</td></tr></tbody></table><h3 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h3><ul><li>常见的数据库漏洞，攻击者利用应用程序对输入数据的过滤和验证不严格，将恶意代码插入SQL语句中，获取到未授权的数据或者执行恶意操作。</li><li>SQL注入是一种比较隐蔽的攻击方式，因为它可以绕过应用程序的认证和访问控制，进而直接利用存在漏洞的SQL语句进行数据库操作。</li></ul><h2 id="数据源"><a href="#数据源" class="headerlink" title="数据源"></a>数据源</h2><ul><li>在实际开发，为了管理连接池和数据源，可以用一些第三方连接池框架，比如C3P0和Druid等</li><li>DataSource作为一个轻量级的数据库连接池，可以大大提高系统的性能，扩展和维护性。使用DataSource时，需要先配置驱动类名，URL，用户名，密码，初始化连接数量，最大连接数量，超时时间等。当应用程序需要连接数据库时候，可以从数据源中获取连接来执行相应操作。</li></ul><h3 id="DataSource的获取与释放"><a href="#DataSource的获取与释放" class="headerlink" title="DataSource的获取与释放"></a>DataSource的获取与释放</h3><ul><li>通过JNDI获取DataSource对象时，通常需要进行初始化，创建一个InitialContext对象，将相关的参数信息放入Context中然后查找数据源。使用后，需要将连接释放会连接池。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化Context对象。</span></span><br><span class="line"><span class="type">Context</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialConrext</span>();、</span><br><span class="line"><span class="comment">//根据JNDI名称查找DataSource对象。</span></span><br><span class="line"><span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> (DataSource)ctx.lookup(<span class="string">&quot;java:comp/env/jdbc/mydb&quot;</span>);</span><br><span class="line"><span class="comment">//从数据源中获取连接</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line"><span class="comment">//使用连接进行数据操作</span></span><br><span class="line"><span class="comment">// ..........</span></span><br><span class="line"><span class="comment">//释放连接</span></span><br><span class="line">conn.close();</span><br></pre></td></tr></table></figure></li></ul><h3 id="数据源的配置方式"><a href="#数据源的配置方式" class="headerlink" title="数据源的配置方式"></a>数据源的配置方式</h3><ul><li>DataSource 可以通过XML或Properties文件进行配置。对Spring框架等，也支持java代码的配置方式来获取数据源</li></ul><h3 id="线程安全性"><a href="#线程安全性" class="headerlink" title="线程安全性"></a>线程安全性</h3><ol><li>为每个线程创建单独的Connection对象。可以使用ThreadLocal对象来保证每个线程都有自己的对象</li><li>连接池管理连接资源，能够对连接对象进行有效的监控和管理，从而避免了多个线程竞争同一个Connection对象的问题。允许线程取走，但是使用后归还连接池，供其他复用。</li><li>确保事务的独立性，每个线程会开启事物，提交或回滚事物，可以保证多个线程之间不会干扰彼此。</li></ol><h2 id="批处理"><a href="#批处理" class="headerlink" title="批处理"></a>批处理</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><ul><li>将多个命令按照顺序集成在一个文件中，批量执行的技术。通过一系列脚本或命令来完成。</li></ul><h3 id="Statement处理"><a href="#Statement处理" class="headerlink" title="Statement处理"></a>Statement处理</h3><ol><li>使用Statement对象进行批处理，通过addBatch()将多个SQL命令添加到一个批处理中去，并使用executeBatch()方法来执行批处理。</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line">statement.addBatch(<span class="string">&quot;INSERT INTO user(name,age) values(&#x27;Lily&#x27;,18)&quot;</span>);</span><br><span class="line">statement.addBatch(<span class="string">&quot;INSERT INTO user(name,age) values(&#x27;Tom&#x27;,20)&quot;</span>);</span><br><span class="line">statement.addBatch(<span class="string">&quot;UPDATE user SET age=&#x27;19&#x27; WHERE id=&#x27;1&#x27;&quot;</span>);</span><br><span class="line"><span class="type">int</span>[] count = statement.executeBatch(); <span class="comment">//批量执行SQL语句</span></span><br><span class="line">connection.commit();<span class="comment">// 提交事务</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="PreparedStatement处理"><a href="#PreparedStatement处理" class="headerlink" title="PreparedStatement处理"></a>PreparedStatement处理</h3><p>同上</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">INSERT_SQL</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO user(name,age) values(?,?)&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> con.prepareStatement(INSERT_SQL);</span><br><span class="line">pstmt.setString(<span class="number">1</span>, <span class="string">&quot;Lily&quot;</span>);</span><br><span class="line">pstmt.setInt(<span class="number">2</span>, <span class="number">18</span>);</span><br><span class="line">pstmt.addBatch();</span><br><span class="line">pstmt.setString(<span class="number">1</span>, <span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">pstmt.setInt(<span class="number">2</span>, <span class="number">20</span>);</span><br><span class="line">pstmt.addBatch();</span><br><span class="line"><span class="type">int</span>[] count = pstmt.executeBatch();</span><br><span class="line">connection.commit();<span class="comment">// 提交事务</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Spring批处理实现大规模数据库操作"><a href="#Spring批处理实现大规模数据库操作" class="headerlink" title="Spring批处理实现大规模数据库操作"></a>Spring批处理实现大规模数据库操作</h3><ol><li>一般要创建Job，Step，ItemReader,ItemProcessor,ItemWriter</li></ol><p>Job：批处理的最顶层组件，表示一个或多个并行 Step 的顺序运行。可以将其视为一个顶级容器，可包含多个 Step。</p><p>Step：是 Batch 处理的主要单位，表示一个任务步骤。可以对每一个步骤进行配置，比如设置读取文件、处理逻辑、验证等。</p><p>ItemReader：用于读取数据，通常从文件或数据库中读取数据。每次读取一条数据进行处理。</p><p>ItemProcessor：对 ItemReader 返回的数据进行进一步处理，可以对数据进行过滤、转换等操作，比如将一定格式的文本转化成 Java 对象。</p><p>ItemWriter：根据需要将读取到的数据写入到指定位置，如写入到数据库、写入到文件等。</p><ol start="2"><li><p>配置Job和Step<br>需要创建job和step的配置类，这些将负责配置Batch的核心组件，数据源，事务和监听器，通过XML文件或Java Config 进行配置，实现Batch批处理</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableBatchProcessing</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BatchConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobBuilderFactory jobs;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StepBuilderFactory steps;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Step <span class="title function_">step1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> steps.get(<span class="string">&quot;step1&quot;</span>)</span><br><span class="line">            .&lt;String, String&gt;chunk(<span class="number">10</span>)</span><br><span class="line">            .reader(reader())</span><br><span class="line">            .processor(processor())</span><br><span class="line">            .writer(writer())</span><br><span class="line">            .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Job <span class="title function_">job</span><span class="params">(Step step1)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> jobs.get(<span class="string">&quot;job&quot;</span>)</span><br><span class="line">            .incrementer(<span class="keyword">new</span> <span class="title class_">RunIdIncrementer</span>())</span><br><span class="line">            .flow(step1)</span><br><span class="line">            .end()</span><br><span class="line">            .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义具体的 Reader、Processor、Writer</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>定义 ItemProcessor、ItemReader 和 ItemWriter<br>Batch 模块提供了大量优秀的处理器和读写器，这些对象可以快速地实现批处理任务。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JDBC学习笔记&quot;&gt;&lt;a href=&quot;#JDBC学习笔记&quot; class=&quot;headerlink&quot; title=&quot;JDBC学习笔记&quot;&gt;&lt;/a&gt;JDBC学习笔记&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="java" scheme="https://kalyan-zitiu.github.io/categories/java/"/>
    
    
    <category term="基础知识" scheme="https://kalyan-zitiu.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>网络管理员</title>
    <link href="https://kalyan-zitiu.github.io/2023/04/15/%E5%88%9D%E7%BA%A7%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%91%98/"/>
    <id>https://kalyan-zitiu.github.io/2023/04/15/%E5%88%9D%E7%BA%A7%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%91%98/</id>
    <published>2023-04-15T13:32:00.000Z</published>
    <updated>2023-04-27T13:06:51.939Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="ccf35bf09b0b55d6ca9e165c47ef22fbae1915021c4ae5c17b2c2d97c4797a08"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="网络管理" scheme="https://kalyan-zitiu.github.io/categories/%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86/"/>
    
    
    <category term="基础知识" scheme="https://kalyan-zitiu.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>动态规划</title>
    <link href="https://kalyan-zitiu.github.io/2023/04/02/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <id>https://kalyan-zitiu.github.io/2023/04/02/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</id>
    <published>2023-04-02T14:00:00.000Z</published>
    <updated>2023-04-22T08:04:48.693Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Dynamic programming，简称DP。通过把原问题分解为相对简单得子问题得方式求解复杂问题的方法。动态规划常常适用于有重叠子问题喝最优子结构性质的问题。一般这些子问题很相似，可以通过函数关系递推出来，然后动态规划致力于解决每一个子问题一次。减少重复计算，如斐波那契数列可以看做入门级的经典动态规划。主要大的基本思想就是一个记住过去，来就现在求值。</p><h2 id="动态规划的青蛙跳阶问题。"><a href="#动态规划的青蛙跳阶问题。" class="headerlink" title="动态规划的青蛙跳阶问题。"></a>动态规划的青蛙跳阶问题。</h2><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级台阶。求该青蛙跳上一个 10 级的台阶总共有多少种跳法。</p><p>具体思路就是，在跳上n格的时候，你必须柯一是跳上n-1格子的次数，然后再跳上n格。<br>所以说需要的是记住之前的所有值来计算最新的值。从而达到在计算第n个格时候，能够以较快的速度知道。跳到n个的次数。</p><p>那么就有了斐波那契数列的应用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f(10) = f(9) + f(8)</span><br><span class="line">f(9) = f(8) + f(7)</span><br><span class="line">f(8) = f(7) + f(6)</span><br><span class="line">f(7) = f(6) + f(5)</span><br><span class="line">f(6) = f(5) + f(4)</span><br><span class="line">···</span><br><span class="line">f(3) = f(2) + f(1)</span><br><span class="line"></span><br><span class="line">通用的公式为f(n) = f(n-1) + f(n-2)</span><br></pre></td></tr></table></figure><p>然后就可以用递归来解决这个问题。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class Solution&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numWays</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n&lt;=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> numWays(n-<span class="number">1</span>) + numWays(n-<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是用递归的方法，耗时就很大，但计算f(10)的时候，就需要先计算出子问题f(9)和f(8)然后计算f(9),又要先算出子问题f(8) 和 f(7),以此类推。一直到f(2)和f(1),递归树才结束。所以就有有了：</p><ul><li>递归复杂度 = 解决一个子问题时间* 子问题个数</li><li>一个人子问题时间 = f（n-1）+f（n-2），所以复杂度是O（1）；</li><li>问题个数 = 递归树节点的总数，递归树的总节点 = 2^n-1，所以复杂度是O（2 ^ n）</li></ul><p>因此青蛙跳阶的递归解法的时间复杂度 = O(1)*O(2 ^ n) = O(2 ^ n) ,然后你会发现回过头来，有大量的重复计算，比如f(8) 被计算了两次，f（7）被重复计算了3次…..所以这个递归算法低效就是这样的原因。</p><h3 id="带备忘录的递归解法"><a href="#带备忘录的递归解法" class="headerlink" title="带备忘录的递归解法"></a>带备忘录的递归解法</h3><p>既然发现了存在大量的重复计算，那么就有了一个思想，我们能把重复计算的值给记录下来，当到了可以使用的时候就可以把它重新取出来使用，这样就不用有重复的计算了。所以这里又引出了一个新的问题，用什么的数据类型或者数据结构去记录这个重复的值。</p><ul><li>一般都会想到使用一个数组或者一个哈希Map充当这个备忘录。</li></ul><p>子问题个数 = 树节点数=n，解决一个子问题还是O（1）,所以带备忘录的递归算法的时间复杂度是O（n）。接下来呢，就用备忘录的递归算法去些代码。来解决青蛙的超时问题。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line"><span class="comment">//使用哈希map，充当备忘录的作用</span></span><br><span class="line">Map&lt;Integer,Integer&gt; tempMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numways</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line"><span class="comment">// n = 0 也算一种</span></span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n&lt;=<span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//先判断有没有计算过，即看看备忘录有没有</span></span><br><span class="line"><span class="keyword">if</span>(tempMap.containsKey(n))&#123;</span><br><span class="line"><span class="comment">//备忘录有，计算过，直接返回</span></span><br><span class="line"><span class="keyword">return</span> tempMap.get(n);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//备忘录没有，即没有计算过，执行递归计算，并且把结果保存到备忘录map中，对100000007取余</span></span><br><span class="line">tempMap.put(n,(numWays(n-<span class="number">1</span>)+numWays(n-<span class="number">2</span>)) % <span class="number">1000000007</span>);</span><br><span class="line"><span class="keyword">return</span> tempMap.get(n);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态规划-1"><a href="#动态规划-1" class="headerlink" title="动态规划"></a>动态规划</h3><p>思路上基本和带着备忘录的递归解法是一致的，都是减少重复计算，时间复杂度也都是差不多，但是：</p><ul><li>备忘录的递归，是从f(10)往f(1)方向延伸求解的，所以称为<strong>自顶向下</strong>的解法。</li><li>动态规划从较小问题的解，有交叠性质，逐步决策出较大问题的解，它是从f(1)往f(10)方向往上推求解，所以称为<strong>自底向上</strong>的解法。</li><li>动态规划有几个典型得特征，最优子结构，状态转移方程，边界，重叠子问题。</li></ul><p>例如：</p><ul><li>f(n-1)和f(n-2) 称为 f(n) 的最优子结构</li><li>f(n)= f（n-1）+f（n-2）就称为状态转移方程</li><li>f(1) = 1, f(2) = 2 就是边界啦</li><li>比如f(10)= f(9)+f(8),f(9) = f(8) + f(7) ,f(8)就是重叠子问题。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numWays</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            temp = (a + b)% <span class="number">1000000007</span>;</span><br><span class="line">            a = b;</span><br><span class="line">            b = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="动态规划解题思路"><a href="#动态规划解题思路" class="headerlink" title="动态规划解题思路"></a>动态规划解题思路</h2><ol><li><p>在问题中，可以把所有可能穷举出来，发现有重叠子问题得存在，就可以考虑动态规划。</p></li><li><p>一些求最值得场景，比如最长递增子序列，最小编辑距离，背包问题，凑零钱问题等，都是经典得动态规划的经典应用场景</p></li><li><p>核心就是拆分子问题，记住过往，减少重量计算，总结思路就是：</p><ul><li>穷举分析</li><li>确认边界</li><li>找出规律，确定最优子结构</li><li>写出状态转移方程</li></ul><ol><li><p>穷举分析</p></li><li><p>确定边界<br>通过穷举分析，我们发现，当台阶数是1的时候或者2的时候，可以明确知道青蛙跳法。f（1） =1，f(2) = 2，当台阶n&gt;=3时，已经呈现出规律f(3) = f(2) + f(1) =3，因此f（1） =1，f(2) = 2就是青蛙跳阶的边界。</p></li><li><p>确定最优子结构<br>n&gt;=3时，已经呈现出规律 f(n) = f(n-1) + f(n-2) ，因此，f(n-1)和f(n-2) 称为 f(n) 的最优子结构。什么是最优子结构？有这么一个解释：一道动态规划问题，其实就是递推问题。假设当前决策结果是f(n),则最优子结构就是要让f(n-k)最优，最优子结构性质就是能让转移到n的状态最优的，并且与后面的决策没有关系，即让后面的决策安心的使用前面的局部最优解的一种性质.</p></li><li><p>写出状态转移方程<br>通过前面3步，穷举分析，确定边界，最优子结构，得出状态转移方程：</p></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>][...] = 边界值</span><br><span class="line"><span class="keyword">for</span>(状态<span class="number">1</span> ：所有状态<span class="number">1</span>的值)&#123;</span><br><span class="line"> <span class="keyword">for</span>(状态<span class="number">2</span> ：所有状态<span class="number">2</span>的值)&#123;</span><br><span class="line">     <span class="keyword">for</span>(...)&#123;</span><br><span class="line">       <span class="comment">//状态转移方程</span></span><br><span class="line">       dp[状态<span class="number">1</span>][状态<span class="number">2</span>][...] = 求最值</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h2><p>给你一个整数数组nums，找到其中最长严格递增子序列的长度。<br>输入：nums=[10,9,2,5,3,7,101,18];<br>输出：4<br>解释：最长递增子序列是[2,3,7,101],因此长度为</p><h3 id="穷举分析"><a href="#穷举分析" class="headerlink" title="穷举分析"></a>穷举分析</h3><p>这里观察规律，显然是有关系的，我们还是遵循动态规划自底向上的原则，基于示例1的数据，从数组只有一个元素开始分析。</p><ul><li>当nums只有一个元素10时，最长递增子序列是[10],长度是1.</li><li>当nums需要加入一个元素9时，最长递增子序列是[10]或者[9],长度是1。</li><li>当nums再加入一个元素2时，最长递增子序列是[10]或者[9]或者[2],长度是1。</li><li>当nums再加入一个元素5时，最长递增子序列是[2,5],长度是2。</li><li>当nums再加入一个元素3时，最长递增子序列是[2,5]或者[2,3],长度是2。</li><li>当nums再加入一个元素7时，,最长递增子序列是[2,5,7]或者[2,3,7],长度是3。</li><li>当nums再加入一个元素101时，最长递增子序列是[2,5,7,101]或者[2,3,7,101],长度是4。</li><li>当nums再加入一个元素18时，最长递增子序列是[2,5,7,101]或者[2,3,7,101]或者[2,5,7,18]或者[2,3,7,18],长度是4。</li><li>当nums再加入一个元素7时,最长递增子序列是[2,5,7,101]或者[2,3,7,101]或者[2,5,7,18]或者[2,3,7,18],长度是4.</li></ul><h3 id="分析找规律，拆分子问题。"><a href="#分析找规律，拆分子问题。" class="headerlink" title="分析找规律，拆分子问题。"></a>分析找规律，拆分子问题。</h3><p>如果新加入一个元素nums[i], 最长递增子序列要么是以nums[i]结尾的递增子序列，要么就是nums[i-1]的最长递增子序列。nums[i]的最长递增子序列，不就是从以数组num[i]每个元素结尾的最长子序列集合，取元素最多（也就是长度最长）。可以用dp[i]表示以num[i]这个数结尾的最长递增子序列的长度</p><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/image-20230422155700534.png" alt="image-20230422155700534"></p><p>nums[i]结尾的自增子序列，只要找到比nums[i]小的子序列，加上nums[i] </p><h3 id="最简单边界情况"><a href="#最简单边界情况" class="headerlink" title="最简单边界情况"></a>最简单边界情况</h3><p>当nums数组只有一个元素时候，最长递增子序列的长度dp(1) = 1,当nums数组有两个元素时，dp(2) =2或者1， 因此边界就是dp(1)=1。</p><h3 id="确定最优子结构"><a href="#确定最优子结构" class="headerlink" title="确定最优子结构"></a>确定最优子结构</h3><p>max(dp(j)) 就是最优子结构。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dp(i) =max(dp(j))+<span class="number">1</span>，存在j属于区间[<span class="number">0</span>，i-<span class="number">1</span>],并且num[i]&gt;num[j]。</span><br></pre></td></tr></table></figure><h3 id="状态转移方程"><a href="#状态转移方程" class="headerlink" title="状态转移方程"></a>状态转移方程</h3><p>通过前面分析，我们就可以得出</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">最长递增子序列 =max(dp[i])</span><br></pre></td></tr></table></figure><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLIS</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">        <span class="comment">//初始化就是边界情况</span></span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxans</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//自底向上遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            dp[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="comment">//从下标0到i遍历</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="comment">//找到前面比nums[i]小的数nums[j],即有dp[i]= dp[j]+1</span></span><br><span class="line">                <span class="keyword">if</span> (nums[j] &lt; nums[i]) &#123;</span><br><span class="line">                    <span class="comment">//因为会有多个小于nums[i]的数，也就是会存在多种组合了嘛，我们就取最大放到dp[i]</span></span><br><span class="line">                    dp[i] = Math.max(dp[i], dp[j] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//求出dp[i]后，dp最大那个就是nums的最长递增子序列啦</span></span><br><span class="line">            maxans = Math.max(maxans, dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;动态规划&quot;&gt;&lt;a href=&quot;#动态规划&quot; class=&quot;headerlink&quot; title=&quot;动态规划&quot;&gt;&lt;/a&gt;动态规划&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h</summary>
      
    
    
    
    <category term="算法" scheme="https://kalyan-zitiu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="基础知识" scheme="https://kalyan-zitiu.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-创新型模式</title>
    <link href="https://kalyan-zitiu.github.io/2023/03/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://kalyan-zitiu.github.io/2023/03/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2023-03-21T14:00:00.000Z</published>
    <updated>2023-03-27T03:06:06.999Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式-创新型模式"><a href="#设计模式-创新型模式" class="headerlink" title="设计模式-创新型模式"></a>设计模式-创新型模式</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>设计模式是软件开发中的一种通用解决方案，它们是经过实践证明的、被广泛接受的最佳实践。设计模式提供了一种可重用的设计思想，可以帮助开发人员解决常见的设计问题，提高代码质量和可维护性。</p><p>设计模式通常包含以下元素：</p><ol><li><p>模式名称：用于描述模式的名称。</p></li><li><p>问题描述：描述模式所解决的问题，包括场景和限制条件。</p></li><li><p>解决方案：描述模式的解决方案，包括结构、参与者、协作方式和责任。</p></li><li><p>优点和缺点：描述模式的优点和缺点，包括可维护性、可扩展性、可重用性等方面。</p></li><li><p>适用性：描述模式适用的场景和限制条件。</p></li><li><p>实现方式：描述模式的实现方式，包括代码示例和实现细节。</p></li></ol><h2 id="创新型模式"><a href="#创新型模式" class="headerlink" title="创新型模式"></a>创新型模式</h2><h3 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h3><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><ul><li>简单工厂模式又叫静态方法模式（因为工厂类定义了一个静态方法）<br>现实生活中，工厂是负责生产产品的；</li><li>同样在设计模式中，简单工厂模式我们可以理解为负责生产对象的一个类，称为“工厂类”。</li></ul><h4 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h4><ul><li>将“类实例化的操作”与“使用对象的操作”分开，让使用者不用知道具体参数就可以实例化出所需要的“产品”类，从而避免了在客户端代码中显式指定，实现了解耦。即使用者可直接消费产品而不需要知道其生产的细节。</li><li>将创建实例的工作与使用实例的工作分开，使用者不必关心类对象如何创建，实现了解耦；</li><li>把初始化实例时的工作放到工厂里进行，使代码更容易维护。 更符合面向对象的原则 &amp; 面向接口编程，而不是面向实现编程。</li></ul><h4 id="模式原理"><a href="#模式原理" class="headerlink" title="模式原理"></a>模式原理</h4><table><thead><tr><th>组成</th><th>关系</th><th>作用</th></tr></thead><tbody><tr><td>抽象产品</td><td>具体产品的父类</td><td>描述产品的公共接口</td></tr><tr><td>具体产品</td><td>抽象产品的子类；工厂类创建的目标类</td><td>描述生产的具体产品</td></tr><tr><td>工厂</td><td>被外界调用</td><td>根据传入不同参数从而创建不同具体产品类的实例</td></tr></tbody></table><h4 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h4><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202303261441166.png" alt="img"></p><h4 id="举例实现"><a href="#举例实现" class="headerlink" title="举例实现"></a>举例实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Product</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">Show</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//具体产品类A</span></span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">ProductA</span> <span class="keyword">extends</span>  <span class="title class_">Product</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生产出了产品A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体产品类B</span></span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">ProductB</span> <span class="keyword">extends</span>  <span class="title class_">Product</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生产出了产品C&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体产品类C</span></span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">ProductC</span> <span class="keyword">extends</span>  <span class="title class_">Product</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生产出了产品C&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span>  <span class="title class_">Factory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Product <span class="title function_">Manufacture</span><span class="params">(String ProductName)</span>&#123;</span><br><span class="line"><span class="comment">//工厂类里用switch语句控制生产哪种商品；</span></span><br><span class="line"><span class="comment">//使用者只需要调用工厂类的静态方法就可以实现产品类的实例化。</span></span><br><span class="line">        <span class="keyword">switch</span> (ProductName)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;A&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProductA</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;B&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProductB</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;C&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProductC</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//工厂产品生产流程</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleFactoryPattern</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Factory</span> <span class="variable">mFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Factory</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//客户要产品A</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//调用工厂类的静态方法 &amp; 传入不同参数从而创建产品实例</span></span><br><span class="line">            mFactory.Manufacture(<span class="string">&quot;A&quot;</span>).Show();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (NullPointerException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;没有这一类产品&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//客户要产品B</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mFactory.Manufacture(<span class="string">&quot;B&quot;</span>).Show();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (NullPointerException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;没有这一类产品&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//客户要产品C</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mFactory.Manufacture(<span class="string">&quot;C&quot;</span>).Show();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (NullPointerException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;没有这一类产品&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//客户要产品D</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mFactory.Manufacture(<span class="string">&quot;D&quot;</span>).Show();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (NullPointerException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;没有这一类产品&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">生产出了产品A</span><br><span class="line">生产出了产品C</span><br><span class="line">生产出了产品C</span><br><span class="line">没有这一类产品</span><br></pre></td></tr></table></figure><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><ul><li>工厂类集中了所有实例（产品）的创建逻辑，一旦这个工厂不能正常工作，整个系统都会受到影响；</li><li>违背“开放 - 关闭原则”，一旦添加新产品就不得不修改工厂类的逻辑，这样就会造成工厂逻辑过于复杂。</li><li>简单工厂模式由于使用了静态工厂方法，静态方法不能被继承和重写，会造成工厂角色无法形成基于继承的等级结构。</li></ul><h3 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h3><h4 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h4><ul><li>工厂方法模式，又称工厂模式、多态工厂模式和虚拟构造器模式，通过定义工厂父类负责定义创建对象的公共接口，而子类则负责生成具体的对象。</li><li>将类的实例化（具体产品的创建）延迟到工厂类的子类（具体工厂）中完成，即由子类来决定应该实例化（创建）哪一个类。</li></ul><h4 id="解决问题-1"><a href="#解决问题-1" class="headerlink" title="解决问题"></a>解决问题</h4><ul><li>具体产品的创建推迟到工厂类的子类（具体工厂）中，此时工厂类不再负责所有产品的创建，而只是给出具体工厂必须实现的接口，这样工厂方法模式在添加新产品的时候就不修改工厂类逻辑而是添加新的工厂子类，符合开放封闭原则，克服了简单工厂模式中缺点</li><li>新增一种产品时，只需要增加相应的具体产品类和相应的工厂子类即可</li><li>符合单一职责原则,每个具体工厂类只负责创建对应的产品</li><li>不使用静态工厂方法，可以形成基于继承的等级结构。简单工厂模式的工厂类使用静态工厂方法</li></ul><h4 id="模式组成"><a href="#模式组成" class="headerlink" title="模式组成"></a>模式组成</h4><table><thead><tr><th>组成</th><th>关系</th><th>作用</th></tr></thead><tbody><tr><td>抽象产品</td><td>具体产品的父类</td><td>描述具体产品的公共接口</td></tr><tr><td>具体产品</td><td>抽象产品的子类；工厂类创建的目标类</td><td>描述生产的具体产品</td></tr><tr><td>抽象工厂</td><td>具体工厂的父类</td><td>描述具体工厂的公共接口</td></tr><tr><td>具体工厂</td><td>抽象工厂的子类；被外界调用</td><td>描述具体工厂；实现FactoryMethod工厂方法创建产品的实例</td></tr></tbody></table><h4 id="UML类图-1"><a href="#UML类图-1" class="headerlink" title="UML类图"></a>UML类图</h4><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202303261447429.png" alt="image-20230326144728389"></p><h4 id="实例举例"><a href="#实例举例" class="headerlink" title="实例举例"></a>实例举例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Factory</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> Product <span class="title function_">Manufacture</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Product</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">Show</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//具体产品A类</span></span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">ProductA</span> <span class="keyword">extends</span>  <span class="title class_">Product</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生产出了产品A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体产品B类</span></span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">ProductB</span> <span class="keyword">extends</span>  <span class="title class_">Product</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生产出了产品B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//工厂A类 - 生产A类产品</span></span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">FactoryA</span> <span class="keyword">extends</span> <span class="title class_">Factory</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">Manufacture</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProductA</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//工厂B类 - 生产B类产品</span></span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">FactoryB</span> <span class="keyword">extends</span> <span class="title class_">Factory</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">Manufacture</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProductB</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//生产工作流程</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FactoryPattern</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//客户要产品A</span></span><br><span class="line">        <span class="type">FactoryA</span> <span class="variable">mFactoryA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FactoryA</span>();</span><br><span class="line">        mFactoryA.Manufacture().Show();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//客户要产品B</span></span><br><span class="line">        <span class="type">FactoryB</span> <span class="variable">mFactoryB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FactoryB</span>();</span><br><span class="line">        mFactoryB.Manufacture().Show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">生产出了产品A</span><br><span class="line">生产出了产品C</span><br></pre></td></tr></table></figure><h4 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h4><ul><li>添加新产品时，除了增加新产品类外，还要提供与之对应的具体工厂类，系统类的个数将成对增加，在一定程度上增加了系统的复杂度；同时，有更多的类需要编译和运行，会给系统带来一些额外的开销；</li><li>由于考虑到系统的可扩展性，需要引入抽象层，在客户端代码中均使用抽象层进行定义，增加了系统的抽象性和理解难度，且在实现时可能需要用到DOM、反射等技术，增加了系统的实现难度</li><li>虽然保证了工厂方法内的对修改关闭，但对于使用工厂方法的类，如果要更换另外一种产品，仍然需要修改实例化的具体工厂类；</li></ul><h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><ul><li>当一个类不知道它所需要的对象的类时，在工厂方法模式中，客户端不需要知道具体产品类的类名，只需要知道所对应的工厂即可；</li><li>当一个类希望通过其子类来指定创建对象时，在工厂方法模式中，对于抽象工厂类只需要提供一个创建产品的接口，而由其子类来确定具体要创建的对象，利用面向对象的多态性和里氏代换原则，在程序运行时，子类对象将覆盖父类对象，从而使得系统更容易扩展。</li><li>将创建对象的任务委托给多个工厂子类中的某一个，客户端在使用时可以无须关心是哪一个工厂子类创建产品子类，需要时再动态指定，可将具体工厂类的类名存储在配置文件或数据库中。</li></ul><h3 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h3><h4 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h4><ul><li>抽象工厂模式，提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类；具体的工厂负责实现具体的产品实例。</li><li>抽象工厂模式与工厂方法模式最大的区别：抽象工厂中每个工厂可以创建多种类的产品；而工厂方法每个工厂只能创建一类</li><li>允许使用抽象的接口来创建一组相关产品，而不需要知道或关心实际生产出的具体产品是什么，这样就可以从具体产品中被解耦。</li></ul><h4 id="解决问题-2"><a href="#解决问题-2" class="headerlink" title="解决问题"></a>解决问题</h4><ul><li>降低耦合，抽象工厂模式将具体产品的创建延迟到具体工厂的子类中，这样将对象的创建封装起来，可以减少客户端与具体产品类之间的依赖，从而使系统耦合度低，这样更有利于后期的维护和扩展；</li><li>更符合开-闭原则，新增一种产品类时，只需要增加相应的具体产品类和相应的工厂子类即可</li></ul><h4 id="模式组成-1"><a href="#模式组成-1" class="headerlink" title="模式组成"></a>模式组成</h4><table><thead><tr><th>组成</th><th>关系</th><th>作用</th></tr></thead><tbody><tr><td>抽象产品族</td><td>抽象产品的父类</td><td>描述抽象产品的公共接口</td></tr><tr><td>抽象产品</td><td>具体产品的父类</td><td>描述具体产品的公共接口</td></tr><tr><td>具体产品</td><td>抽象产品的子类；工厂类创建的目标类</td><td>描述生产的具体产品</td></tr><tr><td>抽象工厂</td><td>具体工厂的父类</td><td>描述具体工厂的公共接口</td></tr><tr><td>具体工厂</td><td>抽象工厂的子类；被外界调用</td><td>描述具体工厂；实现工厂方法创建产品的实例</td></tr></tbody></table><h4 id="UML类图-2"><a href="#UML类图-2" class="headerlink" title="UML类图"></a>UML类图</h4><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202303261459666.png" alt="img"></p><h4 id="举例实例"><a href="#举例实例" class="headerlink" title="举例实例"></a>举例实例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Factory</span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">abstract</span> Product <span class="title function_">ManufactureContainer</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> Product <span class="title function_">ManufactureMould</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractProduct</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">Show</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//容器产品抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">ContainerProduct</span> <span class="keyword">extends</span> <span class="title class_">AbstractProduct</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">Show</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//模具产品抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">MouldProduct</span> <span class="keyword">extends</span> <span class="title class_">AbstractProduct</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">Show</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//容器产品A类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ContainerProductA</span> <span class="keyword">extends</span> <span class="title class_">ContainerProduct</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生产出了容器产品A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//容器产品B类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ContainerProductB</span> <span class="keyword">extends</span> <span class="title class_">ContainerProduct</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生产出了容器产品B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//模具产品A类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MouldProductA</span> <span class="keyword">extends</span> <span class="title class_">MouldProduct</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生产出了模具产品A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//模具产品B类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MouldProductB</span> <span class="keyword">extends</span> <span class="title class_">MouldProduct</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生产出了模具产品B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//A厂 - 生产模具+容器产品</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FactoryA</span> <span class="keyword">extends</span> <span class="title class_">Factory</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">ManufactureContainer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ContainerProductA</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">ManufactureMould</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MouldProductA</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//B厂 - 生产模具+容器产品</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FactoryB</span> <span class="keyword">extends</span> <span class="title class_">Factory</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">ManufactureContainer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ContainerProductB</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">ManufactureMould</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MouldProductB</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//生产工作流程</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AbstractFactoryPattern</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">FactoryA</span> <span class="variable">mFactoryA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FactoryA</span>();</span><br><span class="line">        <span class="type">FactoryB</span> <span class="variable">mFactoryB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FactoryB</span>();</span><br><span class="line">        <span class="comment">//A厂当地客户需要容器产品A</span></span><br><span class="line">        mFactoryA.ManufactureContainer().Show();</span><br><span class="line">        <span class="comment">//A厂当地客户需要模具产品A</span></span><br><span class="line">        mFactoryA.ManufactureMould().Show();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//B厂当地客户需要容器产品B</span></span><br><span class="line">        mFactoryB.ManufactureContainer().Show();</span><br><span class="line">        <span class="comment">//B厂当地客户需要模具产品B</span></span><br><span class="line">        mFactoryB.ManufactureMould().Show();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">生产出了容器产品A</span><br><span class="line">生产出了容器产品B</span><br><span class="line">生产出了模具产品A</span><br><span class="line">生产出了模具产品B</span><br></pre></td></tr></table></figure><h4 id="问题-2"><a href="#问题-2" class="headerlink" title="问题"></a>问题</h4><ul><li>抽象工厂模式很难支持新种类产品的变化</li></ul><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><h4 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h4><ul><li>实现1个类只有1个实例化对象 &amp; 提供一个全局访问点</li><li>从上面可看出：工人类操作的明显不是同一个仓库实例，而全部工人希望操作的是同一个仓库实例，即只有1个实例</li></ul><h4 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h4><ul><li>在Java中，我们通过使用对象（类实例化后）来操作这些类，类实例化是通过它的构造方法进行的，要是想实现一个类只有一个实例化对象。</li></ul><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202303261501938.png" alt="img"></p><h4 id="举例实现-1"><a href="#举例实现-1" class="headerlink" title="举例实现"></a>举例实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"><span class="comment">//1. 创建私有变量 ourInstance（用以记录 Singleton 的唯一实例）</span></span><br><span class="line"><span class="comment">//2. 内部进行实例化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">ourInstance</span>  <span class="operator">=</span> <span class="keyword">new</span>  <span class="title class_">Singleton</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 把类的构造方法私有化，不让外部调用构造方法实例化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//4. 定义公有方法提供该类的全局唯一访问点</span></span><br><span class="line"><span class="comment">//5. 外部通过调用getInstance()方法来返回唯一的实例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  Singleton <span class="title function_">newInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ourInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="情景代入"><a href="#情景代入" class="headerlink" title="情景代入"></a>情景代入</h4><p>背景：小成有一个塑料生产厂，但里面只有一个仓库。<br>目的：想用代码来实现仓库的管理<br>现有做法： 建立仓库类和工人类     其中，仓库类里的quantity=商品数量；工人类里有搬运方法MoveIn(int i)和MoveOut(int i)。</p><h5 id="一般实现"><a href="#一般实现" class="headerlink" title="一般实现"></a>一般实现</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//仓库类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StoreHouse</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">quantity</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setQuantity</span><span class="params">(<span class="type">int</span> quantity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.quantity = quantity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getQuantity</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> quantity;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//搬货工人类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Carrier</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> StoreHouse mStoreHouse;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Carrier</span><span class="params">(StoreHouse storeHouse)</span>&#123;</span><br><span class="line">        mStoreHouse = storeHouse;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//搬货进仓库</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">MoveIn</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">        mStoreHouse.setQuantity(mStoreHouse.getQuantity()+i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//搬货出仓库</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">MoveOut</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">        mStoreHouse.setQuantity(mStoreHouse.getQuantity()-i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//工人搬运测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SinglePattern</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">StoreHouse</span> <span class="variable">mStoreHouse1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StoreHouse</span>();</span><br><span class="line">        <span class="type">StoreHouse</span> <span class="variable">mStoreHouse2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StoreHouse</span>();</span><br><span class="line">        <span class="type">Carrier</span> <span class="variable">Carrier1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Carrier</span>(mStoreHouse1);</span><br><span class="line">        <span class="type">Carrier</span> <span class="variable">Carrier2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Carrier</span>(mStoreHouse2);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;两个是不是同一个？&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(mStoreHouse1.equals(mStoreHouse2))&#123;<span class="comment">//这里用equals而不是用 == 符号，因为 == 符号只是比较两个对象的地址</span></span><br><span class="line">            System.out.println(<span class="string">&quot;是同一个&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;不是同一个&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//搬运工搬完货物之后出来汇报仓库商品数量</span></span><br><span class="line">        Carrier1.MoveIn(<span class="number">30</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;仓库商品余量：&quot;</span>+Carrier1.mStoreHouse.getQuantity());</span><br><span class="line">        Carrier2.MoveOut(<span class="number">50</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;仓库商品余量：&quot;</span>+Carrier2.mStoreHouse.getQuantity());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="单例实现"><a href="#单例实现" class="headerlink" title="单例实现"></a>单例实现</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> scut.designmodel.SingletonPattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">//单例仓库类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StoreHouse</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//仓库商品数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">quantity</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="comment">//自己在内部实例化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">StoreHouse</span> <span class="variable">ourInstance</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StoreHouse</span>();;</span><br><span class="line">    <span class="comment">//让外部通过调用getInstance()方法来返回唯一的实例。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> StoreHouse <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ourInstance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//封闭构造函数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">StoreHouse</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setQuantity</span><span class="params">(<span class="type">int</span> quantity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.quantity = quantity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getQuantity</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> quantity;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//搬货工人类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Carrier</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> StoreHouse mStoreHouse;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Carrier</span><span class="params">(StoreHouse storeHouse)</span>&#123;</span><br><span class="line">        mStoreHouse = storeHouse;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//搬货进仓库</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">MoveIn</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">        mStoreHouse.setQuantity(mStoreHouse.getQuantity()+i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//搬货出仓库</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">MoveOut</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">        mStoreHouse.setQuantity(mStoreHouse.getQuantity()-i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//工人搬运测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SinglePattern</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">StoreHouse</span> <span class="variable">mStoreHouse1</span> <span class="operator">=</span> StoreHouse.getInstance();</span><br><span class="line">        <span class="type">StoreHouse</span> <span class="variable">mStoreHouse2</span> <span class="operator">=</span> StoreHouse.getInstance();</span><br><span class="line">        <span class="type">Carrier</span> <span class="variable">Carrier1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Carrier</span>(mStoreHouse1);</span><br><span class="line">        <span class="type">Carrier</span> <span class="variable">Carrier2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Carrier</span>(mStoreHouse2);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;两个是不是同一个？&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(mStoreHouse1.equals(mStoreHouse2))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;是同一个&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;不是同一个&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//搬运工搬完货物之后出来汇报仓库商品数量</span></span><br><span class="line">        Carrier1.MoveIn(<span class="number">30</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;仓库商品余量：&quot;</span>+Carrier1.mStoreHouse.getQuantity());</span><br><span class="line">        Carrier2.MoveOut(<span class="number">50</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;仓库商品余量：&quot;</span>+Carrier2.mStoreHouse.getQuantity());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="多种单例模式实现方式"><a href="#多种单例模式实现方式" class="headerlink" title="多种单例模式实现方式"></a>多种单例模式实现方式</h4><h5 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h5><ul><li>依赖JVM类加载机制，保证单例只会被创建一次，即线程安全</li><li>JVM在类的初始化阶段，会执行类的初始化</li><li>在执行类的初始化的时候，JVM会去获取一个锁，这个所可以同步多个线程对同一个类的初始化<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 加载该类时，单例就会自动被创建</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  <span class="type">Singleton</span> <span class="variable">ourInstance</span>  <span class="operator">=</span> <span class="keyword">new</span>  <span class="title class_">Singleton</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2. 构造函数 设置为 私有权限</span></span><br><span class="line">    <span class="comment">// 原因：禁止他人创建实例 </span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3. 通过调用静态方法获得创建的单例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  Singleton <span class="title function_">newInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ourInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h5></li><li>根据枚举类型的下述特点，满足单例模式所需的创建单例，线程安全，实现简介的需求</li><li><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202303261509469.jpeg" alt="img"></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义1个枚举的元素，即为单例类的1个实例</span></span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 隐藏了1个空的、私有的 构造方法</span></span><br><span class="line">    <span class="comment">// private Singleton () &#123;&#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取单例的方式：</span></span><br><span class="line"><span class="type">Singleton</span> <span class="variable">singleton</span> <span class="operator">=</span> Singleton.INSTANCE;</span><br></pre></td></tr></table></figure><h5 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h5><ul><li>单例创建时机可控，有需要的时候才手动创建单例</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 类加载时，先不自动创建单例</span></span><br><span class="line">   <span class="comment">//  即，将单例的引用先赋值为 Null</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  <span class="type">Singleton</span> <span class="variable">ourInstance</span>  <span class="operator">=</span> <span class="literal">null</span>；</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 构造函数 设置为 私有权限</span></span><br><span class="line">    <span class="comment">// 原因：禁止他人创建实例 </span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3. 需要时才手动调用 newInstance（） 创建 单例   </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  Singleton <span class="title function_">newInstance</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 先判断单例是否为空，以避免重复创建</span></span><br><span class="line">    <span class="keyword">if</span>( ourInstance == <span class="literal">null</span>)&#123;</span><br><span class="line">        ourInstance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ourInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="问题-3"><a href="#问题-3" class="headerlink" title="问题"></a>问题</h4><ul><li>对于懒汉会存在线程不安全的时候，特别是在多线程时候会出现以下问题</li><li><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202303261512668.png" alt="img"></li></ul><h4 id="同步锁"><a href="#同步锁" class="headerlink" title="同步锁"></a>同步锁</h4><ul><li>使用同步锁synchronized，锁住创建单例的方法，防止多个线程同时调用，从而避免造成单例被多次创建</li><li>getInstance（）方法块只能运行在一个线程中</li><li>倘若此段代码已在一个线程中运行，则另外一个线程试图运行该块代码，则会被一直阻塞二一直等待。<h5 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 写法1</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 类加载时，先不自动创建单例</span></span><br><span class="line">    <span class="comment">//  即，将单例的引用先赋值为 Null</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  <span class="type">Singleton</span> <span class="variable">ourInstance</span>  <span class="operator">=</span> <span class="literal">null</span>；</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2. 构造函数 设置为 私有权限</span></span><br><span class="line">    <span class="comment">// 原因：禁止他人创建实例 </span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 3. 加入同步锁</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 先判断单例是否为空，以避免重复创建</span></span><br><span class="line">        <span class="keyword">if</span> ( ourInstance == <span class="literal">null</span> )</span><br><span class="line">            ourInstance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">        <span class="keyword">return</span> ourInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法2</span></span><br><span class="line"><span class="comment">// 该写法的作用与上述写法作用相同，只是写法有所区别</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>&#123; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 加入同步锁</span></span><br><span class="line">        <span class="keyword">synchronized</span>(Singleton.class) &#123;</span><br><span class="line">            <span class="keyword">if</span> (instance == <span class="literal">null</span>)</span><br><span class="line">                instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="双重校验锁"><a href="#双重校验锁" class="headerlink" title="双重校验锁"></a>双重校验锁</h4><ul><li>在同步锁的基础上，添加多一层if判断，若单例已经创建，则不需要执行加锁操作就可以获取实例，从而提高性能</li></ul><h5 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  <span class="type">Singleton</span> <span class="variable">ourInstance</span>  <span class="operator">=</span> <span class="literal">null</span>；</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  Singleton <span class="title function_">newInstance</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="comment">// 加入双重校验锁</span></span><br><span class="line">    <span class="comment">// 校验锁1：第1个if</span></span><br><span class="line">    <span class="keyword">if</span>( ourInstance == <span class="literal">null</span>)&#123;  <span class="comment">// ①</span></span><br><span class="line">     <span class="keyword">synchronized</span> (Singleton.class)&#123; <span class="comment">// ②</span></span><br><span class="line">      <span class="comment">// 校验锁2：第2个 if</span></span><br><span class="line">      <span class="keyword">if</span>( ourInstance == <span class="literal">null</span>)&#123;</span><br><span class="line">          ourInstance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">        <span class="keyword">return</span> ourInstance;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 说明</span></span><br><span class="line"><span class="comment">// 校验锁1：第1个if</span></span><br><span class="line"><span class="comment">// 作用：若单例已创建，则直接返回已创建的单例，无需再执行加锁操作</span></span><br><span class="line"><span class="comment">// 即直接跳到执行 return ourInstance</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 校验锁2：第2个 if </span></span><br><span class="line"><span class="comment">// 作用：防止多次创建单例问题</span></span><br><span class="line"><span class="comment">// 原理</span></span><br><span class="line">  <span class="comment">// 1. 线程A调用newInstance()，当运行到②位置时，此时线程B也调用了newInstance()</span></span><br><span class="line">  <span class="comment">// 2. 因线程A并没有执行instance = new Singleton();，此时instance仍为空，因此线程B能突破第1层 if 判断，运行到①位置等待synchronized中的A线程执行完毕</span></span><br><span class="line">  <span class="comment">// 3. 当线程A释放同步锁时，单例已创建，即instance已非空</span></span><br><span class="line">  <span class="comment">// 4. 此时线程B 从①开始执行到位置②。此时第2层 if 判断 = 为空（单例已创建），因此也不会创建多余的实例</span></span><br></pre></td></tr></table></figure><h4 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h4><ul><li>更具静态内部类的特性，同步解决按需加载，线程安全的问题，同时实现简洁</li><li>在静态内部类中创建单例，在装载该内部类的时候才会去创建单例</li><li>线程安全：类是由JVM加载，而JVM只会加载一遍，保证只有一个单例</li></ul><h5 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 1. 创建静态内部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Singleton2</span> &#123;</span><br><span class="line">       <span class="comment">// 在静态内部类里创建单例</span></span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">static</span>  <span class="type">Singleton</span> <span class="variable">ourInstance</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>()；</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有构造函数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 延迟加载、按需创建</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  Singleton <span class="title function_">newInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Singleton2.ourInstance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用过程说明：</span></span><br><span class="line">      <span class="comment">// 1. 外部调用类的newInstance() </span></span><br><span class="line">      <span class="comment">// 2. 自动调用Singleton2.ourInstance</span></span><br><span class="line">       <span class="comment">// 2.1 此时单例类Singleton2得到初始化</span></span><br><span class="line">       <span class="comment">// 2.2 而该类在装载 &amp; 被初始化时，会初始化它的静态域，从而创建单例；</span></span><br><span class="line">       <span class="comment">// 2.3 由于是静态域，因此只会JVM只会加载1遍，Java虚拟机保证了线程安全性</span></span><br><span class="line">      <span class="comment">// 3. 最终只创建1个单</span></span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202303261537777.png" alt="img"></p><h3 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h3><h4 id="简介-5"><a href="#简介-5" class="headerlink" title="简介"></a>简介</h4><ul><li>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示</li><li>在用户不知道对象的建造过程和细节的情况下就可以直接创建复杂的对象。</li><li>建造者模式负责按照是顺序创建复杂对象（把内部的建造过程和细节隐藏藏匿起来）</li></ul><h4 id="解决问题-3"><a href="#解决问题-3" class="headerlink" title="解决问题"></a>解决问题</h4><ul><li>方便用户创建复杂的对象</li><li>代码复用性以及封装性（将对象构建过程和细节进行封装以及复用）</li><li>方便解耦，方便控制对象的创建，方便于拓展。</li></ul><h4 id="UML类图-3"><a href="#UML类图-3" class="headerlink" title="UML类图"></a>UML类图</h4><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202303270853304.png" alt="img"></p><h4 id="模式讲解"><a href="#模式讲解" class="headerlink" title="模式讲解"></a>模式讲解</h4><ol><li>指挥者直接和客户进行需求沟通</li><li>沟通后指挥者将客户创建产品的需求划分为各个部件的建造请求</li><li>将各个部件的建造请求委派到具体的建造者</li><li>各个具体建造者负责进行产品部件的构建</li><li>最终构建成具体产品。</li></ol><h4 id="情景代入-1"><a href="#情景代入-1" class="headerlink" title="情景代入"></a>情景代入</h4><ul><li>背景：小成希望去电脑城买一台组装的台式主机</li><li>过程：   </li></ul><ol><li>电脑城老板（Diretor）和小成（Client）进行需求沟通（买来打游戏？学习？看片？）</li><li>了解需求后，电脑城老板将小成需要的主机划分为各个部件（Builder）的建造请求（CPU、主板blabla）</li><li>指挥装机人员（ConcreteBuilder）去构建组件；</li><li>将组件组装起来成小成需要的电脑（Product）；</li></ol><h5 id="举例实例-1"><a href="#举例实例-1" class="headerlink" title="举例实例"></a>举例实例</h5><ol><li>定义组装的过程：组装电脑的过程<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Builder</span>&#123;</span><br><span class="line"><span class="comment">//第一步：CPU</span></span><br><span class="line"><span class="comment">//声明为抽象方法，具体由子类实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">BuildCPU</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//第二步：装主板</span></span><br><span class="line"><span class="comment">//声明为抽象方法，具体由子类实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">BuildMainboard</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//第三步：装硬盘</span></span><br><span class="line"><span class="comment">//声明为抽象方法，具体由子类实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">BuildHD</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//返回产品的方法：获得组装好的电脑</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> Computer <span class="title function_">GetCompputer</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>电脑城老板委派任务给装机人员<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Director</span>&#123;</span><br><span class="line"><span class="comment">//指挥装机人员组装的电脑</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Construct</span><span class="params">(Builder builder)</span>&#123;</span><br><span class="line">builder.BuildCPU();</span><br><span class="line">builder.BuildMainboard();</span><br><span class="line">builder.BuuildHD();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>创建具体的建造者：装机人员<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteBuilder</span> <span class="keyword">extends</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line">    <span class="comment">//创建产品实例</span></span><br><span class="line">    <span class="type">Computer</span> <span class="variable">computer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Computer</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//组装产品</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">BuildCPU</span><span class="params">()</span>&#123;</span><br><span class="line">        computer.Add(<span class="string">&quot;组装CPU&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">BuilMainboard</span><span class="params">()</span>&#123;</span><br><span class="line">        computer.Add(<span class="string">&quot;组装主板&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">BuildHD</span><span class="params">()</span>&#123;</span><br><span class="line">        computer.Add(<span class="string">&quot;组装硬盘&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回组装成功的电脑</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Computer <span class="title function_">GetComputer</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> computer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>定义具体产品类：电脑<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Computer</span>&#123;</span><br><span class="line"><span class="comment">//电脑组件的集合</span></span><br><span class="line"><span class="keyword">private</span> List&lt;String&gt; parts = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"><span class="comment">//用于将组件组装到电脑</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Add</span><span class="params">(String part)</span>&#123;</span><br><span class="line">part.add (part);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Show</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>;&lt;part.size();i++)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;组件&quot;</span>+part.get(i)+<span class="string">&quot;装好了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;电脑组装完成，请验收&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>客户端调用-小成到电脑找了老板买电脑</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Builder</span> Pattern&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//逛了很久终于发现一家合适的电脑店</span></span><br><span class="line"><span class="comment">//找到该店的老板和装机人员</span></span><br><span class="line">  <span class="type">Director</span> <span class="variable">director</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Director</span>();</span><br><span class="line">  <span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteBuilder</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//沟通需求后，老板叫装机人员去装电脑</span></span><br><span class="line">director.Construct(builder);</span><br><span class="line"></span><br><span class="line"><span class="comment">//装完后，组装人员搬来组装好的电脑</span></span><br><span class="line"><span class="type">Computer</span> <span class="variable">computer</span> <span class="operator">=</span> builder.GetComputer();</span><br><span class="line"><span class="comment">//组装人员展示电脑给小成看</span></span><br><span class="line">computer.Show()；</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="问题-4"><a href="#问题-4" class="headerlink" title="问题"></a>问题</h4><ul><li>建造者模式所创建的产品一般具有较多的共同点，其组成部分相似；如果产品之间的差异性很大，则不适合使用建造者模式，因此其使用范围受到一定的限制。</li><li>如果产品的内部变化复杂，可能会导致需要定义很多具体建造者类来实现这种变化，导致系统变得很庞大。</li></ul><h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><h4 id="简介-6"><a href="#简介-6" class="headerlink" title="简介"></a>简介</h4><ul><li>它允许通过复制现有的对象来创建新的对象，而不是通过创建新的实例并初始化它们来创建对象。这种模式通常用于创建具有相同属性的多个对象，以避免重复的初始化过程。在原型模式中，原型对象是创建新对象的模板，新对象是通过复制原型对象来创建的。原型模式的实现通常需要实现 Cloneable 接口或者使用序列化和反序列化来实现对象的复制。</li></ul><h4 id="UML类图-4"><a href="#UML类图-4" class="headerlink" title="UML类图"></a>UML类图</h4><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202303271043974.png" alt="image-20230327104312924"></p><h4 id="解决问题-4"><a href="#解决问题-4" class="headerlink" title="解决问题"></a>解决问题</h4><ul><li>逃避构造函数的约束。</li></ul><h4 id="举例实例-2"><a href="#举例实例-2" class="headerlink" title="举例实例"></a>举例实例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Shape</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span> &#123;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> String id;</span><br><span class="line">   <span class="keyword">protected</span> String type;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getType</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> type;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> id;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.id = id;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> Object <span class="title function_">clone</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="type">Object</span> <span class="variable">clone</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         clone = <span class="built_in">super</span>.clone();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> clone;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Rectangle</span><span class="params">()</span>&#123;</span><br><span class="line">     type = <span class="string">&quot;Rectangle&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Inside Rectangle::draw() method.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Square</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Square</span><span class="params">()</span>&#123;</span><br><span class="line">     type = <span class="string">&quot;Square&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Inside Square::draw() method.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">()</span>&#123;</span><br><span class="line">     type = <span class="string">&quot;Circle&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Inside Circle::draw() method.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShapeCache</span> &#123;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> Hashtable&lt;String, Shape&gt; shapeMap </span><br><span class="line">      = <span class="keyword">new</span> <span class="title class_">Hashtable</span>&lt;String, Shape&gt;();</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> Shape <span class="title function_">getShape</span><span class="params">(String shapeId)</span> &#123;</span><br><span class="line">      <span class="type">Shape</span> <span class="variable">cachedShape</span> <span class="operator">=</span> shapeMap.get(shapeId);</span><br><span class="line">      <span class="keyword">return</span> (Shape) cachedShape.clone();</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 对每种形状都运行数据库查询，并创建该形状</span></span><br><span class="line">   <span class="comment">// shapeMap.put(shapeKey, shape);</span></span><br><span class="line">   <span class="comment">// 例如，我们要添加三种形状</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">loadCache</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="type">Circle</span> <span class="variable">circle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Circle</span>();</span><br><span class="line">      circle.setId(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">      shapeMap.put(circle.getId(),circle);</span><br><span class="line"> </span><br><span class="line">      <span class="type">Square</span> <span class="variable">square</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Square</span>();</span><br><span class="line">      square.setId(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">      shapeMap.put(square.getId(),square);</span><br><span class="line"> </span><br><span class="line">      <span class="type">Rectangle</span> <span class="variable">rectangle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Rectangle</span>();</span><br><span class="line">      rectangle.setId(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">      shapeMap.put(rectangle.getId(),rectangle);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrototypePatternDemo</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      ShapeCache.loadCache();</span><br><span class="line"> </span><br><span class="line">      <span class="type">Shape</span> <span class="variable">clonedShape</span> <span class="operator">=</span> (Shape) ShapeCache.getShape(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;Shape : &quot;</span> + clonedShape.getType());        </span><br><span class="line"> </span><br><span class="line">      <span class="type">Shape</span> <span class="variable">clonedShape2</span> <span class="operator">=</span> (Shape) ShapeCache.getShape(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;Shape : &quot;</span> + clonedShape2.getType());        </span><br><span class="line"> </span><br><span class="line">      <span class="type">Shape</span> <span class="variable">clonedShape3</span> <span class="operator">=</span> (Shape) ShapeCache.getShape(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;Shape : &quot;</span> + clonedShape3.getType());        </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="问题-5"><a href="#问题-5" class="headerlink" title="问题"></a>问题</h4><ul><li>配备克隆方法需要对类的功能进行通盘考虑，这对于全新的类不是很男</li><li>必须实现Cloneable接口</li></ul><h4 id="应用-1"><a href="#应用-1" class="headerlink" title="应用"></a>应用</h4><ul><li>资源优化</li><li>类初始化需要消化很多资源</li><li>一个对象多个修改者</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设计模式-创新型模式&quot;&gt;&lt;a href=&quot;#设计模式-创新型模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式-创新型模式&quot;&gt;&lt;/a&gt;设计模式-创新型模式&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="设计模式" scheme="https://kalyan-zitiu.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="基础知识" scheme="https://kalyan-zitiu.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Goal解析以及进阶练习</title>
    <link href="https://kalyan-zitiu.github.io/2023/01/06/IC-%E7%BB%83%E4%B9%A0%E9%A2%98%E8%A7%A33/"/>
    <id>https://kalyan-zitiu.github.io/2023/01/06/IC-%E7%BB%83%E4%B9%A0%E9%A2%98%E8%A7%A33/</id>
    <published>2023-01-06T07:00:04.000Z</published>
    <updated>2023-01-06T07:33:07.147Z</updated>
    
    <content type="html"><![CDATA[<h1 id="goal解析"><a href="#goal解析" class="headerlink" title="goal解析"></a>goal解析</h1><p>请你设计一个可以解释字符串 command 的 Goal 解析器 。</p><ul><li>command 由 “G”、”()” 和/或 “(al)” 按某种顺序组成。</li><li>Goal 解析器会将 “G” 解释为字符串 “G”、”()” 解释为字符串 “o” ，”(al)” 解释为字符串 “al” 。然后，按原顺序将经解释得到的字符串连接成一个字符串。</li><li>给你字符串 command ，返回 Goal 解析器 对 command 的解释结果。</li></ul><h2 id="P-题解"><a href="#P-题解" class="headerlink" title="P-题解"></a>P-题解</h2><p>又是偷懒的一天，直接用库函数了</p><ol><li>需要注意的是下面的括号是要转义的，不然会识别成null。</li><li>此方法的时间复杂度会较大，个人猜测是函数内部的循环或条件语句分析相对O-题解比较复杂。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">interpret</span><span class="params">(String command)</span> &#123;</span><br><span class="line">    command = command.replace(<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;G&#x27;</span>);</span><br><span class="line">    command = command.replaceAll(<span class="string">&quot;\\(\\)&quot;</span>,<span class="string">&quot;o&quot;</span>);</span><br><span class="line">    command = command.replaceAll(<span class="string">&quot;\\(al\\)&quot;</span>,<span class="string">&quot;al&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> command;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="O-题解"><a href="#O-题解" class="headerlink" title="O-题解"></a>O-题解</h2><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><ol><li>本题只会出现”G”,”()”以及”(al)”所以不符合”（）”与”G”的条件一律可以按照”（al）”处理。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">interpret</span><span class="params">(String command)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">res</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; command.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (command.charAt(i) == <span class="string">&#x27;G&#x27;</span>) &#123;</span><br><span class="line">                res.append(<span class="string">&quot;G&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (command.charAt(i) == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (command.charAt(i + <span class="number">1</span>) == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">                    res.append(<span class="string">&quot;o&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    res.append(<span class="string">&quot;al&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">来源：力扣（LeetCode）</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;goal解析&quot;&gt;&lt;a href=&quot;#goal解析&quot; class=&quot;headerlink&quot; title=&quot;goal解析&quot;&gt;&lt;/a&gt;goal解析&lt;/h1&gt;&lt;p&gt;请你设计一个可以解释字符串 command 的 Goal 解析器 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;comman</summary>
      
    
    
    
    <category term="leetccode" scheme="https://kalyan-zitiu.github.io/categories/leetccode/"/>
    
    
    <category term="练习" scheme="https://kalyan-zitiu.github.io/tags/%E7%BB%83%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>TinyURL 的加密与解密</title>
    <link href="https://kalyan-zitiu.github.io/2023/01/05/IC-%E7%BB%83%E4%B9%A0%E9%A2%98%E8%A7%A32/"/>
    <id>https://kalyan-zitiu.github.io/2023/01/05/IC-%E7%BB%83%E4%B9%A0%E9%A2%98%E8%A7%A32/</id>
    <published>2023-01-05T09:40:04.000Z</published>
    <updated>2023-01-05T11:31:21.200Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TinyURL-的加密与解密"><a href="#TinyURL-的加密与解密" class="headerlink" title="TinyURL 的加密与解密"></a>TinyURL 的加密与解密</h1><ol><li>TinyURL 是一种 URL 简化服务， 比如：当你输入一个 URL <a href="https://leetcode.com/problems/design-tinyurl">https://leetcode.com/problems/design-tinyurl</a> 时，它将返回一个简化的URL <a href="http://tinyurl.com/4e9iAk">http://tinyurl.com/4e9iAk</a> 。请你设计一个类来加密与解密 TinyURL 。</li></ol><ul><li>加密和解密算法如何设计和运作是没有限制的，你只需要保证一个 URL 可以被加密成一个 TinyURL ，并且这个 TinyURL 可以用解密方法恢复成原本的 URL 。<br>实现 Solution 类：</li><li>Solution() 初始化 TinyURL 系统对象。</li><li>String encode(String longUrl) 返回 longUrl 对应的 TinyURL 。</li><li>String decode(String shortUrl) 返回 shortUrl 原本的 URL 。题目数据保证给定的 shortUrl 是由同一个系统对象加密的。</li></ul><h2 id="P-题解"><a href="#P-题解" class="headerlink" title="P-题解"></a>P-题解</h2><p>其实我第一时间想到的就只有异或运算而已</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Encodes a URL to a shortened URL.</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">encode</span><span class="params">(String longUrl)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> syscode(longUrl);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Decodes a shortened URL to its original URL.</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">decode</span><span class="params">(String shortUrl)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> syscode(shortUrl);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">syscode</span><span class="params">(String index)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">key</span> <span class="operator">=</span> <span class="number">114514</span>;</span><br><span class="line">        <span class="type">char</span> mixcode[] = index.toCharArray();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;mixcode.length;i++)&#123;</span><br><span class="line">            mixcode[i] = (<span class="type">char</span>)(mixcode[i]^key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(mixcode);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="O-题解"><a href="#O-题解" class="headerlink" title="O-题解"></a>O-题解</h2><h3 id="来源leetcode"><a href="#来源leetcode" class="headerlink" title="(来源leetcode)"></a>(来源leetcode)</h3><h3 id="自增"><a href="#自增" class="headerlink" title="自增"></a>自增</h3><p>建立哈希表，用自增的id作为URL的键，每次接收一个URL都会使id递增，从而将键值对database进行存储，然后返回带有id的字符串作为shorURL。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Codec</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer, String&gt; dataBase = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, String&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">encode</span><span class="params">(String longUrl)</span> &#123;</span><br><span class="line">        id++;</span><br><span class="line">        dataBase.put(id, longUrl);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;http://tinyurl.com/&quot;</span> + id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">decode</span><span class="params">(String shortUrl)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> shortUrl.lastIndexOf(<span class="string">&#x27;/&#x27;</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">key</span> <span class="operator">=</span> Integer.parseInt(shortUrl.substring(p));</span><br><span class="line">        <span class="keyword">return</span> dataBase.get(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="哈希生成"><a href="#哈希生成" class="headerlink" title="哈希生成"></a>哈希生成</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Codec</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">K1</span> <span class="operator">=</span> <span class="number">1117</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">K2</span> <span class="operator">=</span> <span class="number">1000000007</span>;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer, String&gt; dataBase = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, String&gt;();</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Integer&gt; urlToKey = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Integer&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">encode</span><span class="params">(String longUrl)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (urlToKey.containsKey(longUrl)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;http://tinyurl.com/&quot;</span> + urlToKey.get(longUrl);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">key</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">base</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; longUrl.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> longUrl.charAt(i);</span><br><span class="line">            key = (<span class="type">int</span>) ((key + (<span class="type">long</span>) c * base) % K2);</span><br><span class="line">            base = (base * K1) % K2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (dataBase.containsKey(key)) &#123;</span><br><span class="line">            key = (key + <span class="number">1</span>) % K2;</span><br><span class="line">        &#125;</span><br><span class="line">        dataBase.put(key, longUrl);</span><br><span class="line">        urlToKey.put(longUrl, key);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;http://tinyurl.com/&quot;</span> + key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">decode</span><span class="params">(String shortUrl)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> shortUrl.lastIndexOf(<span class="string">&#x27;/&#x27;</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">key</span> <span class="operator">=</span> Integer.parseInt(shortUrl.substring(p));</span><br><span class="line">        <span class="keyword">return</span> dataBase.get(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;TinyURL-的加密与解密&quot;&gt;&lt;a href=&quot;#TinyURL-的加密与解密&quot; class=&quot;headerlink&quot; title=&quot;TinyURL 的加密与解密&quot;&gt;&lt;/a&gt;TinyURL 的加密与解密&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;TinyURL 是一种 URL </summary>
      
    
    
    
    <category term="leetccode" scheme="https://kalyan-zitiu.github.io/categories/leetccode/"/>
    
    
    <category term="练习" scheme="https://kalyan-zitiu.github.io/tags/%E7%BB%83%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>根据给定数字划分数组</title>
    <link href="https://kalyan-zitiu.github.io/2023/01/03/IC-%E7%BB%83%E4%B9%A0%E9%A2%98%E8%A7%A3/"/>
    <id>https://kalyan-zitiu.github.io/2023/01/03/IC-%E7%BB%83%E4%B9%A0%E9%A2%98%E8%A7%A3/</id>
    <published>2023-01-03T10:20:04.000Z</published>
    <updated>2023-01-05T09:35:45.775Z</updated>
    
    <content type="html"><![CDATA[<h2 id="根据给定数字划分数组"><a href="#根据给定数字划分数组" class="headerlink" title="根据给定数字划分数组"></a>根据给定数字划分数组</h2><p>给你一个下标从 0 开始的整数数组 nums 和一个整数 pivot 。请你将 nums 重新排列，使得以下条件均成立：</p><ul><li>所有小于 pivot 的元素都出现在所有大于 pivot 的元素 之前 。</li><li>所有等于 pivot 的元素都出现在小于和大于 pivot 的元素 中间 。</li><li>小于 pivot 的元素之间和大于 pivot 的元素之间的 相对顺序 不发生改变。<ul><li>更正式的，考虑每一对 pi，pj ，pi 是初始时位置 i 元素的新位置，pj 是初始时位置 j 元素的新位置。对于小于 pivot 的元素，如果 i &lt; j 且 nums[i] &lt; pivot 和 nums[j] &lt; pivot 都成立，那么 pi &lt; pj 也成立。类似的，对于大于 pivot 的元素，如果 i &lt; j 且 nums[i] &gt; pivot 和 nums[j] &gt; pivot 都成立，那么 pi &lt; pj 。</li></ul></li></ul><h3 id="P-题解"><a href="#P-题解" class="headerlink" title="P-题解"></a>P-题解</h3><p>总体来说时空都是比较占优的空间损耗也不大</p><ol><li>双指针left从0开始递增以及right从数组后置位开始递减，分别用作于比较大于pivot以及小于pivot的，优点在于能够按照原本的次序在新的数组里面安排位置。</li><li>其实等于pivot可以不做比较，可以在新数组的所有元素填满pivot值，然后通过与原数组比较前后开始占位变值。</li><li>其实这里的时间复杂度应该是O（N）的。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] pivotArray(<span class="type">int</span>[] nums, <span class="type">int</span> pivot) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span>nums.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span>length-<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> newNum[] = <span class="keyword">new</span> <span class="title class_">int</span> [length];</span><br><span class="line">    Arrays.fill(newNum,pivot);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> min=<span class="number">0</span>,max=length-<span class="number">1</span>;left&lt;length&amp;&amp;right&gt;=<span class="number">0</span>;left++,right--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[left]&lt;pivot)&#123;</span><br><span class="line">            newNum[min++]=nums[left];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(nums[right]&gt;pivot)&#123;</span><br><span class="line">            newNum[max--]=nums[right];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newNum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="O-题解"><a href="#O-题解" class="headerlink" title="O-题解"></a>O-题解</h3><h4 id="简单的三次遍历"><a href="#简单的三次遍历" class="headerlink" title="简单的三次遍历"></a>简单的三次遍历</h4><p>时间较快，空间损耗相对大</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] pivotArray(<span class="type">int</span>[] nums, <span class="type">int</span> pivot) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length, k = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) <span class="keyword">if</span> (nums[i] &lt; pivot) ans[k++] = nums[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) <span class="keyword">if</span> (nums[i] == pivot) ans[k++] = nums[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) <span class="keyword">if</span> (nums[i] &gt; pivot) ans[k++] = nums[i];</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="划分以及拼接"><a href="#划分以及拼接" class="headerlink" title="划分以及拼接"></a>划分以及拼接</h4><p>运行时间可以说是题解里最长的了，而且空间也不是最优秀的。可能是因为增强for循环的或者计算长度的原因，比上面多一次循环的方法时间还要久。</p><ol><li>三个数据类型为Integer的ArrayList对象，分别储存三个不同的情况的数值</li><li>计算所有List的长度，建立新的数组，增强循环来依次输入顺序数值</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] pivotArray(<span class="type">int</span>[] nums, <span class="type">int</span> pivot) </span><br><span class="line">&#123;</span><br><span class="line">    List&lt;Integer&gt; a = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; b = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; c = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> x: nums)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; pivot)</span><br><span class="line">        &#123;</span><br><span class="line">            a.add(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (x == pivot)</span><br><span class="line">        &#123;</span><br><span class="line">            b.add(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            c.add(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> a.size() + b.size() + c.size();</span><br><span class="line">    <span class="type">int</span> [] res = <span class="keyword">new</span> <span class="title class_">int</span> [n];</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> x : a)</span><br><span class="line">    &#123;</span><br><span class="line">        res[i ++] = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> x : b)</span><br><span class="line">    &#123;</span><br><span class="line">        res[i ++] = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> x : c)</span><br><span class="line">    &#123;</span><br><span class="line">        res[i ++] = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;根据给定数字划分数组&quot;&gt;&lt;a href=&quot;#根据给定数字划分数组&quot; class=&quot;headerlink&quot; title=&quot;根据给定数字划分数组&quot;&gt;&lt;/a&gt;根据给定数字划分数组&lt;/h2&gt;&lt;p&gt;给你一个下标从 0 开始的整数数组 nums 和一个整数 pivot 。请你</summary>
      
    
    
    
    <category term="leetccode" scheme="https://kalyan-zitiu.github.io/categories/leetccode/"/>
    
    
    <category term="练习" scheme="https://kalyan-zitiu.github.io/tags/%E7%BB%83%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>进程耗时计算</title>
    <link href="https://kalyan-zitiu.github.io/2023/01/01/%E8%A1%8C%E7%A8%8B%E8%80%97%E6%97%B6%E8%AE%A1%E6%97%B6/"/>
    <id>https://kalyan-zitiu.github.io/2023/01/01/%E8%A1%8C%E7%A8%8B%E8%80%97%E6%97%B6%E8%AE%A1%E6%97%B6/</id>
    <published>2023-01-01T08:45:04.000Z</published>
    <updated>2023-01-01T09:04:09.200Z</updated>
    
    <content type="html"><![CDATA[<h1 id="进程耗时计算"><a href="#进程耗时计算" class="headerlink" title="进程耗时计算"></a>进程耗时计算</h1><p>这是一个能够计算运行进程的包。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TimeTool</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">SimpleDateFormat</span> <span class="variable">fmt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;HH:mm:ss.SSS&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Task</span>&#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">check</span><span class="params">(String title,Task task)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (title==<span class="literal">null</span>)<span class="keyword">return</span>;</span><br><span class="line">        title = (title==<span class="literal">null</span>)?<span class="string">&quot;&quot;</span>:(<span class="string">&quot;【&quot;</span>+title+<span class="string">&quot;】&quot;</span>);</span><br><span class="line">        System.out.println(title);</span><br><span class="line">        System.out.println(<span class="string">&quot;开始:&quot;</span>+fmt.format(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">        <span class="type">long</span> <span class="variable">begin</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        task.execute();</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;结束:&quot;</span>+fmt.format(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">        <span class="type">double</span> <span class="variable">delta</span> <span class="operator">=</span> (end - begin)/<span class="number">1000.0</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;耗时:&quot;</span>+delta+<span class="string">&quot;秒&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------------------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><ol><li>在自建的软件包内建立一个TimeTool文件。</li><li>同包导入<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> 软件包名字.TimeTool.Task;</span><br></pre></td></tr></table></figure></li><li>调用方法<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TimeTool.check(<span class="string">&quot;此处填写此次进程测试的名字（随便起个名字，方便对比区分）&quot;</span>,<span class="keyword">new</span> <span class="title class_">Task</span>()&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//放入你需要测试的进程</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)；</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;进程耗时计算&quot;&gt;&lt;a href=&quot;#进程耗时计算&quot; class=&quot;headerlink&quot; title=&quot;进程耗时计算&quot;&gt;&lt;/a&gt;进程耗时计算&lt;/h1&gt;&lt;p&gt;这是一个能够计算运行进程的包。&lt;/p&gt;
&lt;h2 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;h</summary>
      
    
    
    
    <category term="工具" scheme="https://kalyan-zitiu.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="工具" scheme="https://kalyan-zitiu.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>二叉树（持续更新中）</title>
    <link href="https://kalyan-zitiu.github.io/2022/12/19/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%BB%83%E4%B9%A0/"/>
    <id>https://kalyan-zitiu.github.io/2022/12/19/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%BB%83%E4%B9%A0/</id>
    <published>2022-12-19T01:00:00.000Z</published>
    <updated>2022-12-19T01:02:27.710Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><h3 id="镜像二叉树"><a href="#镜像二叉树" class="headerlink" title="镜像二叉树"></a>镜像二叉树</h3><p>1.把左右根交换即可</p><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202212190900221.png" alt="image-20221219090003177"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">mirrorTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">temp</span> <span class="operator">=</span> root.left;</span><br><span class="line">        root.left = root.right;</span><br><span class="line">        root.right = temp;</span><br><span class="line">        mirrorTree(root.left);</span><br><span class="line">        mirrorTree(root.right);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="找出克隆二叉树中的相同节点"><a href="#找出克隆二叉树中的相同节点" class="headerlink" title="找出克隆二叉树中的相同节点"></a>找出克隆二叉树中的相同节点</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202212051005239.png" alt="image-20221205100529196"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> TreeNode <span class="title function_">getTargetCopy</span><span class="params">(<span class="keyword">final</span> TreeNode original, <span class="keyword">final</span> TreeNode cloned, <span class="keyword">final</span> TreeNode target)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (original == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (original == target) <span class="keyword">return</span> cloned;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">left</span> <span class="operator">=</span> getTargetCopy(original.left, cloned.left, target);</span><br><span class="line">        <span class="keyword">if</span> (left!=<span class="literal">null</span>) <span class="keyword">return</span> left;</span><br><span class="line">        <span class="keyword">return</span> getTargetCopy(original.right, cloned.right, target);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="HomeWork"><a href="#HomeWork" class="headerlink" title="HomeWork"></a>HomeWork</h2><h3 id="自定义树结点"><a href="#自定义树结点" class="headerlink" title="自定义树结点"></a>自定义树结点</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">     <span class="type">char</span> val;</span><br><span class="line">     TreeNode left;</span><br><span class="line">     TreeNode right;</span><br><span class="line">     TreeNode() &#123;&#125;</span><br><span class="line">     TreeNode(<span class="type">char</span> val) &#123; <span class="built_in">this</span>.val = val; &#125;</span><br><span class="line">     TreeNode(<span class="type">char</span> val, TreeNode left, TreeNode right) &#123;</span><br><span class="line">         <span class="built_in">this</span>.val = val;</span><br><span class="line">         <span class="built_in">this</span>.left = left;</span><br><span class="line">         <span class="built_in">this</span>.right = right;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><h3 id="1-先根序列构造二叉树：A-B-null-D-null-null-C-null-null"><a href="#1-先根序列构造二叉树：A-B-null-D-null-null-C-null-null" class="headerlink" title="1. 先根序列构造二叉树：A B null D null null C null null"></a>1. 先根序列构造二叉树：A B null D null null C null null</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//一个全局变量，其实缺点也会很多，对于后面的方法均需要一个计时器，还有一种就是放在方法内的局部变量，跟着方法递归增加</span></span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//题目给的是字符串，可以用toCharArray()变换字符数组</span></span><br><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">CteateTree</span><span class="params">(<span class="type">char</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (count &lt; arr.length) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">val</span> <span class="operator">=</span> arr[count++];</span><br><span class="line">        <span class="comment">//当val值不等于空，这里把^当成空，就把新的带有val的节点赋值给真正意义上的根节点，往后的都是左右子树</span></span><br><span class="line">        <span class="keyword">if</span> (val != <span class="string">&#x27;^&#x27;</span>) &#123;</span><br><span class="line">            node = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(val);</span><br><span class="line">            node.left = CteateTree(arr);</span><br><span class="line">            node.right = CteateTree(arr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//这道题你也简单点理论上可以直接把^也带入结点,不做空值处理,起码在我这里是这样,上面的自定义树节点的基本存储数据类型是用了char.这样好像也可以节省后面遍历的空值处理问题</span></span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-对于1中生成的二叉树进行前序、中序、后序遍历。"><a href="#2-对于1中生成的二叉树进行前序、中序、后序遍历。" class="headerlink" title="2.对于1中生成的二叉树进行前序、中序、后序遍历。"></a>2.对于1中生成的二叉树进行前序、中序、后序遍历。</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//前序输出</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">preOrderTravera</span><span class="params">(TreeNode node)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node!=<span class="literal">null</span>) &#123;</span><br><span class="line">        System.out.print(node.val + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        preOrderTravera(node.left);</span><br><span class="line">        preOrderTravera(node.right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&#x27;^&#x27;</span>);</span><br><span class="line">        System.out.print(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//中序输出</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">inOrderTravera</span><span class="params">(TreeNode node)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node != <span class="literal">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">        inOrderTravera(node.left);</span><br><span class="line">        System.out.print(node.val + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        inOrderTravera(node.right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&#x27;^&#x27;</span>);</span><br><span class="line">        System.out.print(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//后序输出</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">postOrderTravera</span><span class="params">(TreeNode node)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node != <span class="literal">null</span>) &#123;</span><br><span class="line">        postOrderTravera(node.left);</span><br><span class="line">        postOrderTravera(node.right);</span><br><span class="line">        System.out.print(node.val + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&#x27;^&#x27;</span>);</span><br><span class="line">        System.out.print(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-计算1中生成的二叉树结点总数。"><a href="#3-计算1中生成的二叉树结点总数。" class="headerlink" title="3. 计算1中生成的二叉树结点总数。"></a>3. 计算1中生成的二叉树结点总数。</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//老样子,静态全局变量,你也可以局部变量,像下面一样,充当一个计数器的作用,只需要在实例方法中输入从0开始,效果是一样的,局部变量的好处就是当你使用完方法后会释放内存,也就是会比一直存在占用内存static全局变量更节省空间.</span></span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> num=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//思路很简单,遇到非空值计数器就+1.考虑到前面提到的^直接带入结点,这里还可能要加上值不为^</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">TreeNodeNum</span><span class="params">(TreeNode node,<span class="comment">/*，int num */</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">        num += <span class="number">1</span>;</span><br><span class="line">        TreeNodeNum(node.left);</span><br><span class="line">        TreeNodeNum(node.right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-计算1中生成二叉树的高度"><a href="#4-计算1中生成二叉树的高度" class="headerlink" title="4. 计算1中生成二叉树的高度"></a>4. 计算1中生成二叉树的高度</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//题目的主要问题是怎么在众多的左右子树中找出最大的根深度也就是普遍说的树高</span></span><br><span class="line"><span class="comment">//思路:递归判断,当这个结点为空的时候,则返回0,每次的递归都需要一次深度比较,找出最大的深度</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">leftNode</span> <span class="operator">=</span>maxDepth(root.left);</span><br><span class="line">        <span class="type">int</span> rightNode=maxDepth(root.right);</span><br><span class="line">        <span class="comment">//这里的+1是因为是根节点并没有参与计算,因此需要+上根结点</span></span><br><span class="line">        <span class="keyword">return</span> Math.max(leftNode,rightNode)+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-计算1中生成二叉树中度为1的节点数、度为2的结点数和叶子数。"><a href="#5-计算1中生成二叉树中度为1的节点数、度为2的结点数和叶子数。" class="headerlink" title="5.计算1中生成二叉树中度为1的节点数、度为2的结点数和叶子数。"></a>5.计算1中生成二叉树中度为1的节点数、度为2的结点数和叶子数。</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//总的思路就是判断左右指针的三种情况即可1.均为空 2.左空右不空(左不空右空)3.均不为空</span></span><br><span class="line"><span class="comment">//叶子结点数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">LeafNodeCount</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.left == <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>+LeafNodeCount(root.left)+LeafNodeCount(root.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> LeafNodeCount(root.left) + LeafNodeCount(root.right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">OneNodeCount</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.left == <span class="literal">null</span> &amp;&amp; root.right != <span class="literal">null</span> || root.left != <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>+OneNodeCount(root.left)+OneNodeCount(root.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> OneNodeCount(root.left) + OneNodeCount(root.right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">DoubleNodeCount</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.right != <span class="literal">null</span> &amp;&amp; root.left != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>+DoubleNodeCount(root.left) + DoubleNodeCount(root.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> DoubleNodeCount(root.left) + DoubleNodeCount(root.right);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="6-按照下面两个序列生成二叉树：先序：ABHFDECKG-；中序：HBDFAEKCG"><a href="#6-按照下面两个序列生成二叉树：先序：ABHFDECKG-；中序：HBDFAEKCG" class="headerlink" title="6.按照下面两个序列生成二叉树：先序：ABHFDECKG ；中序：HBDFAEKCG"></a>6.按照下面两个序列生成二叉树：先序：ABHFDECKG ；中序：HBDFAEKCG</h3><p>前序+中序构造二叉树<br>先序:根 [左子树]  [右子树]<br>中序:[左子树] 根 [右子树]</p><p>思路:只要遍历中序找到根节点,利用双指针确认左右子树遍历结果的长度,再利用先序方式构造即可</p><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202211221135621.png" alt="image-20221122113530560"></p><p>循环寻界+递归构造树</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">buildTrees</span><span class="params">(<span class="type">char</span> [] pre,<span class="type">char</span> [] in)</span> &#123;</span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line">    TreeNode root=buildTree(pre,<span class="number">0</span>,pre.length-<span class="number">1</span>,in,<span class="number">0</span>,in.length-<span class="number">1</span>);</span><br><span class="line">     <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//主体</span></span><br><span class="line"><span class="keyword">private</span> TreeNode <span class="title function_">buildTree</span><span class="params">(<span class="type">char</span> [] pre,<span class="type">int</span> PreLeft,<span class="type">int</span> PreRight,<span class="type">char</span> [] in,<span class="type">int</span> inLeft,<span class="type">int</span> inRight)</span> &#123;</span><br><span class="line"><span class="comment">//如果越界则表示结点为空</span></span><br><span class="line">      <span class="keyword">if</span>(PreLeft&gt;PreRight||inLeft&gt;inRight)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//开始构造,声明新结点</span></span><br><span class="line">   TreeNode root=<span class="keyword">new</span> <span class="title class_">TreeNode</span>(pre[PreLeft]);</span><br><span class="line"><span class="comment">//循环寻找中序的根节点,还能够确认左右子树边界</span></span><br><span class="line">         <span class="keyword">for</span>(<span class="type">int</span> i=inLeft;i&lt;=inRight;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(in[i]==pre[PreLeft])&#123;</span><br><span class="line"><span class="comment">//先序构造树,指针就定义为左右子树的区间,构造左子树             </span></span><br><span class="line">    root.left=buildTree(pre,PreLeft+<span class="number">1</span>,PreLeft+i-inLeft,in,inLeft,i-<span class="number">1</span>);</span><br><span class="line"><span class="comment">//变化右子树边界,构造右子树</span></span><br><span class="line">     root.right=buildTree(pre,i-inLeft+PreLeft+<span class="number">1</span>,PreRight,in,i+<span class="number">1</span>,inRight);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">         &#125;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="哈希表优化循环子过程"><a href="#哈希表优化循环子过程" class="headerlink" title="哈希表优化循环子过程"></a>哈希表优化循环子过程</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//过程几乎与上面的方法一样，只不过不需要每次递归后又进行循环来找到边界。</span></span><br><span class="line"><span class="comment">//提前把中序的所有遍历用哈希表储存起来即可。后面的取根直接依靠对应值来寻找序号，用来定界</span></span><br><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">buildTreeTwo</span><span class="params">(<span class="type">char</span> [] pre,<span class="type">char</span> [] in)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">PreLen</span> <span class="operator">=</span> pre.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">InLen</span> <span class="operator">=</span> pre.length;</span><br><span class="line">        Map&lt;Character,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(PreLen);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>;i&lt;InLen;i++)&#123;</span><br><span class="line">            map.put(in[i],i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> buildTreeTwo(pre,<span class="number">0</span>,PreLen-<span class="number">1</span>,map,<span class="number">0</span>,InLen-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> TreeNode <span class="title function_">buildTreeTwo</span><span class="params">(<span class="type">char</span>[]pre,<span class="type">int</span> PreLeft,<span class="type">int</span> PreRight,Map&lt;Character,Integer&gt; map,<span class="type">int</span> InLeft,<span class="type">int</span> InRight)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(PreLeft&gt;PreRight||InLeft&gt;InRight)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">char</span> <span class="variable">val</span> <span class="operator">=</span> pre[PreLeft];</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(val);</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> map.get(val);</span><br><span class="line">        root.left=buildTreeTwo(pre,PreLeft+<span class="number">1</span>,index-InLeft+PreLeft,map,InLeft,index-<span class="number">1</span>);</span><br><span class="line">        root.right=buildTreeTwo(pre,index-InLeft+PreLeft+<span class="number">1</span>,PreRight,map,index+<span class="number">1</span>,InRight);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="栈方法迭代"><a href="#栈方法迭代" class="headerlink" title="栈方法迭代"></a>栈方法迭代</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">buildTree</span><span class="params">(<span class="type">char</span>[] preorder, <span class="type">char</span>[] inorder)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (preorder == <span class="literal">null</span> || preorder.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(preorder[<span class="number">0</span>]);</span><br><span class="line">    Deque&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;TreeNode&gt;();</span><br><span class="line">    stack.push(root);</span><br><span class="line">    <span class="type">int</span> <span class="variable">inorderIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; preorder.length; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">preorderVal</span> <span class="operator">=</span> preorder[i];</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> stack.peek();</span><br><span class="line">        <span class="keyword">if</span> (node.val != inorder[inorderIndex]) &#123;</span><br><span class="line">            node.left = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(preorderVal);</span><br><span class="line">            stack.push(node.left);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; stack.peek().val == inorder[inorderIndex]) &#123;</span><br><span class="line">                node = stack.pop();</span><br><span class="line">                inorderIndex++;</span><br><span class="line">            &#125;</span><br><span class="line">            node.right = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(preorderVal);</span><br><span class="line">            stack.push(node.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉树遍历"><a href="#二叉树遍历" class="headerlink" title="二叉树遍历"></a>二叉树遍历</h2><h3 id="建立树节点"><a href="#建立树节点" class="headerlink" title="建立树节点"></a>建立树节点</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeNode</span>&#123;</span><br><span class="line"><span class="type">int</span> val;</span><br><span class="line">TreeNode left;</span><br><span class="line">TreeNode right;</span><br><span class="line">TreeNode()&#123;&#125;</span><br><span class="line">TreeNOde(<span class="type">int</span> val)&#123;</span><br><span class="line"><span class="type">this</span> <span class="variable">val</span> <span class="operator">=</span> val;</span><br><span class="line">&#125;</span><br><span class="line">TreeNode(<span class="type">int</span> val,TreeNode left,TreeNode right)&#123;</span><br><span class="line"><span class="built_in">this</span>.val = val;</span><br><span class="line"><span class="built_in">this</span>.left=left;</span><br><span class="line"><span class="built_in">this</span>.right=right;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">preOrderTraveral</span><span class="params">(TreeNode node)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(node==<span class="literal">null</span>)&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.print(node.data+<span class="string">&quot;&quot;</span>);</span><br><span class="line">preOrderTraveral(node.left);</span><br><span class="line">preOrderTraveral(node.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">inOrderTraveral</span><span class="params">(TreeNode node)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(node == <span class="literal">null</span>)&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">inOrderTraveral(node.left);</span><br><span class="line">System.out.print(node.data+<span class="string">&quot;&quot;</span>);</span><br><span class="line">inOrderTraveral(node.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">postOrderTraveral</span><span class="params">(TreeNode node)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(node == <span class="literal">null</span>)&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">postTraveral(node.left);</span><br><span class="line">postTraveral(node.right);</span><br><span class="line">System.out.print(node.data+<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="层次遍历"><a href="#层次遍历" class="headerlink" title="层次遍历"></a>层次遍历</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">leverOrder</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="comment">//声明一个队列对象</span></span><br><span class="line">        Queue&lt;TreeNode&gt; storage = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;TreeNode&gt;();</span><br><span class="line">        <span class="comment">// 根节点为空，返回空值</span></span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把结点拉入队列</span></span><br><span class="line">        storage.offer(root);</span><br><span class="line">        <span class="keyword">while</span>(!storage.isEmpty())&#123;</span><br><span class="line">        <span class="comment">//把队列首部拉出输出值并且访问左右子树结点</span></span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> storage.poll();</span><br><span class="line">            System.out.print(cur.val+<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="comment">//若左指针不为空，就把左子树拉入队列</span></span><br><span class="line">            <span class="keyword">if</span> (cur.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">                storage.offer(cur.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//若右指针不为空，就把右子树拉入队列</span></span><br><span class="line">            <span class="keyword">if</span> (cur.right!=<span class="literal">null</span>) &#123;</span><br><span class="line">                storage.offer(cur.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="Morris遍历"><a href="#Morris遍历" class="headerlink" title="Morris遍历"></a>Morris遍历</h3><p><a href="https://zitiu.top/2022/10/24/Morris%20%E9%81%8D%E5%8E%86/">https://zitiu.top/2022/10/24/Morris%20%E9%81%8D%E5%8E%86/</a></p><h2 id="leetcode"><a href="#leetcode" class="headerlink" title="leetcode"></a>leetcode</h2><h3 id="总思路"><a href="#总思路" class="headerlink" title="总思路"></a>总思路</h3><ol><li><p>只要提到树的话就几乎都会涉及到递归和回溯.</p></li><li><p>比较常用的算法思想就是深度和广度优先搜索</p><h3 id="617-合并二叉树"><a href="#617-合并二叉树" class="headerlink" title="617.合并二叉树"></a>617.合并二叉树</h3></li><li><p> 这道题我的思路很简单,就是递归遍历,进行创新节点的操作</p></li><li><p>可以分三种情况</p><ul><li>两个节点均为null值</li><li>一个节点为null,一个不为null值</li><li>两个节点都不是null值</li></ul></li></ol><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202211121621158.png" alt="image-20221112162114118"></p><p>实现1:深度优先搜索</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">merageTrees</span><span class="params">(TreeNode r1,TreeNode r2)</span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(r1==<span class="literal">null</span>) <span class="keyword">return</span> r2;</span><br><span class="line">   <span class="keyword">if</span>(r2==<span class="literal">null</span>) <span class="keyword">return</span> r1;</span><br><span class="line">   <span class="type">TreeNode</span> <span class="variable">metaTree</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(r1.val+r2.val);</span><br><span class="line">   metaTree.left = merageTrees(r1.left,r2.left);</span><br><span class="line">   metaTree.right= merageTrees(r1.right,r2.right);</span><br><span class="line">   <span class="keyword">return</span> metaTree;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现2:广度优先搜索</p><ol><li>主要实现:构建三个队列分别储存3颗树的每个节点</li></ol><ul><li>每次从队列种取出一个节点,判断两个原始树的结点是否为空<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> TreeNode <span class="title function_">mergeTrees</span><span class="params">(TreeNode t1, TreeNode t2)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (t1 == <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> t2;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (t2 == <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> t1;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="type">TreeNode</span> <span class="variable">merged</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(t1.val + t2.val);</span><br><span class="line">      Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;TreeNode&gt;();</span><br><span class="line">      Queue&lt;TreeNode&gt; queue1 = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;TreeNode&gt;();</span><br><span class="line">      Queue&lt;TreeNode&gt; queue2 = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;TreeNode&gt;();</span><br><span class="line">      queue.offer(merged);</span><br><span class="line">      queue1.offer(t1);</span><br><span class="line">      queue2.offer(t2);</span><br><span class="line">      <span class="keyword">while</span> (!queue1.isEmpty() &amp;&amp; !queue2.isEmpty()) &#123;</span><br><span class="line">          <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> queue.poll(), node1 = queue1.poll(), node2 = queue2.poll();</span><br><span class="line">          <span class="type">TreeNode</span> <span class="variable">left1</span> <span class="operator">=</span> node1.left, left2 = node2.left, right1 = node1.right, right2 = node2.right;</span><br><span class="line">          <span class="keyword">if</span> (left1 != <span class="literal">null</span> || left2 != <span class="literal">null</span>) &#123;</span><br><span class="line">              <span class="keyword">if</span> (left1 != <span class="literal">null</span> &amp;&amp; left2 != <span class="literal">null</span>) &#123;</span><br><span class="line">                  <span class="type">TreeNode</span> <span class="variable">left</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(left1.val + left2.val);</span><br><span class="line">                  node.left = left;</span><br><span class="line">                  queue.offer(left);</span><br><span class="line">                  queue1.offer(left1);</span><br><span class="line">                  queue2.offer(left2);</span><br><span class="line">              &#125; <span class="keyword">else</span> <span class="keyword">if</span> (left1 != <span class="literal">null</span>) &#123;</span><br><span class="line">                  node.left = left1;</span><br><span class="line">              &#125; <span class="keyword">else</span> <span class="keyword">if</span> (left2 != <span class="literal">null</span>) &#123;</span><br><span class="line">                  node.left = left2;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (right1 != <span class="literal">null</span> || right2 != <span class="literal">null</span>) &#123;</span><br><span class="line">              <span class="keyword">if</span> (right1 != <span class="literal">null</span> &amp;&amp; right2 != <span class="literal">null</span>) &#123;</span><br><span class="line">                  <span class="type">TreeNode</span> <span class="variable">right</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(right1.val + right2.val);</span><br><span class="line">                  node.right = right;</span><br><span class="line">                  queue.offer(right);</span><br><span class="line">                  queue1.offer(right1);</span><br><span class="line">                  queue2.offer(right2);</span><br><span class="line">              &#125; <span class="keyword">else</span> <span class="keyword">if</span> (right1 != <span class="literal">null</span>) &#123;</span><br><span class="line">                  node.right = right1;</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  node.right = right2;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> merged;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="100-相同的树"><a href="#100-相同的树" class="headerlink" title="100.相同的树"></a>100.相同的树</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202211121840333.png" alt="image-20221112184055309"></p><ol><li>树的递归判断</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSameTree</span><span class="params">(TreeNode p,TreeNode q)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p==<span class="literal">null</span>&amp;&amp;q==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(p==<span class="literal">null</span>||q==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span>(p.val!=q.val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> isSameTree(p,left,q.left)&amp;&amp;isSameTree(p.right,q.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对称二叉树"><a href="#对称二叉树" class="headerlink" title="对称二叉树"></a>对称二叉树</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202211121844717.png" alt="image-20221112184440687"></p><ol><li>基本和相同树的判断思想是一样的，只要把左右两个孩子分别当作新的结点进行比较</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSymmetric</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">     <span class="keyword">return</span>  isSameTree(root,root);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSameTree</span><span class="params">(TreeNode leftnode,TreeNode rightnode)</span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(leftnode==<span class="literal">null</span>&amp;&amp;rightnode==<span class="literal">null</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span>(leftnode==<span class="literal">null</span>||rightnode==<span class="literal">null</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> leftnode.val==rightnode.val&amp;&amp;isSameTree(leftnode.left,rightnode.right)&amp;&amp;isSameTree(leftnode.right,rightnode.left);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="226-翻转二叉树"><a href="#226-翻转二叉树" class="headerlink" title="226.翻转二叉树"></a>226.翻转二叉树</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202211121849830.png" alt="image-20221112184924806"> </p><ol><li>思路也是十分的简单，像数组的位置变换一样，定义一个辅助变量，而这边定义一个新的树对象来储存。</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 思想十分像数组的辅助变量位置变换的方法</span></span><br><span class="line">       <span class="keyword">public</span> TreeNode <span class="title function_">invertTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">           <span class="comment">// 声明一个新的对象，先是储存右孩子的数据</span></span><br><span class="line">           <span class="type">TreeNode</span> <span class="variable">rightTree</span> <span class="operator">=</span> root.right;</span><br><span class="line">           root.right = invertTree(root.left);</span><br><span class="line">           root.left = invertTree(rightTree);</span><br><span class="line">           <span class="keyword">return</span> root;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><h3 id="111-二叉树的最小深度"><a href="#111-二叉树的最小深度" class="headerlink" title="111.二叉树的最小深度"></a>111.二叉树的最小深度</h3><ol><li>做法几乎于最大深度差不多，只是把max改成min罢了</li><li>但是要注意的是空节点是不需要比较的。</li></ol><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202211131358958.png" alt="image-20221113135809932"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">pubilc <span class="type">int</span> <span class="title function_">minDepth</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(root.right==<span class="literal">null</span>&amp;&amp;root.left!=<span class="literal">null</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>+minDepth(root.left);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(root.left==<span class="literal">null</span>&amp;&amp;root.right!=<span class="literal">null</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>+minDepth(root.right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Math.min(minDepth(root.left),minDepth(root.right))+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="637-二叉树的层平均值"><a href="#637-二叉树的层平均值" class="headerlink" title="637.二叉树的层平均值"></a>637.二叉树的层平均值</h3><ol><li>我第一反应是一定要用到层次遍历，那么每层的结点个数我是应该怎么确定呢？</li><li> 然而实际上确实需要用到层次遍历的思想，而且还需要一个计数器</li></ol><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202211231913942.png" alt="image-20221123191353894"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Double&gt; <span class="title function_">averageOfLevels</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">       List&lt;Double&gt; storage = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Double&gt;();</span><br><span class="line">       Queue&lt;TreeNode&gt; stoge = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;TreeNode&gt;();</span><br><span class="line">       stoge.offer(root);</span><br><span class="line">       <span class="keyword">while</span>(!stoge.isEmpty())&#123;</span><br><span class="line">           <span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0.0</span>;</span><br><span class="line">           <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> stoge.size();</span><br><span class="line">           <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">               root = stoge.poll();</span><br><span class="line">               sum += root.val;</span><br><span class="line">           <span class="keyword">if</span>(root.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">               stoge.offer(root.left);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span>(root.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">               stoge.offer(root.right);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       storage.add(sum/size);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> storage;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>步骤解析<ol><li>在while之前把根结点代入队列。</li><li>开始while循环，重置sum值，目的是为了把每层的的结点总值区分开添入List中</li><li>获取队列的长度，队列的长度在这里其实就是这层结点的总数</li><li>比如代入root后，然后元素出队，因为此时的队列中只有root一个元素，所以出队root后，队列为空，停止循环，然后计算sum值，sum值得计算是用for循环本层得结点数得次数后得到得，然后把sum/size添加入List中</li><li>判断，那么两个if语句为了让下一个左右结点得入队，空则不入，不空则入。</li></ol></li></ol><h3 id="404-左子叶之和"><a href="#404-左子叶之和" class="headerlink" title="404.左子叶之和"></a>404.左子叶之和</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202211251049323.png" alt="image-20221125104925282"></p><ol><li>首先需要的是找到叶子节点，如果是就回溯到上一个结点输出左子叶，如果不是的话就往下递归。<ol><li>递归<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sumOfLeftLeaves</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">       <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span>(root.left!=<span class="literal">null</span>&amp;&amp;root.left.right==<span class="literal">null</span>&amp;&amp;root.left.left==<span class="literal">null</span>)&#123;</span><br><span class="line">           sum += root.left.val;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> sumOfLeftLeaves(root.left)+sumOfLeftLeaves(root.right)+sum;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li>队列（广度优先搜索）<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sumOfLeftLeaves</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    Queue&lt;TreeNode&gt; storage = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;TreeNode&gt;();</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    storage.offer(root);</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!storage.isEmpty())&#123;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> storage.poll();</span><br><span class="line">        <span class="keyword">if</span>(node.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(node.left.right==<span class="literal">null</span>&amp;&amp;node.left.left==<span class="literal">null</span>)&#123;</span><br><span class="line">                sum+=node.left.val;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                storage.offer(node.left);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!(node.right.left==<span class="literal">null</span>&amp;&amp;node.right.right==<span class="literal">null</span>))&#123;</span><br><span class="line">                storage.offer(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;二叉树&quot;&gt;&lt;a href=&quot;#二叉树&quot; class=&quot;headerlink&quot; title=&quot;二叉树&quot;&gt;&lt;/a&gt;二叉树&lt;/h1&gt;&lt;h3 id=&quot;镜像二叉树&quot;&gt;&lt;a href=&quot;#镜像二叉树&quot; class=&quot;headerlink&quot; title=&quot;镜像二叉树&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="练习" scheme="https://kalyan-zitiu.github.io/categories/%E7%BB%83%E4%B9%A0/"/>
    
    <category term="持续更新中" scheme="https://kalyan-zitiu.github.io/categories/%E7%BB%83%E4%B9%A0/%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E4%B8%AD/"/>
    
    
    <category term="算法" scheme="https://kalyan-zitiu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络学习笔记-传输层</title>
    <link href="https://kalyan-zitiu.github.io/2022/12/05/%E4%BC%A0%E8%BE%93%E5%B1%82/"/>
    <id>https://kalyan-zitiu.github.io/2022/12/05/%E4%BC%A0%E8%BE%93%E5%B1%82/</id>
    <published>2022-12-05T14:00:00.000Z</published>
    <updated>2023-03-27T03:28:51.534Z</updated>
    
    <content type="html"><![CDATA[<h1 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h1><h2 id="UDP协议"><a href="#UDP协议" class="headerlink" title="UDP协议"></a>UDP协议</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ol><li>UDP是无连接的，减少开销和发送数据之前的时延</li><li>UDP使用最大努力交付，即不保证可靠交付</li><li>面向报文，适合一次性传输少量的数据的网络应用</li><li>没有拥塞控制，适合多实时应用</li><li>首部开销晓，8B，Tcp208<br><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202211151804590.png" alt="image-20221115180421539"></li></ol><h3 id="UDP首部格式"><a href="#UDP首部格式" class="headerlink" title="UDP首部格式"></a>UDP首部格式</h3><ol><li>UDP长度是指UDP用户数据报的整个长度</li><li>UDP检验和是用来检测整个UDP数据报是否有错，错就丢弃</li><li>分用时，找不到对应的目的端口号，就丢弃报文，并给发送方发送ICMP“端口不可达”差错报告报文<br><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202211161119442.png" alt="image-20221116111919394"></li></ol><h3 id="UDP校验"><a href="#UDP校验" class="headerlink" title="UDP校验"></a>UDP校验</h3><ol><li>伪首部只有在计算机检验和时才出现，不向下传送也不向上递交。</li><li>17：封装UDP报文的IP数据报首部协议字段17。</li><li>UDP长度：UDP首部8B+数据部分长度（不包括伪首部）。<br><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202211161132390.png" alt="image-20221116113239359"><br>在发送端上会存在：</li><li>填上伪首部</li><li>全0填充检验和字段</li><li>全0填充数据部分（UDP数据报要看称许多4B的字串接起来）</li><li>伪首部+首部+数据部分采用二进制反码求和</li><li>把和求反码填入检验和字段</li><li>去掉伪首部，发送<br>在接收端上会存在：</li><li>填上伪首部</li><li>伪首部+首部+数据部分采用二进制反码求和</li><li>结果全为1则无差错，否则丢弃数据报/交给应用层附上出差错的警告</li></ol><h2 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h2><ol><li>TCP是面向连接的传输层协议。</li><li>TCP只能有两个端点，每一条TCP连接只能是点对点的（因此没办法运用多播和广播的通讯方式）</li><li>TCP提供可靠交付的服务，无差错，不丢失，不重复，按序到达</li><li>提供全双工通讯（有发送缓存和接收缓存 ）</li><li>TCP面向字节流：TCP把应用程序交下来的数据看成一连串无结构的字节流</li></ol><h3 id="报文段的首部格式"><a href="#报文段的首部格式" class="headerlink" title="报文段的首部格式"></a>报文段的首部格式</h3><ol><li>序号：在一个TCP连接中传送的字节流中的每一个字节都在按顺序编号，本字段表示本报文段所发送数据的第一个字节的序号</li><li>确认号：期望收到对方下一个报文段的第一个数据字节的序号。若确认号为N，则证明到序号N-1位置的所有数据都已正确收到。</li><li>数据偏移：TCP报文段的数据起始处距离TCP报文段的起始处有多远，以4B位单位，即一个数组是4B。</li><li>6个控制位<ul><li>紧急位URG：URG=1时，标明此报文段中有紧急数据，是最高优先级的数据，应该尽快传送，不用在缓存中排队，配合紧急指针字段使用（发送方）。</li><li>确认位ACK：ACK=1时确认号有效，在连接建立后所有传送的报文段都必须把ACK置为1。</li><li>推送位PSH：PSH=1时，接收方尽快交付接收应用进程，不再等到缓存填满再向上交付。</li><li>复位RST：RST=1时，标明TCP连接中出现严重差错，必须释放连接，然后再重新建立传输链接。</li><li>同步位SYN：SYN=1时，表明是一个连接请求/连接接受报文。</li><li>终止位FIN：FIN=1时，表明此报文段发送方数据已发完，要求释放连接。</li></ul></li><li>窗口：发送本报文段的一方接受窗口，即现在允许对方发送的数据量</li><li>检验和：检验首部+数据，检验时加上12B的伪首部，第四个字段为6.</li><li>紧急指针：URF=1时才有意义，指出本报文段中紧急数据的字节数</li><li>选项：最大报文段长度MSS，窗口扩大，时间戳，选择确认</li></ol><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202211161310156.png" alt="image-20221116131046116"></p><h3 id="TCP连接管理"><a href="#TCP连接管理" class="headerlink" title="TCP连接管理"></a>TCP连接管理</h3><ol><li>TCP连接的建立采用客户服务器方式，主动发起连接建立的应用进程叫做客户，而被动等待连接建立的应用进程叫服务器</li><li>假设运行在一台主机（客户）上的一个进程想与另一台主机（服务器）上的一个进程建立一条连接，客户应用进程首先通知客户TCP，他想建立一个与服务器上某个进程之间的连接，客户中的TCP会用一下步骤与服务器中的TCP建立一条TCP连接<br><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202211171124294.png" alt="image-20221117112431243"><ol><li>客户端发送连接请求报文段，无应用层数据SYN=1，seq=x（随机）</li><li>服务器端为该TCP连接分配缓存和变量，并向客户端返回确认报文段，允许连接，无应用层数据。SYN=1，ACK=1，seq=y（随机），ack=x+1</li><li>客户端为该TCP连接分配缓存和变量，并向服务器端返回确认的确认，可以携带数据SYN=0，ACK=1，seq=x+1,ack=y+1。</li></ol></li></ol><h3 id="SYN洪泛攻击"><a href="#SYN洪泛攻击" class="headerlink" title="SYN洪泛攻击"></a>SYN洪泛攻击</h3><p>SYN洪泛攻击发生在OSI第四层，这种方式利用TCP协议的特性，就是三次握手。攻击者会发送TCP SYN，SYN就是TCP三次握手中的第一个数据包，而当服务器返回ACK后，该攻击者就不对其进行再确认，而那个TCP连接就处于挂起状态，也就是半连接状态，服务器收不到再确认的话，还会重复发送ACK给攻击者。这样更加会浪费服务器的资源。攻击者就对服务器发送大量的这种TCP连接，由于每一个都没法完成三次握手，所以在服务器上，这些TCP连接会因为挂起状态而消耗CPU和内存，最后服务器可能死机，就无法为正常用户提供服务了。</p><h3 id="TCP的连接释放"><a href="#TCP的连接释放" class="headerlink" title="TCP的连接释放"></a>TCP的连接释放</h3><p>1.参与一条TCP连接的两个进程中的任何一个都能终止连接，连接结束后，主机中的“资源”（缓存和变量）将被释放。</p><ol><li>客户端发送连接释放报文段，停止发送数据，主动关闭TCP连接FIN=1，seq=u</li><li>服务器端回送一个确认报文段，客户到服务器这个方向的连接就释放了–半关闭状态ACK=1，seq=v,ack=u+1。</li><li>服务端发完数据，就发送连接释放报文段，主动关闭TCP连接。FIN=1，ACK=1，seq=w,ack=u+1</li><li>客户端回送一个确认报文段，再等到时间等待计时器设置的2MSL（最长报文段寿命）后，连接彻底关闭。ACK=1，seq=u+1，ack=w+1</li></ol><h3 id="TCP的可靠传输"><a href="#TCP的可靠传输" class="headerlink" title="TCP的可靠传输"></a>TCP的可靠传输</h3><ol><li>保证接受方进程从缓存区读出的字节流与发送方发出的字节流是完全一样的。也就是说明了数据帧在传输过程中既不能丢失，也不能受影响。<h4 id="校验"><a href="#校验" class="headerlink" title="校验"></a>校验</h4></li></ol><h4 id="序号"><a href="#序号" class="headerlink" title="序号"></a>序号</h4><ol><li><p>一个字节占用一个序号</p></li><li><p>序号字段指的是一个报文段第一个字节的序号<br><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202211202009218.png" alt="image-20221120200930161"></p><h4 id="确认"><a href="#确认" class="headerlink" title="确认"></a>确认</h4></li><li><p>发送方会保存一个TCP缓存报文段</p></li><li><p>接收方会在收到报文段后会发送确认报文段，当然接收方也可发送数据与确认报文段发去给发送方</p></li><li><p>若报文段在传输过程中丢失了，TCP会使用累计确认的方法，接收方会返回一个丢失报文段后的第一个字节的确认号报文段</p></li></ol><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202211202017088.png" alt="image-20221120201732026"></p><h4 id="重传"><a href="#重传" class="headerlink" title="重传"></a>重传</h4><ol><li><p>超时重传，若在规定时间内发送方没有接收到接收方的确认数据报，就会进行重传。</p></li><li><p>TCP动态改变重传的规定时间RTTs（加权平均往返时间）</p></li><li><p>冗余ACK（冗余确认）每当期望序号大的失序报文段到达时，发送一个冗余ACK，指明下一个期待字节的序号。例子：发送方已发送1，2，3，4，5报文段</p></li></ol><ul><li>接收方收到1，返回给1的确认（确认号为2的第一个字节）</li><li>接收方收到3，仍然返回给1的确认（确认号为2的第一个字节）</li><li>接收方收到4，仍返回给1的确认（确认号为2的第一个字节）</li><li>接收方收到5，仍返回给1的确认（确认号为2的第一个字节）<br>如果发送方收到了3个对于报文段1的冗余ACK就会认为报文段丢失，重传2号报文段，快速重传。</li></ul><h3 id="TCP流量控制"><a href="#TCP流量控制" class="headerlink" title="TCP流量控制"></a>TCP流量控制</h3><ol><li>利用滑动窗口机制实现流量控制</li><li>在通信过程中，接收方根据自己接收缓存的大小，动态地调整发送方的发送窗口大小，即接收窗口rwnd（接收方设置确认报文段的窗口字段来将rwnd通知给发送方），发送方的发送窗口取接收窗口rwnd和拥塞窗口cwnd的最小值。</li><li><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202212052140044.png" alt="image-20221205214003915"></li><li>TCP会为每一个连接设有一个持续计时器，只要TCP连接的一方收到对方的零窗口通知，就会启动持续计时器</li><li>若持续计时器设置的时间到期，就会发送一个零窗口探测报文段。接收方收到探测报文段时给出现在的窗口值</li><li>若窗口仍然是0，那么发送方会重新设置持续计时器</li></ol><h3 id="TCP拥塞控制"><a href="#TCP拥塞控制" class="headerlink" title="TCP拥塞控制"></a>TCP拥塞控制</h3><p>问题：当资源需求的总和大于可用资源的总和就会出现拥塞的条件，那么会有许多资源同时呈现供应不足就会导致网络性能变坏然后网络的吞吐量将会随输入负荷增大而下降</p><h4 id="慢开始和拥塞避免"><a href="#慢开始和拥塞避免" class="headerlink" title="慢开始和拥塞避免"></a>慢开始和拥塞避免</h4><p>传输轮次：发送了一批报文段并收到了他们的确认的时间，也可以指的是往返的时延RTT</p><ol><li><p>探测网络拥塞程度后，提升拥塞窗口的数量</p></li><li><p>ssthresh的初始值指的是慢开始的值（不会再以指数增长的形式增长），会以加法的形式来增加，这就叫拥塞避免</p></li><li><p>当遇到网络拥塞的时候，就会执行断崖式减少，拥塞窗口会跌到cwnd=1，重新开始增加</p></li><li><p>在这过程中，可能会重新更新ssthresh，当遇到网络控制的时候，会把发送拥塞的cwnd值马上除以2生成新的ssthresh值，那么下一轮次的慢开始会从新的ssthresh开始。</p></li></ol><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202303271128126.png" alt="image-20221205221100217"></p><h4 id="快重传和快恢复"><a href="#快重传和快恢复" class="headerlink" title="快重传和快恢复"></a>快重传和快恢复</h4><p>1.快重传就是等于冗余ack的算法是一致的，当某个报文段的确认帧并没有被发送方收到时候，后面发送的报文段返回的始终是还未收到的确认报文，当积累到三次的时候就会重传。<br>2.快恢复是和上面的ssthresh值是有关联的，当发送网络拥塞的时候，cwnd并不会直接降落到1，而是会降落到ssthresh值上直接进行慢开始。这样能够减少cwnd的变化幅度从而优化了速度。但是ssthresh值还是需要根据发送网络拥塞的cwnd来决定的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;传输层&quot;&gt;&lt;a href=&quot;#传输层&quot; class=&quot;headerlink&quot; title=&quot;传输层&quot;&gt;&lt;/a&gt;传输层&lt;/h1&gt;&lt;h2 id=&quot;UDP协议&quot;&gt;&lt;a href=&quot;#UDP协议&quot; class=&quot;headerlink&quot; title=&quot;UDP协议&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="计算机网络" scheme="https://kalyan-zitiu.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="基础知识" scheme="https://kalyan-zitiu.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>HTTP</title>
    <link href="https://kalyan-zitiu.github.io/2022/11/15/Http/"/>
    <id>https://kalyan-zitiu.github.io/2022/11/15/Http/</id>
    <published>2022-11-15T11:30:04.000Z</published>
    <updated>2023-01-03T11:48:23.537Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Http"><a href="#Http" class="headerlink" title="Http"></a>Http</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>超文本传输协议(Hyper Text Transfer Protocol，Http)是一个简单的请求-响应协议，它通常运行在TCP之上，它指定了客户端可能发送给服务器什么样的消息以及得到什么样的响应。请求何响应消息的头以ASCII形式给出；而消息内容则具有了MIME格式。所有的WWW文件都必须遵守这个标准</li><li>Http是一个基于TCP/IP通信协议来传递数据的（HTML文件，信息，结果等）</li></ul><h2 id="Http与Https的区别"><a href="#Http与Https的区别" class="headerlink" title="Http与Https的区别"></a>Http与Https的区别</h2><ul><li>Http是从万维网服务器传输超文本到本地浏览器的传送协议</li><li>Https是一种通过计算机网络进行的安全通信的传输协议</li><li>端口不一样Http的URL是默认使用端口80，而Https的是默认使用端口443<h3 id="Https"><a href="#Https" class="headerlink" title="Https"></a>Https</h3></li><li>Https是通过Http进行通信，利用SSL/TLS来加密数据包，Https开发的主要目的，是提供对网站服务器的身份认证，保护交换资料的隐私和完整性<h4 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h4></li><li>1.TCP三次同步握手</li><li>2、客户端验证服务器数字证书</li><li>3、DH 算法协商对称加密算法的密钥、hash 算法的密钥</li><li>4、SSL 安全加密隧道协商完成</li><li>5、网页以加密的方式传输，用协商的对称加密算法和密钥加密，保证数据机密性；用协商的hash算法进行数据完整性保护，保证数据不被篡改<h4 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h4></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202210221158748.jpeg" alt="img"></p><h5 id="详细"><a href="#详细" class="headerlink" title="详细"></a>详细</h5><ul><li><p>SYN</p><ul><li>指的是<strong>同步序列编号</strong>，是T<strong>CP/IP</strong>建立连接时使用的握手信号。在客户端与服务器之间建立正常的<strong>TCP网络</strong>连接时，客户机首先发出一个<strong>SYN</strong>消息，服务器使用<strong>SYN+ACK</strong>应答表示接收到了这个消息，最后客户机再以ACK消息响应。这样在客户机和服务器之间才能建立起<strong>可靠的TCP连接</strong>，<strong>数据</strong>才可以在客户机和服务器之间传递。</li></ul></li><li><p>MIME</p><ul><li>多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该<strong>扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。</strong>多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。</li></ul></li><li><p>第一次握手：客户端尝试连接服务器，向服务器发送syn包（同步序列编号）客户端进入<strong>SYN_SEND</strong></p></li><li><p>第二次握手，服务器接收客户端syn包并且确认，同时向客户端发送一个SYN包，即SYN+ACK包，此时服务器处于<strong>SYN_RECV状态</strong></p></li><li><p>第三次握手，客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK，此包发送完毕，客户端和服务器进入了<strong>ESTABLISHED状态</strong></p><h3 id="Http的工作原理"><a href="#Http的工作原理" class="headerlink" title="Http的工作原理"></a>Http的工作原理</h3></li><li><p>HTTP协议工作与客户端-服务端架构上</p></li><li><p>浏览器作为客户端通过URL向服务端发送所有请求</p></li><li><p>Web的服务端有Apache服务器，IIS服务器</p></li><li><p>需要注意的是</p><ul><li>HTTP是无连接，无连接的含义是限制每次连接只处理一个请求，服务器处理完客户的请求，并收到客户的应答后，断开连接以达到节省传输时间</li><li>它是一个媒体独立的，意味着，客户端和服务器知道如何处理数据内容，任何类型的数据都可以通过HTTP发送，客户端以及服务器指定使用适合的MiME-type内容类型</li><li>它是无状态的：指的是对于事务的处理它是没有记忆能力的，这就说明如果后续需要处理前面的信息的话，必须得重新传输，导致每次连接的数据量增大。 </li></ul></li></ul><h3 id="Https-1"><a href="#Https-1" class="headerlink" title="Https"></a>Https</h3><ul><li>能够在不安全的网络上创建一个安全通道，并且可以使用适当的加密包和服务器证书验证且可被信任</li><li>当以下情况达成时可被信任</li><li>浏览器正确的实现了HTTPS且操作系统中安装了正确且受信任的证书颁发机构；</li><li>次协议的加密层也就是SSL./TLS能够有效的提供认证和高强度的加密</li></ul><h2 id="Http的消息结构"><a href="#Http的消息结构" class="headerlink" title="Http的消息结构"></a>Http的消息结构</h2><ul><li><p>客户端一般发送一个HTTP请求到服务器的请求消息包括以下格式：请求行，请求头部，空行和请求数据四个部分组成。</p><ul><li><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202210221316880.png" alt="image-20221022131636849"></li></ul></li><li><p>服务器响应也是四个部分组成，分别是：状态行，消息报头，空行和响应正文</p></li></ul><h2 id="HTTP请求方法"><a href="#HTTP请求方法" class="headerlink" title="HTTP请求方法"></a>HTTP请求方法</h2><table><thead><tr><th>number</th><th>method</th><th>descrition</th></tr></thead><tbody><tr><td>1.</td><td>GET</td><td>请求指定的页面信息，返回实体主体</td></tr><tr><td>2.</td><td>HEAD</td><td>返回的响应中没有具体内容，用于获取报头</td></tr><tr><td>3.</td><td>POST</td><td>向指定的资源提交数据进行处理请求。数据被包含在请求体中。POST请求可能导致新的资源的建立和/或已有的资源的修改</td></tr><tr><td>4.</td><td>PUT</td><td>从客户端向服务器传送的数据取代指定的文档内容</td></tr><tr><td>5.</td><td>DELETE</td><td>请求服务器伤处指定画面</td></tr><tr><td>6.</td><td>CONNECT</td><td>预留给能够将连接改为管道方式的代理服务器</td></tr><tr><td>7.</td><td>TRACE</td><td>回显服务器收到的请求，主要用于测试或诊断</td></tr><tr><td>8.</td><td>PATCH</td><td>对PUT方法的补充，用来对已知资源进行局部更新</td></tr><tr><td>9.</td><td>OPTIONS</td><td>允许客户端查看服务器的性能</td></tr></tbody></table><h2 id="http状态码"><a href="#http状态码" class="headerlink" title="http状态码"></a>http状态码</h2><table><thead><tr><th>状态码</th><th>英文对应名称</th><th>中文描述</th></tr></thead><tbody><tr><td>100</td><td>Continue</td><td>继续。客户端应继续其请求</td></tr><tr><td>101</td><td>Switching Protocols</td><td>切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议</td></tr><tr><td>200</td><td>OK</td><td>请求成功。一般用于GET与POST请求</td></tr><tr><td>201</td><td>Created</td><td>已创建。成功请求并创建了新的资源</td></tr><tr><td>202</td><td>Accepted</td><td>已接受。已经接受请求，但未处理完成</td></tr><tr><td>203</td><td>Non-Authoritative Information</td><td>非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本</td></tr><tr><td>204</td><td>No Content</td><td>无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档</td></tr><tr><td>205</td><td>Reset Content</td><td>重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域</td></tr><tr><td>206</td><td>Partial Content</td><td>部分内容。服务器成功处理了部分GET请求</td></tr><tr><td>300</td><td>Multiple Choices</td><td>多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择</td></tr><tr><td>301</td><td>Moved Permanently</td><td>永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替</td></tr><tr><td>302</td><td>Found</td><td>临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI</td></tr><tr><td>303</td><td>See Other</td><td>查看其它地址。与301类似。使用GET和POST请求查看</td></tr><tr><td>304</td><td>Not Modified</td><td>未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源</td></tr><tr><td>305</td><td>Use Proxy</td><td>使用代理。所请求的资源必须通过代理访问</td></tr><tr><td>306</td><td>Unused</td><td>已经被废弃的HTTP状态码</td></tr><tr><td>307</td><td>Temporary Redirect</td><td>临时重定向。与302类似。使用GET请求重定向</td></tr><tr><td>400</td><td>Bad Request</td><td>客户端请求的语法错误，服务器无法理解</td></tr><tr><td>401</td><td>Unauthorized</td><td>请求要求用户的身份认证</td></tr><tr><td>402</td><td>Payment Required</td><td>保留，将来使用</td></tr><tr><td>403</td><td>Forbidden</td><td>服务器理解请求客户端的请求，但是拒绝执行此请求</td></tr><tr><td>404</td><td>Not Found</td><td>服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置”您所请求的资源无法找到”的个性页面</td></tr><tr><td>405</td><td>Method Not Allowed</td><td>客户端请求中的方法被禁止</td></tr><tr><td>406</td><td>Not Acceptable</td><td>服务器无法根据客户端请求的内容特性完成请求</td></tr><tr><td>407</td><td>Proxy Authentication Required</td><td>请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权</td></tr><tr><td>408</td><td>Request Time-out</td><td>服务器等待客户端发送的请求时间过长，超时</td></tr><tr><td>409</td><td>Conflict</td><td>服务器完成客户端的 PUT 请求时可能返回此代码，服务器处理请求时发生了冲突</td></tr><tr><td>410</td><td>Gone</td><td>客户端请求的资源已经不存在。410不同于404，如果资源以前有现在被永久删除了可使用410代码，网站设计人员可通过301代码指定资源的新位置</td></tr><tr><td>411</td><td>Length Required</td><td>服务器无法处理客户端发送的不带Content-Length的请求信息</td></tr><tr><td>412</td><td>Precondition Failed</td><td>客户端请求信息的先决条件错误</td></tr><tr><td>413</td><td>Request Entity Too Large</td><td>由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个Retry-After的响应信息</td></tr><tr><td>414</td><td>Request-URI Too Large</td><td>请求的URI过长（URI通常为网址），服务器无法处理</td></tr><tr><td>415</td><td>Unsupported Media Type</td><td>服务器无法处理请求附带的媒体格式</td></tr><tr><td>416</td><td>Requested range not satisfiable</td><td>客户端请求的范围无效</td></tr><tr><td>417</td><td>Expectation Failed</td><td>服务器无法满足Expect的请求头信息</td></tr><tr><td>500</td><td>Internal Server Error</td><td>服务器内部错误，无法完成请求</td></tr><tr><td>501</td><td>Not Implemented</td><td>服务器不支持请求的功能，无法完成请求</td></tr><tr><td>502</td><td>Bad Gateway</td><td>作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应</td></tr><tr><td>503</td><td>Service Unavailable</td><td>由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中</td></tr><tr><td>504</td><td>Gateway Time-out</td><td>充当网关或代理的服务器，未及时从远端服务器获取请求</td></tr><tr><td>505</td><td>HTTP Version not supported</td><td>服务器不支持请求的HTTP协议的版本，无法完成处理</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Http&quot;&gt;&lt;a href=&quot;#Http&quot; class=&quot;headerlink&quot; title=&quot;Http&quot;&gt;&lt;/a&gt;Http&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h</summary>
      
    
    
    
    <category term="计算机网络" scheme="https://kalyan-zitiu.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="协议" scheme="https://kalyan-zitiu.github.io/tags/%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>图存结构</title>
    <link href="https://kalyan-zitiu.github.io/2022/11/15/%E5%9B%BE%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/"/>
    <id>https://kalyan-zitiu.github.io/2022/11/15/%E5%9B%BE%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/</id>
    <published>2022-11-15T11:00:23.000Z</published>
    <updated>2022-11-21T06:59:06.851Z</updated>
    
    <content type="html"><![CDATA[<h1 id="图的存储结构"><a href="#图的存储结构" class="headerlink" title="图的存储结构"></a>图的存储结构</h1><h2 id="基本知识（此次都是为图存储结构的基本知识，若已了解可跳至算法部分）"><a href="#基本知识（此次都是为图存储结构的基本知识，若已了解可跳至算法部分）" class="headerlink" title="基本知识（此次都是为图存储结构的基本知识，若已了解可跳至算法部分）"></a>基本知识（此次都是为图存储结构的基本知识，若已了解可跳至算法部分）</h2><h3 id="什么是图存储结构"><a href="#什么是图存储结构" class="headerlink" title="什么是图存储结构"></a>什么是图存储结构</h3><ul><li>根据有向和无向线来连接每个顶点间的关系<ul><li>有向图：如果元素之间存在单向的联系，那么这样的图结构称为有向图.<img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202210270950517.png" alt="image-20221027095058466"></li><li>无向图：各个元素之间的联系都是双向的，这样的图存结构称为无向图。<img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202210270952151.png" alt="image-20221027095201129"></li></ul></li></ul><h3 id="图的基本概念"><a href="#图的基本概念" class="headerlink" title="图的基本概念"></a>图的基本概念</h3><p>1.弧头和弧尾</p><ul><li>有向图中，无箭头的一端的顶点通常被称为“初始点”或“弧尾”，箭头的一段被称为“终端点”或“弧头”。</li></ul><p>2.入度和出度</p><ul><li>对于有向图中的一个顶点 V 来说，箭头指向 V 的弧的数量为 V 的入度（InDegree，记为 ID(V)）；箭头远离 V 的弧的数量为 V 的出度（OutDegree，记为OD(V)）。</li></ul><p>3.(V1,V2)和&lt;V1,V2&gt;的区别</p><ul><li><strong>无向图中描述两顶点V1和V2之间的关系可以用(V1,V2)来表示；有向图中描述从V1到V2的“单向”关系可以用&lt;V1,V2&gt;来表示</strong></li><li>由于图存储结构中顶点之间的关系是可以用线来表示的，因此(V1,V2)还可以用来表示无向图中连接V1和V2的线，又称为边;同样&lt;V1,V2&gt;也可用来表示有向图中从V1到V2带方向的线，又称为弧。</li></ul><p>4.集合VR</p><ul><li>图中习惯用VR表示图中所有顶点之间的关系的集合，例如，上图无向图的集合VR={(V1,V2),(V1,V4),(V1,V3),(V3,V4)}。有向图的集合 VR={&lt;v1,v2&gt;,&lt;v1,v3&gt;,&lt;v3,v4&gt;,&lt;v4,v1&gt;}。</li></ul><p>5.路径和回路</p><ul><li>无论是无向图还是有向图，从一个顶点到另一个顶点途径的所有顶点组成的序列（包括起点和终点），称为一条路径。若路径中的<strong>某个顶点能够最后回到自己身上</strong>，那么这个路径称为<strong>环</strong>或者<strong>回路</strong></li></ul><p>6.权和网</p><ul><li>在一些图中，可能为每条边赋值一个实数表示一定的含义，这种与边（或弧）相互匹配的实数被称为“权”，而带权的图通常称为网。例如，图4就是一个网结构:<br><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202210271035591.png" alt="image-20221027103555566"></li></ul><p>7.子图</p><ul><li>指的是由图中一部分顶点和边构成的图称为原图的子图</li></ul><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><h4 id="完全图"><a href="#完全图" class="headerlink" title="完全图"></a>完全图</h4><ul><li>每个顶点都有与除开自身外的其他顶点有直接关系</li><li>若有n个顶点的完全图，则图中边的数量为n(n-1)/2;而对于具有n个顶点的有向完全图，图中的弧的数量为n(n-1)。<h4 id="连通图"><a href="#连通图" class="headerlink" title="连通图"></a>连通图</h4></li><li><strong>如果图中从一个顶点到达另外一个顶点，至少有一条路径，那么这两个顶点是连通着的。</strong>例如图中，虽然V1和V3没有直接关联，但从V1到V3存在两条路径，分别是V1-V2-V3和V1-V4-V3，因此称V1和V2之间是连通的<img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202210271101163.png" alt="image-20221027110110138"><br>上面用的是无向图的例子，其实有向图也是基本差不多的啦，自己揣摩哦！！！！<h5 id="强连通图"><a href="#强连通图" class="headerlink" title="强连通图"></a>强连通图</h5></li><li>在有向图中两个顶点彼此都有至少有一条通路，那么这有向图为强连通图。</li><li>除此之外，若有向图不是强连通图，但其中包含的是最大连通子图具有强连通的性质，则称该子图为强连通分量<img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202210271112764.png" alt="image-20221027111223735"></li></ul><h3 id="生成树"><a href="#生成树" class="headerlink" title="生成树"></a>生成树</h3><ul><li>其实对连通图的遍历的过程中就已经是生成树的过程了<br>1.如图：<br><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202210271122665.png" alt="image-20221027112213637"><br>2.需要注意的是连通图中，由于任意两顶点之间可能含有多条通路，遍历连通图的方式有多种，往往一张连通图可能有多种不同的生成树与之对应。<br>3.连通图中的生成树必须满足以下 2 个条件：<ul><li>包含连通图中所有的顶点；</li><li>任意两顶点之间有且仅有一条通路；</li></ul></li></ul><h2 id="编程实现"><a href="#编程实现" class="headerlink" title="编程实现"></a>编程实现</h2><h3 id="图的顺序存储结构"><a href="#图的顺序存储结构" class="headerlink" title="图的顺序存储结构"></a>图的顺序存储结构</h3><ul><li>虽然图结构的数据元素存在多对多关系，但是同样可以采用顺序储存，能够使用数组有效的储存图</li><li>需要注意的是：数组储存图时，需要一个数组存放图中顶点本身的数据（最好是一维数组），另外一个数组存储的是各顶点之间的关系（这时候就要是二维数组了）<h4 id="邻接矩阵无向图"><a href="#邻接矩阵无向图" class="headerlink" title="邻接矩阵无向图"></a>邻接矩阵无向图</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MatrixNDG</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> size;<span class="comment">//图顶点个数</span></span><br><span class="line">    <span class="type">char</span>[] vertexs;<span class="comment">//图顶点名称</span></span><br><span class="line">    <span class="type">int</span>[][] matrix;<span class="comment">//图关系矩阵</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MatrixNDG</span><span class="params">(<span class="type">char</span>[] vertexs,<span class="type">char</span>[][] edges)</span>&#123;</span><br><span class="line">        size=vertexs.length;</span><br><span class="line">        matrix=<span class="keyword">new</span> <span class="title class_">int</span>[size][size];<span class="comment">//设定图关系矩阵大小</span></span><br><span class="line">        <span class="built_in">this</span>.vertexs=vertexs;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span>[] c:edges)&#123;<span class="comment">//设置矩阵值</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">p1</span> <span class="operator">=</span> getPosition(c[<span class="number">0</span>]);<span class="comment">//根据顶点名称确定对应矩阵下标</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">p2</span> <span class="operator">=</span> getPosition(c[<span class="number">1</span>]);</span><br><span class="line">            matrix[p1][p2] = <span class="number">1</span>;<span class="comment">//无向图，在两个对称位置存储</span></span><br><span class="line">            matrix[p2][p1] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//图的遍历输出</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span>[] i:matrix)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j:i)&#123;</span><br><span class="line">                System.out.print(j+<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据顶点名称获取对应的矩阵下标</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getPosition</span><span class="params">(<span class="type">char</span> ch)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;vertexs.length; i++)</span><br><span class="line">            <span class="keyword">if</span>(vertexs[i]==ch)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] vexs = &#123;<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;I&#x27;</span>,<span class="string">&#x27;J&#x27;</span>,<span class="string">&#x27;K&#x27;</span>&#125;;</span><br><span class="line">        <span class="type">char</span>[][] edges = <span class="keyword">new</span> <span class="title class_">char</span>[][]&#123;</span><br><span class="line">            &#123;<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;C&#x27;</span>&#125;, </span><br><span class="line">            &#123;<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;D&#x27;</span>&#125;, </span><br><span class="line">            &#123;<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;F&#x27;</span>&#125;, </span><br><span class="line">            &#123;<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>&#125;, </span><br><span class="line">            &#123;<span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>&#125;, </span><br><span class="line">            &#123;<span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;G&#x27;</span>&#125;, </span><br><span class="line">            &#123;<span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;G&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;I&#x27;</span>,<span class="string">&#x27;J&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;J&#x27;</span>,<span class="string">&#x27;G&#x27;</span>&#125;,&#125;;</span><br><span class="line">        MatrixNDG pG;</span><br><span class="line">        <span class="comment">// 自定义&quot;图&quot;(输入矩阵队列)</span></span><br><span class="line">        <span class="comment">// 采用已有的&quot;图&quot;</span></span><br><span class="line">        <span class="type">long</span> start=System.nanoTime();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10000</span>;i++)&#123;</span><br><span class="line">            pG = <span class="keyword">new</span> <span class="title class_">MatrixNDG</span>(vexs, edges);</span><br><span class="line">            <span class="comment">//pG.print();   // 打印图 </span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> end=System.nanoTime();</span><br><span class="line">        System.out.println(end-start);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="邻接矩阵有向图"><a href="#邻接矩阵有向图" class="headerlink" title="邻接矩阵有向图"></a>邻接矩阵有向图</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MatrixDG</span> &#123;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    <span class="type">char</span>[] vertexs;</span><br><span class="line">    <span class="type">int</span>[][] matrix;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MatrixDG</span><span class="params">(<span class="type">char</span>[] vertexs,<span class="type">char</span>[][] edges)</span>&#123;</span><br><span class="line">        size=vertexs.length;</span><br><span class="line">        matrix=<span class="keyword">new</span> <span class="title class_">int</span>[size][size];</span><br><span class="line">        <span class="built_in">this</span>.vertexs=vertexs;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//和邻接矩阵无向图差别仅仅在这里</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span>[] c:edges)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">p1</span> <span class="operator">=</span> getPosition(c[<span class="number">0</span>]);</span><br><span class="line">            <span class="type">int</span> <span class="variable">p2</span> <span class="operator">=</span> getPosition(c[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">            matrix[p1][p2] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span>[] i:matrix)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j:i)&#123;</span><br><span class="line">                System.out.print(j+<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getPosition</span><span class="params">(<span class="type">char</span> ch)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;vertexs.length; i++)</span><br><span class="line">            <span class="keyword">if</span>(vertexs[i]==ch)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] vexs = &#123;<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;I&#x27;</span>,<span class="string">&#x27;J&#x27;</span>,<span class="string">&#x27;K&#x27;</span>&#125;;</span><br><span class="line">        <span class="type">char</span>[][] edges = <span class="keyword">new</span> <span class="title class_">char</span>[][]&#123;</span><br><span class="line">            &#123;<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;C&#x27;</span>&#125;, </span><br><span class="line">            &#123;<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;D&#x27;</span>&#125;, </span><br><span class="line">            &#123;<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;F&#x27;</span>&#125;, </span><br><span class="line">            &#123;<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>&#125;, </span><br><span class="line">            &#123;<span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>&#125;, </span><br><span class="line">            &#123;<span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;G&#x27;</span>&#125;, </span><br><span class="line">            &#123;<span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;G&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;I&#x27;</span>,<span class="string">&#x27;J&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;J&#x27;</span>,<span class="string">&#x27;G&#x27;</span>&#125;,&#125;;</span><br><span class="line">        MatrixDG pG;</span><br><span class="line">        <span class="comment">// 自定义&quot;图&quot;(输入矩阵队列)</span></span><br><span class="line">        <span class="comment">//pG = new MatrixUDG();</span></span><br><span class="line">        <span class="comment">// 采用已有的&quot;图&quot;</span></span><br><span class="line">        pG = <span class="keyword">new</span> <span class="title class_">MatrixDG</span>(vexs, edges);</span><br><span class="line"></span><br><span class="line">        pG.print();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="邻接表无向表"><a href="#邻接表无向表" class="headerlink" title="邻接表无向表"></a>邻接表无向表</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListNDG</span> &#123;</span><br><span class="line"></span><br><span class="line">    Vertex[] vertexLists;<span class="comment">//邻接表数组</span></span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Vertex</span>&#123;<span class="comment">//邻接表节点类，单链表数据结构</span></span><br><span class="line">        <span class="type">char</span> ch;</span><br><span class="line">        Vertex next;</span><br><span class="line"></span><br><span class="line">        Vertex(<span class="type">char</span> ch)&#123;<span class="comment">//初始化方法</span></span><br><span class="line">            <span class="built_in">this</span>.ch=ch;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">char</span> ch)</span>&#123;<span class="comment">//加到链表尾</span></span><br><span class="line">            Vertex node=<span class="built_in">this</span>;</span><br><span class="line">            <span class="keyword">while</span>(node.next!=<span class="literal">null</span>)&#123;</span><br><span class="line">                node=node.next;</span><br><span class="line">            &#125;</span><br><span class="line">            node.next=<span class="keyword">new</span> <span class="title class_">Vertex</span>(ch);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ListNDG</span><span class="params">(<span class="type">char</span>[] vertexs,<span class="type">char</span>[][] edges)</span>&#123;</span><br><span class="line"></span><br><span class="line">        size=vertexs.length;</span><br><span class="line">        <span class="built_in">this</span>.vertexLists=<span class="keyword">new</span> <span class="title class_">Vertex</span>[size];<span class="comment">//确定邻接表大小</span></span><br><span class="line">        <span class="comment">//设置邻接表头节点</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">            <span class="built_in">this</span>.vertexLists[i]=<span class="keyword">new</span> <span class="title class_">Vertex</span>(vertexs[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//存储边信息</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span>[] c:edges)&#123;</span><br><span class="line">           <span class="type">int</span> p1=getPosition(c[<span class="number">0</span>]);</span><br><span class="line">           vertexLists[p1].add(c[<span class="number">1</span>]);</span><br><span class="line">           <span class="type">int</span> p2=getPosition(c[<span class="number">1</span>]);</span><br><span class="line">           vertexLists[p2].add(c[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//跟据顶点名称获取链表下标</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getPosition</span><span class="params">(<span class="type">char</span> ch)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;size; i++)</span><br><span class="line">            <span class="keyword">if</span>(vertexLists[i].ch==ch)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历输出邻接表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">           Vertex temp=vertexLists[i];</span><br><span class="line">           <span class="keyword">while</span>(temp!=<span class="literal">null</span>)&#123;</span><br><span class="line">               System.out.print(temp.ch+<span class="string">&quot; &quot;</span>);</span><br><span class="line">               temp=temp.next;</span><br><span class="line">           &#125;</span><br><span class="line">           System.out.println();</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">char</span>[] vexs = &#123;<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;I&#x27;</span>,<span class="string">&#x27;J&#x27;</span>,<span class="string">&#x27;K&#x27;</span>&#125;;</span><br><span class="line">        <span class="type">char</span>[][] edges = <span class="keyword">new</span> <span class="title class_">char</span>[][]&#123;</span><br><span class="line">            &#123;<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;C&#x27;</span>&#125;, </span><br><span class="line">            &#123;<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;D&#x27;</span>&#125;, </span><br><span class="line">            &#123;<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;F&#x27;</span>&#125;, </span><br><span class="line">            &#123;<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>&#125;, </span><br><span class="line">            &#123;<span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>&#125;, </span><br><span class="line">            &#123;<span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;G&#x27;</span>&#125;, </span><br><span class="line">            &#123;<span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;G&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;I&#x27;</span>,<span class="string">&#x27;J&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;J&#x27;</span>,<span class="string">&#x27;G&#x27;</span>&#125;,&#125;;</span><br><span class="line"></span><br><span class="line">        ListNDG pG;</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> start=System.nanoTime();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10000</span>;i++)&#123;</span><br><span class="line">            pG = <span class="keyword">new</span> <span class="title class_">ListNDG</span>(vexs, edges);</span><br><span class="line">            <span class="comment">//pG.print();   // 打印图 </span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> end=System.nanoTime();</span><br><span class="line"></span><br><span class="line">        System.out.println(end-start);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="邻接有向表"><a href="#邻接有向表" class="headerlink" title="邻接有向表"></a>邻接有向表</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListDG</span> &#123;</span><br><span class="line">    Vertex[] vertexLists;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Vertex</span>&#123;</span><br><span class="line">        <span class="type">char</span> ch;</span><br><span class="line">        Vertex next;</span><br><span class="line"></span><br><span class="line">        Vertex(<span class="type">char</span> ch)&#123;</span><br><span class="line">            <span class="built_in">this</span>.ch=ch;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">char</span> ch)</span>&#123;</span><br><span class="line">            Vertex node=<span class="built_in">this</span>;</span><br><span class="line">            <span class="keyword">while</span>(node.next!=<span class="literal">null</span>)&#123;</span><br><span class="line">                node=node.next;</span><br><span class="line">            &#125;</span><br><span class="line">            node.next=<span class="keyword">new</span> <span class="title class_">Vertex</span>(ch);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ListDG</span><span class="params">(<span class="type">char</span>[] vertexs,<span class="type">char</span>[][] edges)</span>&#123;</span><br><span class="line"></span><br><span class="line">        size=vertexs.length;</span><br><span class="line">        <span class="built_in">this</span>.vertexLists=<span class="keyword">new</span> <span class="title class_">Vertex</span>[size];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">            <span class="built_in">this</span>.vertexLists[i]=<span class="keyword">new</span> <span class="title class_">Vertex</span>(vertexs[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span>[] c:edges)&#123;</span><br><span class="line">           <span class="type">int</span> p=getPosition(c[<span class="number">0</span>]);</span><br><span class="line">           vertexLists[p].add(c[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getPosition</span><span class="params">(<span class="type">char</span> ch)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;size; i++)</span><br><span class="line">            <span class="keyword">if</span>(vertexLists[i].ch==ch)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">           Vertex temp=vertexLists[i];</span><br><span class="line">           <span class="keyword">while</span>(temp!=<span class="literal">null</span>)&#123;</span><br><span class="line">               System.out.print(temp.ch+<span class="string">&quot; &quot;</span>);</span><br><span class="line">               temp=temp.next;</span><br><span class="line">           &#125;</span><br><span class="line">           System.out.println();</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">char</span>[] vexs = &#123;<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;I&#x27;</span>,<span class="string">&#x27;J&#x27;</span>,<span class="string">&#x27;K&#x27;</span>&#125;;</span><br><span class="line">        <span class="type">char</span>[][] edges = <span class="keyword">new</span> <span class="title class_">char</span>[][]&#123;</span><br><span class="line">            &#123;<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;C&#x27;</span>&#125;, </span><br><span class="line">            &#123;<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;D&#x27;</span>&#125;, </span><br><span class="line">            &#123;<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;F&#x27;</span>&#125;, </span><br><span class="line">            &#123;<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>&#125;, </span><br><span class="line">            &#123;<span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>&#125;, </span><br><span class="line">            &#123;<span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;G&#x27;</span>&#125;, </span><br><span class="line">            &#123;<span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;G&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;I&#x27;</span>,<span class="string">&#x27;J&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;J&#x27;</span>,<span class="string">&#x27;G&#x27;</span>&#125;,&#125;;</span><br><span class="line"></span><br><span class="line">        ListDG pG;</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> start=System.nanoTime();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10000</span>;i++)&#123;</span><br><span class="line">            pG = <span class="keyword">new</span> <span class="title class_">ListDG</span>(vexs, edges);</span><br><span class="line">            <span class="comment">//pG.print();   // 打印图 </span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> end=System.nanoTime();</span><br><span class="line"></span><br><span class="line">        System.out.println(end-start);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h2><ul><li><p>所谓图的遍历，简单理解就是逐个访问图中的顶点，确保每个顶点都只访问一次</p></li><li><p>深度优先搜索算法遍历图1无向图的过程:<br><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202210271413712.png" alt="image-20221027141315660"></p></li></ul><p>1.初始状态下，无向图中的所有顶点都是没有被访问过的，一次可以任选一个顶点出发，遍历整个无向图，假设从V1顶点开始，先访问V1顶点。</p><p>2.紧邻V1的顶点有两个，分别是V2和V3，它们都没有被访问过，从它们中任选一个，这里选择V2</p><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202210271530315.png" alt="image-20221027153049261"></p><p>3.紧邻V2的顶点三个，分别是V1，V4，V5，尚未被访问的有V4，V5，从它们中任选一个，比如访问V4，如下图所示：</p><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202210271531571.png" alt="image-20221027153105528"></p><p>4.紧邻 V4 的顶点有两个，分别是 V2 和 V8，只有 V8 尚未被访问，因此访问 V8，如下图所示：</p><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202210271531449.png" alt="image-20221027153116398"></p><p>5.紧邻 V8 的顶点有两个，分别是 V4 和 V5，只有 V5 尚未被访问，因此访问 V5，如下图所示：</p><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202210271531351.png" alt="image-20221027153133306"></p><p>6.和 V5 相邻的顶点有两个，分别是 V2 和 V8，它们都已经访问过了。也就是说，此时从 V5 出发，找不到任何未被访问的顶点了。</p><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202210271531438.png" alt="image-20221027153147389"></p><p>7.这种情况下，深度优先搜索算法会回退到之前的顶点，查看先前有没有漏掉的、尚未访问的顶点：</p><ul><li>从 V5 回退到 V8，找不到尚未访问的顶点；</li><li>从 V8 回退到 V4，还是找不到尚未访问的顶点；</li><li>从 V4 回退到 V2，也还是找不到尚未访问的顶点；</li><li>从 V2 回退到 V1，发现 V3 还没有被访问。<br>于是，下一个要访问的顶点就是 V3，如下图所示：</li></ul><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202210271532746.png" alt="image-20221027153201697"></p><p>8.紧邻 V3 的顶点有三个，分别是 V1、V6 和 V7，尚未访问的有 V6 和 V7，因此从它们中任选一个，比如访问 V6，如下图所示：</p><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202210271532529.png" alt="image-20221027153214477"></p><p>9.紧邻 V6 的顶点有两个，分别是 V3 和 V7，只有 V7 还没有访问，因此访问 V7，如下图所示：</p><p>10.紧邻 V7 顶点有 V6 和 V3，但它们都已经访问过了，此时面临的情况和第 6 步完全一样，深度优先搜索算法的解决方法也是一样的：</p><ul><li>从 V7 回退到 V6，依然找不到尚未访问的顶点；</li><li>从 V6 回退到 V3，依然找不到尚未访问的顶点；</li><li>从 V3 回退到 V1，依然找不到尚未访问的顶点；</li><li>V1 是遍历图的起始顶点，回退到 V1 还找不到尚未访问的顶点，意味着以 V1 顶点为突破口，能访问的顶点全部已经访问完了。这种情况下，深度优先搜索算法会从图的所有顶点中重新选择一个尚未访问的顶点，从该顶点出发查找尚未访问的其它顶点。<br>从图 9 可以看到，图中已经没有尚未访问的顶点了，此时深度优先搜索算法才执行结束。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;图的存储结构&quot;&gt;&lt;a href=&quot;#图的存储结构&quot; class=&quot;headerlink&quot; title=&quot;图的存储结构&quot;&gt;&lt;/a&gt;图的存储结构&lt;/h1&gt;&lt;h2 id=&quot;基本知识（此次都是为图存储结构的基本知识，若已了解可跳至算法部分）&quot;&gt;&lt;a href=&quot;#基本知识</summary>
      
    
    
    
    <category term="数据结构" scheme="https://kalyan-zitiu.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="算法" scheme="https://kalyan-zitiu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络学习笔记-物理层</title>
    <link href="https://kalyan-zitiu.github.io/2022/11/14/%E7%89%A9%E7%90%86%E5%B1%82/"/>
    <id>https://kalyan-zitiu.github.io/2022/11/14/%E7%89%A9%E7%90%86%E5%B1%82/</id>
    <published>2022-11-14T13:00:04.000Z</published>
    <updated>2022-11-14T13:43:00.621Z</updated>
    
    <content type="html"><![CDATA[<h1 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h1><h2 id="数据通信基础知识"><a href="#数据通信基础知识" class="headerlink" title="数据通信基础知识"></a>数据通信基础知识</h2><h3 id="数据通信模型"><a href="#数据通信模型" class="headerlink" title="数据通信模型"></a>数据通信模型</h3><ul><li>数据：传送信息的实体，通常时有意义的符号序列</li><li>信号：数据的电气/电磁的表现，时数据传输过程中的存在形式</li><li>信源：产生和发送数据的源头</li><li>信宿：接收数据的终点</li><li>信道：信号的传输媒介，一般用来表示向某一个方向传送信息的介质，因此一条通信线路往往包含一条发送信道和一条接收信道。<br><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202211101114805.png" alt="image-20221106163817766"></li></ul><h3 id="三种通信方式"><a href="#三种通信方式" class="headerlink" title="三种通信方式"></a>三种通信方式</h3><ol><li>单工通信：只有一个方向的通信而没有反方向的交互，仅需要一条信道</li><li>半双工通信：通信的双方都可以发送或接收消息，但任何一方都不能同时发送和接收，需要两条信道</li><li>全双工通信：通信双方可以同时发送和接收信息，也需要两条信道</li></ol><h3 id="两种数据传输方式"><a href="#两种数据传输方式" class="headerlink" title="两种数据传输方式"></a>两种数据传输方式</h3><ul><li>串行传输<img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202211101114004.png" alt="image-20221106165443091"></li><li>并行传输<br><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202211101114090.png" alt="image-20221106165454936"></li></ul><h3 id="并口"><a href="#并口" class="headerlink" title="并口"></a>并口</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202211101114190.png" alt="image-20221106165557385"></p><h3 id="码元"><a href="#码元" class="headerlink" title="码元"></a>码元</h3><ol><li>指的时一个固定时长的信号波形（数字脉冲）代表不同离散数值的基本波形（码元是一个信号）</li><li>数字通信中数字信号的计量单位，这个时长内的信号称为k进制码元，该时长称为码元宽度</li><li>当码元的离散状态右M（M&gt;2）时，此时码元为M进制码元</li><li>1个码元可以携带多个比特信息量。</li></ol><ul><li>举例子：</li></ul><ol><li><p>当码元的<strong>离散状态有四种时</strong>，那么就对应了四种不同的码元<strong>00，01，11，10</strong>。每个码元都对应着自己的电平也就是<strong>数字信号。</strong></p><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202211101114665.png" alt="image-20221108160327118"></p></li></ol><h3 id="速率（数据率）匹配"><a href="#速率（数据率）匹配" class="headerlink" title="速率（数据率）匹配"></a>速率（数据率）匹配</h3><ol><li>数据的传输速率，单位时间内传输的数据量</li></ol><h4 id="传输速率和传播速率的区别"><a href="#传输速率和传播速率的区别" class="headerlink" title="传输速率和传播速率的区别"></a>传输速率和传播速率的区别</h4><p>前者主要针对主机，链路开端方面的数据，即把数据发送到链路的速度。<br>后者是指数据在整个信道上，链路上传播的速度</p><h4 id="码元传输速率（波形速率，调制速率，符号速率）"><a href="#码元传输速率（波形速率，调制速率，符号速率）" class="headerlink" title="码元传输速率（波形速率，调制速率，符号速率）"></a>码元传输速率（波形速率，调制速率，符号速率）</h4><ol><li>表示单位时间内数字通信系统所传输的码元个数，单位波特（Baud），一波特表示数字通信系统每秒传输一个码元。这里的码元可以是多进制的，也可以是二进制的。</li></ol><h4 id="信息传输速率（信息速率，比特率）"><a href="#信息传输速率（信息速率，比特率）" class="headerlink" title="信息传输速率（信息速率，比特率）"></a>信息传输速率（信息速率，比特率）</h4><ol><li>单位时间内数字通信系统传输的二进制码元个数（比特数），单位是比特/秒（1s传输多少比特）</li></ol><h4 id="码元传输和信息传输的关系"><a href="#码元传输和信息传输的关系" class="headerlink" title="码元传输和信息传输的关系"></a>码元传输和信息传输的关系</h4><ol><li>若一个码元携带n bit的信息量，则M Baud的码元传输速率所对应的信息传输速率为M X n bit/s。</li></ol><h3 id="带宽"><a href="#带宽" class="headerlink" title="带宽"></a>带宽</h3><ol><li>表示单位时间内从网络中的某一点到另一点所能通过的“最高数据率”</li><li>表示网络的通信线路所能传输数据的能力。（b/s）</li></ol><h3 id="失真"><a href="#失真" class="headerlink" title="失真"></a>失真</h3><ol><li>现实中的信道会有带宽受限以及噪音等干扰<h4 id="码间串扰"><a href="#码间串扰" class="headerlink" title="码间串扰"></a>码间串扰</h4></li><li>震动的速度和频率太快了，以至于接收端区别不了码元之间的清晰界限的现象。<h5 id="信道带宽"><a href="#信道带宽" class="headerlink" title="信道带宽"></a>信道带宽</h5></li><li>是信道能通过的最高频率和最低频率之差</li></ol><h3 id="奈氏准则"><a href="#奈氏准则" class="headerlink" title="奈氏准则"></a>奈氏准则</h3><ol><li>在理想低通（无噪声，带宽受限）条件下，为了避免码间串扰，极限码元传输速率为2W Baud,W是信道带宽，单位是Hz。</li></ol><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202211101114527.png" alt="image-20221108164817649"></p><ol start="2"><li>码元传输当然是有上限速率的。传输速率超过此上限，就会出现严重的码间串扰问题，使接收端对码元的完全正确识别成为不可能</li><li>信道的频带越宽（即能通过的信号高频分量越多），就可以用更高的速率进行码元的有效传输。（也就是W越大）</li><li>奈氏准则给出了码元的传输速率的限制，但并没有对信息传输速率给出限制</li><li>由于码元的传输速率受奈氏准则的制约，所以提高数据的传输速率，就必须设法使每个码元携带跟多个比特的信息量，这就需要采用多元制的调制方法</li></ol><h3 id="香农定理"><a href="#香农定理" class="headerlink" title="香农定理"></a>香农定理</h3><ol><li>噪声的随机产生会使接收端一段时间失去对码元的判断能力。</li><li>因为噪声和信号是相对的，因此引入了一个信噪比的量</li><li>信噪比=信号的平均功率/噪声的平均功率。</li></ol><ul><li>香农定理： 在带宽受限且有噪声的信道中，为了不产生误差，信息的数据传输速率有上限值</li></ul><ol><li>信噪比越大，极限传输速率越高</li><li>只有有传输带宽以及信噪比，就能够确定信息传输速率的上限</li><li>只要信息的传输速率低于极限值，就有可能完成无差错的传输</li><li>实际的信道传输速率会比极限值低很多<br><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202211101114164.png" alt="image-20221108170535322"></li></ol><h2 id="编码和调制以及其基础知识"><a href="#编码和调制以及其基础知识" class="headerlink" title="编码和调制以及其基础知识"></a>编码和调制以及其基础知识</h2><h3 id="基带信号与宽带信号"><a href="#基带信号与宽带信号" class="headerlink" title="基带信号与宽带信号"></a>基带信号与宽带信号</h3><ol><li>信道：是信号的传输媒介，一般用来表示向某个方向传送信息介质。所以会包含一根发送信道和接收信道</li><li>信道又会根据传输信号和传输介质分为模拟信道（传送模拟信号）/数字信道和无线信道/有线信道<h4 id="基带信号"><a href="#基带信号" class="headerlink" title="基带信号"></a>基带信号</h4></li></ol><ul><li>将数字信号1，0采用不同的电压表示，再送到链路上。来自于信源的信号，像计算机输出的代表各种文字或图像文件的数据信号都属于基带信号。直接表达了要传输信息的信号（不加任何东西）</li></ul><h4 id="宽带信号"><a href="#宽带信号" class="headerlink" title="宽带信号"></a>宽带信号</h4><ul><li>将基带信号也就是01010的数字信号进行调制形成的频分复用模拟信号，再送到模拟信道上。</li><li>宽带利用的是载波调制，信号频分，把信号放在较高频段来传输。</li></ul><h3 id="编码与调制"><a href="#编码与调制" class="headerlink" title="编码与调制"></a>编码与调制</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202211101232481.png" alt="image-20221110123237415"></p><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202211101131784.png" alt="image-20221110113137741"></p><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202211101132385.png" alt="image-20221110113206340"></p><h4 id="数字数据编码为数字信号"><a href="#数字数据编码为数字信号" class="headerlink" title="数字数据编码为数字信号"></a>数字数据编码为数字信号</h4><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202211101143934.png" alt="image-20221110114311908"></p><h5 id="非归零编码【NRZ】"><a href="#非归零编码【NRZ】" class="headerlink" title="非归零编码【NRZ】"></a>非归零编码【NRZ】</h5><ol><li>高1低0,编码容易实现,但没有检错功能,而且没法判断一个码元的开始和结束.两端的难以保持同步 </li><li>需要一个信道来发送这条信号的周期和速度,以达到发送与接收同步<br><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202211101142456.png" alt="image-20221110114258427"></li></ol><h5 id="曼彻斯特编码"><a href="#曼彻斯特编码" class="headerlink" title="曼彻斯特编码"></a><strong>曼彻斯特编码</strong></h5><ol><li>前高后低为1,前低后高为0.当然也可以反着来使用</li><li>曼彻斯特能够实现<strong>自同步接收</strong>,因为它把码元分为了<strong>两个相同的间隔</strong></li><li>编码会在码元的时间中间发生跳变,来告诉接收方时钟信号,并且还能作为数据信号传输</li><li>在一个码元时间内信号变化两次也就是进行了2次脉冲</li></ol><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202211101151216.png" alt="image-20221110115150189"></p><h5 id="差分曼彻斯特编码"><a href="#差分曼彻斯特编码" class="headerlink" title="差分曼彻斯特编码"></a><strong>差分曼彻斯特编码</strong></h5><ol><li>同1异0,简单来说就是后半段电平的下一位遇到0的话就变化,遇到1则不变</li></ol><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202211101159529.png" alt="image-20221110115928497"></p><h5 id="归零编码【RZ】"><a href="#归零编码【RZ】" class="headerlink" title="归零编码【RZ】"></a>归零编码【RZ】</h5><ol><li>信号的电平在每一个码元后都要恢复到0的状态</li><li>需要信道来传输时钟信号</li></ol><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202211101146390.png" alt="image-20221110114621361"></p><h5 id="反向不归零编码【NRZI】"><a href="#反向不归零编码【NRZI】" class="headerlink" title="反向不归零编码【NRZI】"></a>反向不归零编码【NRZI】</h5><ol><li>信号的电平翻转表示0,不变表示1.也就是说遇到0就翻转一次电平,遇到1就不变</li><li>需要信道来传输时钟信号</li></ol><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202211101148118.png" alt="image-20221110114824090"></p><h5 id="4B-5B编码"><a href="#4B-5B编码" class="headerlink" title="4B/5B编码"></a>4B/5B编码</h5><ol><li>在一个比特流中插入额外的比特来打破一连串的01数据流,就是用5个比特来编码4个比特的数据,之后再传给接收方.</li><li>每个4比特的不同排序都会对应不同排序的5比特.</li><li>剩下的5比特排序会留给作为<strong>数据的控制码,<strong>也就是</strong>定界</strong>一样的作用</li></ol><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202211101205953.png" alt="image-20221110120535909"></p><h4 id="数字数据调制为模拟信号"><a href="#数字数据调制为模拟信号" class="headerlink" title="数字数据调制为模拟信号"></a>数字数据调制为模拟信号</h4><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202211101214059.png" alt="image-20221110121407005"></p><h4 id="模拟数据编码为数字信号（举例：音频数字化）"><a href="#模拟数据编码为数字信号（举例：音频数字化）" class="headerlink" title="模拟数据编码为数字信号（举例：音频数字化）"></a>模拟数据编码为数字信号（举例：音频数字化）</h4><ol><li><p>抽样：对模拟信号周期性扫描，把时间上的连续的信号变成时间上离散的信号（定理：f<del>采样频率</del>&gt;=2f<del>信号最高频率</del>）</p></li><li><p>量化：把取得的电平幅值分级标度转化为对应的数字值，并取整数，这就把连续的电平变为离散的数字量</p></li><li><p>编码：量化结果变为二进制编码</p><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202211101222807.png" alt="image-20221110122251757"></p></li></ol><h4 id="模拟数据调制为模拟信号"><a href="#模拟数据调制为模拟信号" class="headerlink" title="模拟数据调制为模拟信号"></a>模拟数据调制为模拟信号</h4><ol><li>可以使用频分复用技术，充分利用带宽资源。</li><li>模拟的声音数据是加载到模拟的载波信号中进行传输。</li></ol><h2 id="传输介质及分类"><a href="#传输介质及分类" class="headerlink" title="传输介质及分类"></a>传输介质及分类</h2><ol><li>传输介质也称传输媒体/传输媒介，它是数据传输系统中在发送设备和设备之间的<strong>物理通路</strong></li><li>它是在物理层下面的并不是物理层，有时候会把传输媒体称为体系结构的第0层</li></ol><h3 id="导向性传输介质"><a href="#导向性传输介质" class="headerlink" title="导向性传输介质"></a>导向性传输介质</h3><ol><li>需要依赖物理媒介<h4 id="双绞线"><a href="#双绞线" class="headerlink" title="双绞线"></a>双绞线</h4></li></ol><ul><li>两根采用一定的规则进行并排绞合的，相互绝缘的铜导线组成。能够减少对相邻导线的电磁干扰<br><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202211141730472.png" alt="image-20221114173045429"></li></ul><h4 id="同轴电缆"><a href="#同轴电缆" class="headerlink" title="同轴电缆"></a>同轴电缆</h4><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202211141736886.png" alt="image-20221114173620742"></p><h4 id="光纤"><a href="#光纤" class="headerlink" title="光纤"></a>光纤</h4><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202211141739188.png" alt="image-20221114173936067"></p><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202211141740893.png" alt="image-20221114174024782"></p><h3 id="非导向性传输介质"><a href="#非导向性传输介质" class="headerlink" title="非导向性传输介质"></a>非导向性传输介质</h3><h4 id="无线电波"><a href="#无线电波" class="headerlink" title="无线电波"></a>无线电波</h4><ul><li>信号向所有方向传播</li><li>较强的穿透能力，可远距离传输，多用于手机通信</li></ul><h4 id="微波"><a href="#微波" class="headerlink" title="微波"></a>微波</h4><ul><li>信号固定方向传播</li><li>微波通信频率较高，频段范围宽，因此数据率很高<h5 id="卫星通信"><a href="#卫星通信" class="headerlink" title="卫星通信"></a>卫星通信</h5></li><li>通信容量大，距离远，覆盖广，广播通信和多址通信</li><li>传播时延较长，受气候影响大，误码率高，成本高</li></ul><h4 id="红外线，激光"><a href="#红外线，激光" class="headerlink" title="红外线，激光"></a>红外线，激光</h4><ul><li>信号固定方向传播</li><li>把要传输的信号分别转换为各自的信号格式，即红外信号和激光信号在空间中传播。</li></ul><h2 id="物理层设备"><a href="#物理层设备" class="headerlink" title="物理层设备"></a>物理层设备</h2><h3 id="中继器"><a href="#中继器" class="headerlink" title="中继器"></a>中继器</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202211141851879.png" alt="image-20221114185153756"></p><h3 id="集线器"><a href="#集线器" class="headerlink" title="集线器"></a>集线器</h3><p><img src="https://gcore.jsdelivr.net/gh/Kalyan-zitiu/TyporaIMG/img/202211141852692.png" alt="image-20221114185248596"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;物理层&quot;&gt;&lt;a href=&quot;#物理层&quot; class=&quot;headerlink&quot; title=&quot;物理层&quot;&gt;&lt;/a&gt;物理层&lt;/h1&gt;&lt;h2 id=&quot;数据通信基础知识&quot;&gt;&lt;a href=&quot;#数据通信基础知识&quot; class=&quot;headerlink&quot; title=&quot;数据通信基</summary>
      
    
    
    
    <category term="计算机网络" scheme="https://kalyan-zitiu.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="计算机网络" scheme="https://kalyan-zitiu.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
</feed>
